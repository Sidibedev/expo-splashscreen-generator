{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import AnimatedNode from\"./AnimatedNode\";import deepEqual from'lodash.isequal';function sanitizeTransform(inputTransform){var outputTransform=[];var hasAnimatedTransform=false;inputTransform.forEach(function(transform){for(var key in transform){var value=transform[key];if(value instanceof AnimatedNode){hasAnimatedTransform=true;outputTransform.push({property:key,nodeID:value.__nodeID});}else{outputTransform.push({property:key,value:value});}}});return hasAnimatedTransform?outputTransform:undefined;}function extractAnimatedParentNodes(transform){var parents=[];transform.forEach(function(transform){for(var key in transform){var value=transform[key];if(value instanceof AnimatedNode){parents.push(value);}}});return parents;}export function createOrReuseTransformNode(transform,oldNode){var config=sanitizeTransform(transform);if(config===undefined){return undefined;}if(oldNode&&deepEqual(config,oldNode._config)){return oldNode;}return new AnimatedTransform(transform,config);}var AnimatedTransform=function(_AnimatedNode){_inherits(AnimatedTransform,_AnimatedNode);var _super=_createSuper(AnimatedTransform);function AnimatedTransform(transform,config){var _this;_classCallCheck(this,AnimatedTransform);_this=_super.call(this,{type:'transform',transform:config},extractAnimatedParentNodes(transform));_this._config=config;_this._transform=transform;return _this;}_createClass(AnimatedTransform,[{key:\"toString\",value:function toString(){return\"AnimatedTransform, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){return this._transform.map(function(transform){var result={};for(var key in transform){var value=transform[key];if(value instanceof AnimatedNode){result[key]=value.__getValue();}}return result;});}}]);return AnimatedTransform;}(AnimatedNode);","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js"],"names":["AnimatedNode","deepEqual","sanitizeTransform","inputTransform","outputTransform","hasAnimatedTransform","forEach","transform","key","value","push","property","nodeID","__nodeID","undefined","extractAnimatedParentNodes","parents","createOrReuseTransformNode","oldNode","config","_config","AnimatedTransform","type","_transform","map","result","__getValue"],"mappings":"qgCAAA,MAAOA,CAAAA,YAAP,sBAEA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,CAEA,QAASC,CAAAA,iBAAT,CAA2BC,cAA3B,CAA2C,CACzC,GAAMC,CAAAA,eAAe,CAAG,EAAxB,CACA,GAAIC,CAAAA,oBAAoB,CAAG,KAA3B,CACAF,cAAc,CAACG,OAAf,CAAuB,SAACC,SAAD,CAAe,CACpC,IAAK,GAAMC,CAAAA,GAAX,GAAkBD,CAAAA,SAAlB,CAA6B,CAC3B,GAAME,CAAAA,KAAK,CAAGF,SAAS,CAACC,GAAD,CAAvB,CACA,GAAIC,KAAK,WAAYT,CAAAA,YAArB,CAAmC,CACjCK,oBAAoB,CAAG,IAAvB,CACAD,eAAe,CAACM,IAAhB,CAAqB,CACnBC,QAAQ,CAAEH,GADS,CAEnBI,MAAM,CAAEH,KAAK,CAACI,QAFK,CAArB,EAID,CAND,IAMO,CACLT,eAAe,CAACM,IAAhB,CAAqB,CACnBC,QAAQ,CAAEH,GADS,CAEnBC,KAAK,CAALA,KAFmB,CAArB,EAID,CACF,CACF,CAhBD,EAiBA,MAAOJ,CAAAA,oBAAoB,CAAGD,eAAH,CAAqBU,SAAhD,CACD,CAED,QAASC,CAAAA,0BAAT,CAAoCR,SAApC,CAA+C,CAC7C,GAAMS,CAAAA,OAAO,CAAG,EAAhB,CACAT,SAAS,CAACD,OAAV,CAAkB,SAACC,SAAD,CAAe,CAC/B,IAAK,GAAMC,CAAAA,GAAX,GAAkBD,CAAAA,SAAlB,CAA6B,CAC3B,GAAME,CAAAA,KAAK,CAAGF,SAAS,CAACC,GAAD,CAAvB,CACA,GAAIC,KAAK,WAAYT,CAAAA,YAArB,CAAmC,CACjCgB,OAAO,CAACN,IAAR,CAAaD,KAAb,EACD,CACF,CACF,CAPD,EAQA,MAAOO,CAAAA,OAAP,CACD,CAED,MAAO,SAASC,CAAAA,0BAAT,CAAoCV,SAApC,CAA+CW,OAA/C,CAAwD,CAC7D,GAAMC,CAAAA,MAAM,CAAGjB,iBAAiB,CAACK,SAAD,CAAhC,CACA,GAAIY,MAAM,GAAKL,SAAf,CAA0B,CACxB,MAAOA,CAAAA,SAAP,CACD,CACD,GAAII,OAAO,EAAIjB,SAAS,CAACkB,MAAD,CAASD,OAAO,CAACE,OAAjB,CAAxB,CAAmD,CACjD,MAAOF,CAAAA,OAAP,CACD,CACD,MAAO,IAAIG,CAAAA,iBAAJ,CAAsBd,SAAtB,CAAiCY,MAAjC,CAAP,CACD,C,GAEKE,CAAAA,iB,+GACJ,2BAAYd,SAAZ,CAAuBY,MAAvB,CAA+B,mDAC7B,uBACE,CAAEG,IAAI,CAAE,WAAR,CAAqBf,SAAS,CAAEY,MAAhC,CADF,CAEEJ,0BAA0B,CAACR,SAAD,CAF5B,EAIA,MAAKa,OAAL,CAAeD,MAAf,CACA,MAAKI,UAAL,CAAkBhB,SAAlB,CAN6B,aAO9B,C,sDAED,mBAAW,CACT,gCAAiC,KAAKM,QAAtC,CACD,C,4BAED,uBAAe,CACb,MAAO,MAAKU,UAAL,CAAgBC,GAAhB,CAAoB,SAACjB,SAAD,CAAe,CACxC,GAAMkB,CAAAA,MAAM,CAAG,EAAf,CACA,IAAK,GAAMjB,CAAAA,GAAX,GAAkBD,CAAAA,SAAlB,CAA6B,CAC3B,GAAME,CAAAA,KAAK,CAAGF,SAAS,CAACC,GAAD,CAAvB,CACA,GAAIC,KAAK,WAAYT,CAAAA,YAArB,CAAmC,CACjCyB,MAAM,CAACjB,GAAD,CAAN,CAAcC,KAAK,CAACiB,UAAN,EAAd,CACD,CACF,CACD,MAAOD,CAAAA,MAAP,CACD,CATM,CAAP,CAUD,C,+BAzB6BzB,Y","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'lodash.isequal';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  let hasAnimatedTransform = false;\n  inputTransform.forEach((transform) => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        hasAnimatedTransform = true;\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return hasAnimatedTransform ? outputTransform : undefined;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach((transform) => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (config === undefined) {\n    return undefined;\n  }\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return `AnimatedTransform, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._transform.map((transform) => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}