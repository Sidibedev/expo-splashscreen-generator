{"ast":null,"code":"'use strict';import invariant from'fbjs/lib/invariant';var EventSubscriptionVendor=function(){function EventSubscriptionVendor(){this._subscriptionsForType={};}var _proto=EventSubscriptionVendor.prototype;_proto.addSubscription=function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;};_proto.removeAllSubscriptions=function removeAllSubscriptions(eventType){if(eventType==null){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}};_proto.removeSubscription=function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}};_proto.getSubscriptionsForType=function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];};return EventSubscriptionVendor;}();export default EventSubscriptionVendor;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","_proto","prototype","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"mappings":"AASA,aAEA,MAAOA,CAAAA,SAAP,KAAsB,oBAAtB,CAMA,GAAIC,CAAAA,uBAAuB,CAAgB,UAAY,CACrD,QAASA,CAAAA,uBAAT,EAAmC,CACjC,KAAKC,qBAAL,CAA6B,EAA7B,CACD,CASD,GAAIC,CAAAA,MAAM,CAAGF,uBAAuB,CAACG,SAArC,CAEAD,MAAM,CAACE,eAAP,CAAyB,QAASA,CAAAA,eAAT,CAAyBC,SAAzB,CAAoCC,YAApC,CAAkD,CACzEP,SAAS,CAACO,YAAY,CAACC,UAAb,GAA4B,IAA7B,CAAmC,wDAAnC,CAAT,CAEA,GAAI,CAAC,KAAKN,qBAAL,CAA2BI,SAA3B,CAAL,CAA4C,CAC1C,KAAKJ,qBAAL,CAA2BI,SAA3B,EAAwC,EAAxC,CACD,CAED,GAAIG,CAAAA,GAAG,CAAG,KAAKP,qBAAL,CAA2BI,SAA3B,EAAsCI,MAAhD,CAEA,KAAKR,qBAAL,CAA2BI,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C,EAEAA,YAAY,CAACD,SAAb,CAAyBA,SAAzB,CACAC,YAAY,CAACE,GAAb,CAAmBA,GAAnB,CACA,MAAOF,CAAAA,YAAP,CACD,CAdD,CAuBAJ,MAAM,CAACS,sBAAP,CAAgC,QAASA,CAAAA,sBAAT,CAAgCN,SAAhC,CAA2C,CACzE,GAAIA,SAAS,EAAI,IAAjB,CAAuB,CACrB,KAAKJ,qBAAL,CAA6B,EAA7B,CACD,CAFD,IAEO,CACL,MAAO,MAAKA,qBAAL,CAA2BI,SAA3B,CAAP,CACD,CACF,CAND,CAeAH,MAAM,CAACU,kBAAP,CAA4B,QAASA,CAAAA,kBAAT,CAA4BN,YAA5B,CAA0C,CACpE,GAAID,CAAAA,SAAS,CAAGC,YAAY,CAACD,SAA7B,CACA,GAAIG,CAAAA,GAAG,CAAGF,YAAY,CAACE,GAAvB,CACA,GAAIK,CAAAA,oBAAoB,CAAG,KAAKZ,qBAAL,CAA2BI,SAA3B,CAA3B,CAEA,GAAIQ,oBAAJ,CAA0B,CACxB,MAAOA,CAAAA,oBAAoB,CAACL,GAAD,CAA3B,CACD,CACF,CARD,CAuBAN,MAAM,CAACY,uBAAP,CAAiC,QAASA,CAAAA,uBAAT,CAAiCT,SAAjC,CAA4C,CAC3E,MAAO,MAAKJ,qBAAL,CAA2BI,SAA3B,CAAP,CACD,CAFD,CAIA,MAAOL,CAAAA,uBAAP,CACD,CAhF0C,EAA3C,CAkFA,cAAeA,CAAAA,uBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nexport default EventSubscriptionVendor;"]},"metadata":{},"sourceType":"module"}