{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import AnimatedNode from\"./AnimatedNode\";import{val}from\"../val\";import invariant from'invariant';import{adapt}from\"../core/AnimatedBlock\";function reduce(fn){return function(input){return input.reduce(function(a,b){return fn(val(a),val(b));});};}function reduceFrom(fn,initialValue){return function(input){return input.reduce(function(a,b){return fn(val(a),val(b));},initialValue);};}function infix(fn){return function(input){return fn(val(input[0]),val(input[1]));};}function single(fn){return function(input){return fn(val(input[0]));};}var OPERATIONS={add:reduce(function(a,b){return a+b;}),sub:reduce(function(a,b){return a-b;}),multiply:reduce(function(a,b){return a*b;}),divide:reduce(function(a,b){return a/b;}),pow:reduce(function(a,b){return Math.pow(a,b);}),modulo:reduce(function(a,b){return(a%b+b)%b;}),sqrt:single(function(a){return Math.sqrt(a);}),log:single(function(a){return Math.log(a);}),sin:single(function(a){return Math.sin(a);}),cos:single(function(a){return Math.cos(a);}),tan:single(function(a){return Math.tan(a);}),acos:single(function(a){return Math.acos(a);}),asin:single(function(a){return Math.asin(a);}),atan:single(function(a){return Math.atan(a);}),exp:single(function(a){return Math.exp(a);}),round:single(function(a){return Math.round(a);}),abs:single(function(a){return Math.abs(a);}),ceil:single(function(a){return Math.ceil(a);}),floor:single(function(a){return Math.floor(a);}),max:reduce(function(a,b){return Math.max(a,b);}),min:reduce(function(a,b){return Math.min(a,b);}),and:reduceFrom(function(a,b){return a&&b;},true),or:reduceFrom(function(a,b){return a||b;},false),not:single(function(a){return!a;}),defined:single(function(a){return a!==null&&a!==undefined&&!isNaN(a);}),lessThan:infix(function(a,b){return a<b;}),eq:infix(function(a,b){return a==b;}),greaterThan:infix(function(a,b){return a>b;}),lessOrEq:infix(function(a,b){return a<=b;}),greaterOrEq:infix(function(a,b){return a>=b;}),neq:infix(function(a,b){return a!=b;})};var AnimatedOperator=function(_AnimatedNode){_inherits(AnimatedOperator,_AnimatedNode);var _super=_createSuper(AnimatedOperator);function AnimatedOperator(operator,input){var _this;_classCallCheck(this,AnimatedOperator);invariant(typeof operator==='string',\"Reanimated: Animated.operator node first argument should be of type String, but got: \"+operator);invariant(input.every(function(el){return el instanceof AnimatedNode||typeof el==='string'||typeof el==='number';}),\"Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got \"+input);_this=_super.call(this,{type:'op',op:operator,input:input},input);_this._op=operator;_this._input=input;return _this;}_createClass(AnimatedOperator,[{key:\"toString\",value:function toString(){return\"AnimatedOperator, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){if(!this._operation){this._operation=OPERATIONS[this._op];invariant(this._operation,\"Illegal operator '%s'\",this._op);}return this._operation(this._input);}}]);return AnimatedOperator;}(AnimatedNode);export function createAnimatedOperator(name){return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new AnimatedOperator(name,args.map(adapt));};}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js"],"names":["AnimatedNode","val","invariant","adapt","reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","operator","every","el","type","op","_op","_input","__nodeID","_operation","createAnimatedOperator","name","args","map"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return (input) => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return (input) => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return (input) => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return (input) => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single((a) => Math.sqrt(a)),\n  log: single((a) => Math.log(a)),\n  sin: single((a) => Math.sin(a)),\n  cos: single((a) => Math.cos(a)),\n  tan: single((a) => Math.tan(a)),\n  acos: single((a) => Math.acos(a)),\n  asin: single((a) => Math.asin(a)),\n  atan: single((a) => Math.atan(a)),\n  exp: single((a) => Math.exp(a)),\n  round: single((a) => Math.round(a)),\n  abs: single((a) => Math.abs(a)),\n  ceil: single((a) => Math.ceil(a)),\n  floor: single((a) => Math.floor(a)),\n  max: reduce((a, b) => Math.max(a, b)),\n  min: reduce((a, b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single((a) => !a),\n  defined: single((a) => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        (el) =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super({ type: 'op', op: operator, input }, input);\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}