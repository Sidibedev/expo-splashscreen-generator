{"ast":null,"code":"import invariant from'fbjs/lib/invariant';import EmitterSubscription from\"./_EmitterSubscription\";import EventSubscriptionVendor from\"./_EventSubscriptionVendor\";var sparseFilterPredicate=function sparseFilterPredicate(){return true;};var EventEmitter=function(){function EventEmitter(subscriber){this._subscriber=subscriber||new EventSubscriptionVendor();}var _proto=EventEmitter.prototype;_proto.addListener=function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new EmitterSubscription(this,this._subscriber,listener,context));};_proto.removeAllListeners=function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);};_proto.removeSubscription=function removeSubscription(subscription){invariant(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);};_proto.listenerCount=function listenerCount(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(sparseFilterPredicate).length:0;};_proto.emit=function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener){subscription.listener.apply(subscription.context,args);}}}};_proto.removeListener=function removeListener(eventType,listener){console.error(\"EventEmitter.removeListener('\"+eventType+\"', ...): Method has been \"+'deprecated. Please instead use `remove()` on the subscription '+'returned by `EventEmitter.addListener`.');var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}};return EventEmitter;}();export default EventEmitter;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventEmitter.js"],"names":["invariant","EmitterSubscription","EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","_proto","prototype","addListener","eventType","listener","context","addSubscription","removeAllListeners","removeAllSubscriptions","removeSubscription","subscription","emitter","listenerCount","subscriptions","getSubscriptionsForType","filter","length","emit","_len","arguments","args","Array","_key","i","l","apply","removeListener","console","error","remove"],"mappings":"AAUA,MAAOA,CAAAA,SAAP,KAAsB,oBAAtB,CACA,MAAOC,CAAAA,mBAAP,8BACA,MAAOC,CAAAA,uBAAP,kCAEA,GAAIC,CAAAA,qBAAqB,CAAG,QAASA,CAAAA,qBAAT,EAAiC,CAC3D,MAAO,KAAP,CACD,CAFD,CAiBA,GAAIC,CAAAA,YAAY,CAAgB,UAAY,CAO1C,QAASA,CAAAA,YAAT,CAAsBC,UAAtB,CAAkC,CAChC,KAAKC,WAAL,CAAmBD,UAAU,EAAI,GAAIH,CAAAA,uBAAJ,EAAjC,CACD,CAiBD,GAAIK,CAAAA,MAAM,CAAGH,YAAY,CAACI,SAA1B,CAEAD,MAAM,CAACE,WAAP,CAAqB,QAASA,CAAAA,WAAT,CAAqBC,SAArB,CACrBC,QADqB,CACXC,OADW,CACF,CACjB,MAAO,MAAKN,WAAL,CAAiBO,eAAjB,CAAiCH,SAAjC,CAA4C,GAAIT,CAAAA,mBAAJ,CAAwB,IAAxB,CAA8B,KAAKK,WAAnC,CAAgDK,QAAhD,CAA0DC,OAA1D,CAA5C,CAAP,CACD,CAHD,CAaAL,MAAM,CAACO,kBAAP,CAA4B,QAASA,CAAAA,kBAAT,CAA4BJ,SAA5B,CAAuC,CACjE,KAAKJ,WAAL,CAAiBS,sBAAjB,CAAwCL,SAAxC,EACD,CAFD,CAQAH,MAAM,CAACS,kBAAP,CAA4B,QAASA,CAAAA,kBAAT,CAA4BC,YAA5B,CAA0C,CACpEjB,SAAS,CAACiB,YAAY,CAACC,OAAb,GAAyB,IAA1B,CAAgC,+CAAhC,CAAT,CAEA,KAAKZ,WAAL,CAAiBU,kBAAjB,CAAoCC,YAApC,EACD,CAJD,CAcAV,MAAM,CAACY,aAAP,CAAuB,QAASA,CAAAA,aAAT,CAAuBT,SAAvB,CAAkC,CACvD,GAAIU,CAAAA,aAAa,CAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAApB,CAEA,MAAOU,CAAAA,aAAa,CAIpBA,aAAa,CAACE,MAAd,CAAqBnB,qBAArB,EAA4CoB,MAJxB,CAIiC,CAJrD,CAKD,CARD,CAyBAhB,MAAM,CAACiB,IAAP,CAAc,QAASA,CAAAA,IAAT,CAAcd,SAAd,CAAyB,CACrC,GAAIU,CAAAA,aAAa,CAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAApB,CAEA,GAAIU,aAAJ,CAAmB,CACjB,IAAK,GAAIK,CAAAA,IAAI,CAAGC,SAAS,CAACH,MAArB,CAA6BI,IAAI,CAAG,GAAIC,CAAAA,KAAJ,CAAUH,IAAI,CAAG,CAAP,CAAWA,IAAI,CAAG,CAAlB,CAAsB,CAAhC,CAApC,CAAwEI,IAAI,CAAG,CAApF,CAAuFA,IAAI,CAAGJ,IAA9F,CAAoGI,IAAI,EAAxG,CAA4G,CAC1GF,IAAI,CAACE,IAAI,CAAG,CAAR,CAAJ,CAAiBH,SAAS,CAACG,IAAD,CAA1B,CACD,CAED,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAC,CAAGX,aAAa,CAACG,MAAlC,CAA0CO,CAAC,CAAGC,CAA9C,CAAiDD,CAAC,EAAlD,CAAsD,CACpD,GAAIb,CAAAA,YAAY,CAAGG,aAAa,CAACU,CAAD,CAAhC,CAEA,GAAIb,YAAY,EAAIA,YAAY,CAACN,QAAjC,CAA2C,CACzCM,YAAY,CAACN,QAAb,CAAsBqB,KAAtB,CAA4Bf,YAAY,CAACL,OAAzC,CAAkDe,IAAlD,EACD,CACF,CACF,CACF,CAhBD,CAsBApB,MAAM,CAAC0B,cAAP,CAAwB,QAASA,CAAAA,cAAT,CAAwBvB,SAAxB,CACxBC,QADwB,CACd,CACRuB,OAAO,CAACC,KAAR,CAAc,gCAAkCzB,SAAlC,CAA8C,2BAA9C,CAA4E,gEAA5E,CAA+I,yCAA7J,EAEA,GAAIU,CAAAA,aAAa,CAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAApB,CAEA,GAAIU,aAAJ,CAAmB,CACjB,IAAK,GAAIU,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAC,CAAGX,aAAa,CAACG,MAAlC,CAA0CO,CAAC,CAAGC,CAA9C,CAAiDD,CAAC,EAAlD,CAAsD,CACpD,GAAIb,CAAAA,YAAY,CAAGG,aAAa,CAACU,CAAD,CAAhC,CAGA,GAAIb,YAAY,EAAIA,YAAY,CAACN,QAAb,GAA0BA,QAA9C,CAAwD,CACtDM,YAAY,CAACmB,MAAb,GACD,CACF,CACF,CACF,CAhBD,CAkBA,MAAOhC,CAAAA,YAAP,CACD,CAjI+B,EAAhC,CAmIA,cAAeA,CAAAA,YAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nimport invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from './_EmitterSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nvar EventEmitter = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  ;\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"]},"metadata":{},"sourceType":"module"}