{"ast":null,"code":"function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import{useRef}from'react';import{makeMutable}from\"./core\";import Platform from\"react-native-web/dist/exports/Platform\";var scheduleUpdates=Platform.OS==='web'?requestAnimationFrame:setImmediate;export function makeViewDescriptorsSet(){var ref=useRef(null);if(ref.current===null){var data={batchToRemove:new Set(),tags:new Set(),waitForInsertSync:false,waitForRemoveSync:false,sharableViewDescriptors:makeMutable([]),items:[],add:function add(item){if(data.tags.has(item.tag)){return;}data.tags.add(item.tag);data.items.push(item);if(!data.waitForInsertSync){data.waitForInsertSync=true;scheduleUpdates(function(){data.sharableViewDescriptors.value=data.items;data.waitForInsertSync=false;});}},remove:function remove(viewTag){data.batchToRemove.add(viewTag);if(!data.waitForRemoveSync){data.waitForRemoveSync=true;scheduleUpdates(function(){var items=[];for(var _iterator=_createForOfIteratorHelperLoose(data.items),_step;!(_step=_iterator()).done;){var item=_step.value;if(data.batchToRemove.has(item.tag)){data.tags.delete(item.tag);}else{items.push(item);}}data.items=items;data.sharableViewDescriptors.value=items;data.batchToRemove=new Set();data.waitForRemoveSync=false;});}},rebuildsharableViewDescriptors:function rebuildsharableViewDescriptors(sharableViewDescriptors){data.sharableViewDescriptors=sharableViewDescriptors;}};ref.current=data;}return ref.current;}export function makeViewsRefSet(){var ref=useRef(null);if(ref.current===null){var data={items:new Set(),add:function add(item){if(data.items.has(item))return;data.items.add(item);},remove:function remove(item){data.items.delete(item);}};ref.current=data;}return ref.current;}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/ViewDescriptorsSet.js"],"names":["useRef","makeMutable","scheduleUpdates","Platform","OS","requestAnimationFrame","setImmediate","makeViewDescriptorsSet","ref","current","data","batchToRemove","Set","tags","waitForInsertSync","waitForRemoveSync","sharableViewDescriptors","items","add","item","has","tag","push","value","remove","viewTag","delete","rebuildsharableViewDescriptors","makeViewsRefSet"],"mappings":"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","sourcesContent":["import { useRef } from 'react';\nimport { makeMutable } from './core';\nimport { Platform } from 'react-native';\nconst scheduleUpdates = Platform.OS === 'web' ? requestAnimationFrame : setImmediate;\nexport function makeViewDescriptorsSet() {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        const data = {\n            batchToRemove: new Set(),\n            tags: new Set(),\n            waitForInsertSync: false,\n            waitForRemoveSync: false,\n            sharableViewDescriptors: makeMutable([]),\n            items: [],\n            add: (item) => {\n                if (data.tags.has(item.tag)) {\n                    return;\n                }\n                data.tags.add(item.tag);\n                data.items.push(item);\n                if (!data.waitForInsertSync) {\n                    data.waitForInsertSync = true;\n                    scheduleUpdates(() => {\n                        data.sharableViewDescriptors.value = data.items;\n                        data.waitForInsertSync = false;\n                    });\n                }\n            },\n            remove: (viewTag) => {\n                data.batchToRemove.add(viewTag);\n                if (!data.waitForRemoveSync) {\n                    data.waitForRemoveSync = true;\n                    scheduleUpdates(() => {\n                        const items = [];\n                        for (const item of data.items) {\n                            if (data.batchToRemove.has(item.tag)) {\n                                data.tags.delete(item.tag);\n                            }\n                            else {\n                                items.push(item);\n                            }\n                        }\n                        data.items = items;\n                        data.sharableViewDescriptors.value = items;\n                        data.batchToRemove = new Set();\n                        data.waitForRemoveSync = false;\n                    });\n                }\n            },\n            rebuildsharableViewDescriptors: (sharableViewDescriptors) => {\n                data.sharableViewDescriptors = sharableViewDescriptors;\n            },\n        };\n        ref.current = data;\n    }\n    return ref.current;\n}\nexport function makeViewsRefSet() {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        const data = {\n            items: new Set(),\n            add: (item) => {\n                if (data.items.has(item))\n                    return;\n                data.items.add(item);\n            },\n            remove: (item) => {\n                data.items.delete(item);\n            },\n        };\n        ref.current = data;\n    }\n    return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}