{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font\";function uriFromFontSource(asset){if(typeof asset==='string'){return asset||null;}else if(typeof asset==='object'){return asset.uri||asset.localUri||null;}return null;}function displayFromFontSource(asset){return asset.display||FontDisplay.AUTO;}export function fontFamilyNeedsScoping(name){return false;}export function getAssetForSource(source){var uri=uriFromFontSource(source);var display=displayFromFontSource(source);if(!uri||typeof uri!=='string'){throwInvalidSourceError(uri);}return{uri:uri,display:display};}function throwInvalidSourceError(source){var type=typeof source;if(type==='object')type=JSON.stringify(source,null,2);throw new CodedError(\"ERR_FONT_SOURCE\",\"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \"+type);}export function loadSingleFontAsync(name,input){return _regeneratorRuntime.async(function loadSingleFontAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(typeof input!=='object'||typeof input.uri!=='string'||input.downloadAsync){throwInvalidSourceError(input);}_context.next=3;return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name,input));case 3:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getNativeFontName(name){return name;}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":"4DACA,OAAS,UAAT,KAA2B,mBAA3B,CAEA,MAAO,CAAA,cAAP,wBACA,OAAS,WAAT,cAGA,QAAS,CAAA,iBAAT,CAA2B,KAA3B,CAAqC,CACnC,GAAI,MAAO,CAAA,KAAP,GAAiB,QAArB,CAA+B,CAC7B,MAAO,CAAA,KAAK,EAAI,IAAhB,CACD,CAFD,IAEO,IAAI,MAAO,CAAA,KAAP,GAAiB,QAArB,CAA+B,CACpC,MAAO,CAAA,KAAK,CAAC,GAAN,EAAa,KAAK,CAAC,QAAnB,EAA+B,IAAtC,CACD,CACD,MAAO,KAAP,CACD,CAED,QAAS,CAAA,qBAAT,CAA+B,KAA/B,CAAyC,CACvC,MAAO,CAAA,KAAK,CAAC,OAAN,EAAiB,WAAW,CAAC,IAApC,CACD,CAED,MAAM,SAAU,CAAA,sBAAV,CAAiC,IAAjC,CAA6C,CACjD,MAAO,MAAP,CACD,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA8C,CAClD,GAAM,CAAA,GAAG,CAAG,iBAAiB,CAAC,MAAD,CAA7B,CACA,GAAM,CAAA,OAAO,CAAG,qBAAqB,CAAC,MAAD,CAArC,CAEA,GAAI,CAAC,GAAD,EAAQ,MAAO,CAAA,GAAP,GAAe,QAA3B,CAAqC,CACnC,uBAAuB,CAAC,GAAD,CAAvB,CACD,CAED,MAAO,CACL,GAAG,CAAE,GADA,CAEL,OAAO,CAAP,OAFK,CAAP,CAID,CAED,QAAS,CAAA,uBAAT,CAAiC,MAAjC,CAA4C,CAC1C,GAAI,CAAA,IAAI,CAAW,MAAO,CAAA,MAA1B,CACA,GAAI,IAAI,GAAK,QAAb,CAAuB,IAAI,CAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAAuB,IAAvB,CAA6B,CAA7B,CAAP,CACvB,KAAM,IAAI,CAAA,UAAJ,gIAE2G,IAF3G,CAAN,CAID,CAED,MAAO,SAAe,CAAA,mBAAf,CACL,IADK,CAEL,KAFK,+HAIL,GAAI,MAAO,CAAA,KAAP,GAAiB,QAAjB,EAA6B,MAAO,CAAA,KAAK,CAAC,GAAb,GAAqB,QAAlD,EAA+D,KAAa,CAAC,aAAjF,CAAgG,CAC9F,uBAAuB,CAAC,KAAD,CAAvB,CACD,CANI,iDAQC,cAAc,CAAC,SAAf,CAAyB,IAAzB,CAA+B,KAA/B,CARD,uEAWP,MAAM,SAAU,CAAA,iBAAV,CAA4B,IAA5B,CAAwC,CAC5C,MAAO,CAAA,IAAP,CACD","sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}