{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var MapperRegistry=function(){function MapperRegistry(module){_classCallCheck(this,MapperRegistry);this.sortedMappers=[];this.mappers=new Map();this.updatedSinceLastExecute=false;this._module=module;}_createClass(MapperRegistry,[{key:\"startMapper\",value:function startMapper(mapper){this.mappers.set(mapper.id,mapper);this.updatedSinceLastExecute=true;return mapper.id;}},{key:\"stopMapper\",value:function stopMapper(id){this.mappers.delete(id);this.updatedSinceLastExecute=true;}},{key:\"execute\",value:function execute(){if(this.updatedSinceLastExecute){this.updateOrder();this.updatedSinceLastExecute=false;}for(var i=0,len=this.sortedMappers.length;i<len;++i){var mapper=this.sortedMappers[i];if(mapper.dirty){mapper.execute();}}}},{key:\"updateOrder\",value:function updateOrder(){var nodes=_toConsumableArray(this.mappers.values()).map(function(mapper){return new Node(mapper);});var mappersById={};this.mappers.forEach(function(mapper){mappersById[mapper.id]=mapper;});for(var i=0,nodesLen=nodes.length;i<nodesLen;++i){var node=nodes[i];if(node.mapper.outputs.length===0){continue;}for(var j=0;j<nodesLen;++j){var restNode=nodes[j];if(i===j||restNode.mapper.inputs.length===0){continue;}for(var outi=0,outputsLen=node.mapper.outputs.length;outi<outputsLen;++outi){for(var resti=0,restLen=restNode.mapper.inputs.length;resti<restLen;++resti){if(node.mapper.outputs[outi]._id===restNode.mapper.inputs[resti]._id){node.children.push(restNode);}}}}}var post={};var postCounter=1;var dfs=function dfs(node){var index=nodes.indexOf(node);if(index===-1){return;}++postCounter;nodes.splice(index,1);if(node.children.length===0&&nodes.length>0){post[node.mapper.id]=postCounter++;dfs(nodes[0]);return;}for(var _i=0,len=node.children.length;_i<len;++_i){dfs(node.children[_i]);}post[node.mapper.id]=postCounter++;};while(nodes.length){dfs(nodes[0]);}var postArray=Object.keys(post).map(function(key){var num=parseInt(key);return[num,post[num]];});postArray.sort(function(a,b){return b[1]-a[1];});this.sortedMappers=[];for(var _i2=0,len=postArray.length;_i2<len;++_i2){var _postArray$_i=_slicedToArray(postArray[_i2],1),id=_postArray$_i[0];this.sortedMappers.push(mappersById[id]);}}},{key:\"needRunOnRender\",get:function get(){return this.updatedSinceLastExecute;}}]);return MapperRegistry;}();export{MapperRegistry as default};var Node=_createClass(function Node(mapper){var children=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];_classCallCheck(this,Node);this.mapper=mapper;this.children=children;});","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MapperRegistry.js"],"names":["MapperRegistry","module","sortedMappers","mappers","Map","updatedSinceLastExecute","_module","mapper","set","id","delete","updateOrder","i","len","length","dirty","execute","nodes","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","key","num","parseInt","sort","a","b"],"mappings":"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","sourcesContent":["export default class MapperRegistry {\n    constructor(module) {\n        this.sortedMappers = [];\n        this.mappers = new Map();\n        this.updatedSinceLastExecute = false;\n        this._module = module;\n    }\n    startMapper(mapper) {\n        this.mappers.set(mapper.id, mapper);\n        this.updatedSinceLastExecute = true;\n        return mapper.id;\n    }\n    stopMapper(id) {\n        this.mappers.delete(id);\n        this.updatedSinceLastExecute = true;\n    }\n    execute() {\n        if (this.updatedSinceLastExecute) {\n            this.updateOrder();\n            this.updatedSinceLastExecute = false;\n        }\n        for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n            const mapper = this.sortedMappers[i];\n            if (mapper.dirty) {\n                mapper.execute();\n            }\n        }\n    }\n    updateOrder() {\n        const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n        const mappersById = {};\n        this.mappers.forEach((mapper) => {\n            mappersById[mapper.id] = mapper;\n        });\n        // create a graph from array of nodes\n        for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n            const node = nodes[i];\n            if (node.mapper.outputs.length === 0) {\n                continue;\n            }\n            for (let j = 0; j < nodesLen; ++j) {\n                const restNode = nodes[j];\n                if (i === j || restNode.mapper.inputs.length === 0) {\n                    continue;\n                }\n                for (let outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n                    for (let resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n                        if (node.mapper.outputs[outi]._id ===\n                            restNode.mapper.inputs[resti]._id) {\n                            node.children.push(restNode);\n                        }\n                    }\n                }\n            }\n        }\n        const post = {};\n        let postCounter = 1;\n        const dfs = (node) => {\n            const index = nodes.indexOf(node);\n            if (index === -1) {\n                // this node has already been handled\n                return;\n            }\n            ++postCounter;\n            nodes.splice(index, 1);\n            if (node.children.length === 0 && nodes.length > 0) {\n                post[node.mapper.id] = postCounter++;\n                dfs(nodes[0]);\n                return;\n            }\n            for (let i = 0, len = node.children.length; i < len; ++i) {\n                dfs(node.children[i]);\n            }\n            post[node.mapper.id] = postCounter++;\n        };\n        while (nodes.length)\n            dfs(nodes[0]);\n        const postArray = Object.keys(post).map((key) => {\n            const num = parseInt(key);\n            return [num, post[num]];\n        });\n        postArray.sort((a, b) => {\n            return b[1] - a[1];\n        });\n        // clear sorted mappers\n        this.sortedMappers = [];\n        for (let i = 0, len = postArray.length; i < len; ++i) {\n            const [id] = postArray[i];\n            this.sortedMappers.push(mappersById[id]);\n        }\n    }\n    get needRunOnRender() {\n        return this.updatedSinceLastExecute;\n    }\n}\nclass Node {\n    constructor(mapper, children = []) {\n        this.mapper = mapper;\n        this.children = children;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}