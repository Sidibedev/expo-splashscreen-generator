{"ast":null,"code":"import useCode from\"../derived/useCode\";import AnimatedNode from\"./AnimatedNode\";function assertNodesNotNull(code,children,exec){if(!code){var error=!children?\"Got \\\"\"+typeof children+\"\\\" type passed to children\":\"Got \\\"\"+typeof exec+\"\\\" type passed to exec\";throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \"+error);}}function Code(_ref){var exec=_ref.exec,children=_ref.children,dependencies=_ref.dependencies;var nodes=children||exec;var code=null;if(nodes instanceof AnimatedNode){code=function code(){return nodes;};}else if(typeof nodes==='function'){code=nodes;}assertNodesNotNull(code,children,exec);useCode(code,dependencies);return null;}export default Code;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js"],"names":["useCode","AnimatedNode","assertNodesNotNull","code","children","exec","error","Error","Code","dependencies","nodes"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,0BACA,MAAOC,CAAAA,YAAP,sBAEA,QAASC,CAAAA,kBAAT,CAA4BC,IAA5B,CAAkCC,QAAlC,CAA4CC,IAA5C,CAAkD,CAChD,GAAI,CAACF,IAAL,CAAW,CACT,GAAMG,CAAAA,KAAK,CAAG,CAACF,QAAD,UACF,MAAOA,CAAAA,QADL,uCAEF,MAAOC,CAAAA,IAFL,yBAAd,CAIA,KAAM,IAAIE,CAAAA,KAAJ,2HACsHD,KADtH,CAAN,CAGD,CACF,CAED,QAASE,CAAAA,IAAT,MAAgD,IAAhCH,CAAAA,IAAgC,MAAhCA,IAAgC,CAA1BD,QAA0B,MAA1BA,QAA0B,CAAhBK,YAAgB,MAAhBA,YAAgB,CAC9C,GAAMC,CAAAA,KAAK,CAAGN,QAAQ,EAAIC,IAA1B,CAEA,GAAIF,CAAAA,IAAI,CAAG,IAAX,CACA,GAAIO,KAAK,WAAYT,CAAAA,YAArB,CAAmC,CACjCE,IAAI,CAAG,sBAAMO,CAAAA,KAAN,EAAP,CACD,CAFD,IAEO,IAAI,MAAOA,CAAAA,KAAP,GAAiB,UAArB,CAAiC,CACtCP,IAAI,CAAGO,KAAP,CACD,CAEDR,kBAAkB,CAACC,IAAD,CAAOC,QAAP,CAAiBC,IAAjB,CAAlB,CAEAL,OAAO,CAACG,IAAD,CAAOM,YAAP,CAAP,CACA,MAAO,KAAP,CACD,CAED,cAAeD,CAAAA,IAAf","sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}