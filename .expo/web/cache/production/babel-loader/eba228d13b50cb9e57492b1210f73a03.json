{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from'react';import{loadAsync}from\"./Font\";export function useFonts(map){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loaded=_useState2[0],setLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){loadAsync(map).then(function(){return setLoaded(true);}).catch(setError);},[]);return[loaded,error];}","map":{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":"iEAAA,OAAS,SAAT,CAAoB,QAApB,KAAoC,OAApC,CAEA,OAAS,SAAT,cAqBA,MAAM,SAAU,CAAA,QAAV,CAAmB,GAAnB,CAA2D,CAC/D,cAA4B,QAAQ,CAAC,KAAD,CAApC,wCAAO,MAAP,eAAe,SAAf,eACA,eAA0B,QAAQ,CAAe,IAAf,CAAlC,yCAAO,KAAP,eAAc,QAAd,eAEA,SAAS,CAAC,UAAK,CACb,SAAS,CAAC,GAAD,CAAT,CACG,IADH,CACQ,iBAAM,CAAA,SAAS,CAAC,IAAD,CAAf,EADR,EAEG,KAFH,CAES,QAFT,EAGD,CAJQ,CAIN,EAJM,CAAT,CAMA,MAAO,CAAC,MAAD,CAAS,KAAT,CAAP,CACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasync). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport function useFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}