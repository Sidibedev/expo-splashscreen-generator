{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import{useEffect,useState}from'react';export default function useDimensions(){var _useState=useState(function(){return Dimensions.get('window');}),_useState2=_slicedToArray(_useState,2),dims=_useState2[0],setDims=_useState2[1];useEffect(function(){function handleChange(_ref){var window=_ref.window;setDims(window);}Dimensions.addEventListener('change',handleChange);setDims(Dimensions.get('window'));return function(){Dimensions.removeEventListener('change',handleChange);};},[]);return dims;}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/hooks/useDimensions.ts"],"names":["useEffect","useState","useDimensions","Dimensions","get","dims","setDims","handleChange","window","addEventListener","removeEventListener"],"mappings":"kIAQA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,cAAe,SAASC,CAAAA,aAAT,EAAqC,CAClD,cAAwBD,QAAQ,CAAa,iBAAME,CAAAA,UAAU,CAACC,GAAX,CAAe,QAAf,CAAN,EAAb,CAAhC,wCAAOC,IAAP,eAAaC,OAAb,eACAN,SAAS,CAAC,UAAM,CACd,QAASO,CAAAA,YAAT,MAA0D,IAAlCC,CAAAA,MAAkC,MAAlCA,MAAkC,CACxDF,OAAO,CAACE,MAAD,CAAP,CACD,CACDL,UAAU,CAACM,gBAAX,CAA4B,QAA5B,CAAsCF,YAAtC,EAIAD,OAAO,CAACH,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CAAP,CACA,MAAO,WAAM,CACXD,UAAU,CAACO,mBAAX,CAA+B,QAA/B,CAAyCH,YAAzC,EACD,CAFD,CAGD,CAZQ,CAYN,EAZM,CAAT,CAaA,MAAOF,CAAAA,IAAP,CACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Dimensions, ScaledSize } from 'react-native';\nimport { useEffect, useState } from 'react';\n\nexport default function useDimensions(): ScaledSize {\n  const [dims, setDims] = useState<ScaledSize>(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({ window }: { window: ScaledSize }) {\n      setDims(window);\n    }\n    Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    setDims(Dimensions.get('window'));\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}\n"]},"metadata":{},"sourceType":"module"}