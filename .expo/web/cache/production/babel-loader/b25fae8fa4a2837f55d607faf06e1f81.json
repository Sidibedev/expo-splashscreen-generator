{"ast":null,"code":"import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import{isChromeDebugger}from\"./PlatformChecker\";export function getTag(view){return findNodeHandle(view);}export var measure=function(){var _f=function _f(animatedRef){if(!_WORKLET&&!isChromeDebugger()){throw new Error('(measure) method cannot be used on RN side!');}var viewTag=animatedRef();var result=_measure(viewTag);if(result.x===-1234567){throw new Error(\"The view with tag \"+viewTag+\" could not be measured\");}return result;};_f._closure={isChromeDebugger:isChromeDebugger};_f.asString=\"function measure(animatedRef){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){throw new Error('(measure) method cannot be used on RN side!');}const viewTag=animatedRef();const result=_measure(viewTag);if(result.x===-1234567){throw new Error(\\\"The view with tag \\\"+viewTag+\\\" could not be measured\\\");}return result;}}\";_f.__workletHash=7743315869169;_f.__location=\"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (6:7)\";global.__reanimatedWorkletInit(_f);return _f;}();export var scrollTo=function(){var _f=function _f(animatedRef,x,y,animated){if(!_WORKLET&&!isChromeDebugger()){return;}var viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);};_f._closure={isChromeDebugger:isChromeDebugger};_f.asString=\"function scrollTo(animatedRef,x,y,animated){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}}\";_f.__workletHash=13469410603586;_f.__location=\"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (18:7)\";global.__reanimatedWorkletInit(_f);return _f;}();export var setGestureState=function(){var _f=function _f(handlerTag,newState){if(!_WORKLET&&!isChromeDebugger()){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');}_setGestureState(handlerTag,newState);};_f._closure={isChromeDebugger:isChromeDebugger};_f.asString=\"function setGestureState(handlerTag,newState){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');}_setGestureState(handlerTag,newState);}}\";_f.__workletHash=13583934599272;_f.__location=\"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (26:7)\";global.__reanimatedWorkletInit(_f);return _f;}();","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"names":["isChromeDebugger","getTag","view","findNodeHandle","measure","animatedRef","_WORKLET","Error","viewTag","result","_measure","x","scrollTo","y","animated","_scrollTo","setGestureState","handlerTag","newState","console","warn","_setGestureState"],"mappings":"yEACA,OAASA,gBAAT,yBACA,MAAO,SAASC,CAAAA,MAAT,CAAgBC,IAAhB,CAAsB,CACzB,MAAOC,CAAAA,cAAc,CAACD,IAAD,CAArB,CACH,CACD,UAAgBE,CAAAA,OAAhB,+BAAwBC,WAAxB,CAAqC,CAEjC,GAAI,CAACC,QAAD,EAAa,CAACN,gBAAgB,EAAlC,CAAsC,CAClC,KAAM,IAAIO,CAAAA,KAAJ,CAAU,6CAAV,CAAN,CACH,CACD,GAAMC,CAAAA,OAAO,CAAGH,WAAW,EAA3B,CACA,GAAMI,CAAAA,MAAM,CAAGC,QAAQ,CAACF,OAAD,CAAvB,CACA,GAAIC,MAAM,CAACE,CAAP,GAAa,CAAC,OAAlB,CAA2B,CACvB,KAAM,IAAIJ,CAAAA,KAAJ,sBAA+BC,OAA/B,0BAAN,CACH,CACD,MAAOC,CAAAA,MAAP,CACH,CAXD,+BAHoBT,gBAGpB,6kBAYA,UAAgBY,CAAAA,QAAhB,+BAAyBP,WAAzB,CAAsCM,CAAtC,CAAyCE,CAAzC,CAA4CC,QAA5C,CAAsD,CAElD,GAAI,CAACR,QAAD,EAAa,CAACN,gBAAgB,EAAlC,CAAsC,CAClC,OACH,CACD,GAAMQ,CAAAA,OAAO,CAAGH,WAAW,EAA3B,CACAU,SAAS,CAACP,OAAD,CAAUG,CAAV,CAAaE,CAAb,CAAgBC,QAAhB,CAAT,CACH,CAPD,+BAfoBd,gBAepB,obAQA,UAAgBgB,CAAAA,eAAhB,+BAAgCC,UAAhC,CAA4CC,QAA5C,CAAsD,CAElD,GAAI,CAACZ,QAAD,EAAa,CAACN,gBAAgB,EAAlC,CAAsC,CAClCmB,OAAO,CAACC,IAAR,CAAa,uEAAb,EACH,CACDC,gBAAgB,CAACJ,UAAD,CAAaC,QAAb,CAAhB,CACH,CAND,+BAvBoBlB,gBAuBpB","sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nexport function measure(animatedRef) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        throw new Error('(measure) method cannot be used on RN side!');\n    }\n    const viewTag = animatedRef();\n    const result = _measure(viewTag);\n    if (result.x === -1234567) {\n        throw new Error(`The view with tag ${viewTag} could not be measured`);\n    }\n    return result;\n}\nexport function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        return;\n    }\n    const viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    }\n    _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"module"}