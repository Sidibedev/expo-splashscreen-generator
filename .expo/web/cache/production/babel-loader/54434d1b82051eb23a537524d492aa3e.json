{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import invariant from'invariant';import{adapt}from\"../core/AnimatedBlock\";import{val}from\"../val\";import AnimatedNode from\"./AnimatedNode\";var AnimatedCond=function(_AnimatedNode){_inherits(AnimatedCond,_AnimatedNode);var _super=_createSuper(AnimatedCond);function AnimatedCond(condition,ifBlock,elseBlock){var _this;_classCallCheck(this,AnimatedCond);invariant(condition instanceof AnimatedNode,\"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \"+condition);invariant(ifBlock instanceof AnimatedNode,\"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \"+ifBlock);invariant(elseBlock instanceof AnimatedNode||elseBlock===undefined,\"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \"+elseBlock);_this=_super.call(this,{type:'cond',cond:condition,ifBlock:ifBlock,elseBlock:elseBlock},[condition,ifBlock,elseBlock]);_this._condition=condition;_this._ifBlock=ifBlock;_this._elseBlock=elseBlock;return _this;}_createClass(AnimatedCond,[{key:\"toString\",value:function toString(){return\"AnimatedCond, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){if(val(this._condition)){return val(this._ifBlock);}else{return this._elseBlock!==undefined?val(this._elseBlock):undefined;}}}]);return AnimatedCond;}(AnimatedNode);export function createAnimatedCond(cond,ifBlock,elseBlock){return new AnimatedCond(adapt(cond),adapt(ifBlock),elseBlock===undefined?undefined:adapt(elseBlock));}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"],"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","condition","ifBlock","elseBlock","undefined","type","cond","_condition","_ifBlock","_elseBlock","__nodeID","createAnimatedCond"],"mappings":"qgCAAA,MAAOA,CAAAA,SAAP,KAAsB,WAAtB,CACA,OAASC,KAAT,6BACA,OAASC,GAAT,cACA,MAAOC,CAAAA,YAAP,sB,GAEMC,CAAAA,Y,qGAKJ,sBAAYC,SAAZ,CAAuBC,OAAvB,CAAgCC,SAAhC,CAA2C,8CACzCP,SAAS,CACPK,SAAS,WAAYF,CAAAA,YADd,yFAEiFE,SAFjF,CAAT,CAIAL,SAAS,CACPM,OAAO,WAAYH,CAAAA,YADZ,0FAEkFG,OAFlF,CAAT,CAIAN,SAAS,CACPO,SAAS,WAAYJ,CAAAA,YAArB,EAAqCI,SAAS,GAAKC,SAD5C,gHAEwGD,SAFxG,CAAT,CAIA,uBACE,CACEE,IAAI,CAAE,MADR,CAEEC,IAAI,CAAEL,SAFR,CAGEC,OAAO,CAAPA,OAHF,CAIEC,SAAS,CAATA,SAJF,CADF,CAOE,CAACF,SAAD,CAAYC,OAAZ,CAAqBC,SAArB,CAPF,EASA,MAAKI,UAAL,CAAkBN,SAAlB,CACA,MAAKO,QAAL,CAAgBN,OAAhB,CACA,MAAKO,UAAL,CAAkBN,SAAlB,CAxByC,aAyB1C,C,iDAED,mBAAW,CACT,2BAA4B,KAAKO,QAAjC,CACD,C,4BAED,uBAAe,CACb,GAAIZ,GAAG,CAAC,KAAKS,UAAN,CAAP,CAA0B,CACxB,MAAOT,CAAAA,GAAG,CAAC,KAAKU,QAAN,CAAV,CACD,CAFD,IAEO,CACL,MAAO,MAAKC,UAAL,GAAoBL,SAApB,CAAgCN,GAAG,CAAC,KAAKW,UAAN,CAAnC,CAAuDL,SAA9D,CACD,CACF,C,0BA1CwBL,Y,EA6C3B,MAAO,SAASY,CAAAA,kBAAT,CAA4BL,IAA5B,CAAkCJ,OAAlC,CAA2CC,SAA3C,CAAsD,CAC3D,MAAO,IAAIH,CAAAA,YAAJ,CACLH,KAAK,CAACS,IAAD,CADA,CAELT,KAAK,CAACK,OAAD,CAFA,CAGLC,SAAS,GAAKC,SAAd,CAA0BA,SAA1B,CAAsCP,KAAK,CAACM,SAAD,CAHtC,CAAP,CAKD","sourcesContent":["import invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}