{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import React from'react';import{styles}from\"../Style\";import Button from\"./Button\";import*as ImagePicker from'expo-image-picker';import Tooltip from'react-native-walkthrough-tooltip';import{ColorPicker}from\"./ColorPicker\";import Footer from\"./Footer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SplashscreenConfig=function SplashscreenConfig(_ref){var setColor=_ref.setColor,setLogo=_ref.setLogo;console.log('setLogo: ');var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),visibleColorTooltip=_React$useState2[0],setVisibleColorTooltip=_React$useState2[1];var openCloseTooltip=function openCloseTooltip(){return setVisibleColorTooltip(!visibleColorTooltip);};var pickImage=function pickImage(){var result;return _regeneratorRuntime.async(function pickImage$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({mediaTypes:ImagePicker.MediaTypeOptions.All,allowsEditing:true,aspect:[4,3],quality:1}));case 2:result=_context.sent;if(!result.cancelled){setLogo(result.uri);}case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);};return _jsx(View,{style:styles.configContainer,children:_jsxs(View,{style:styles.config,children:[_jsxs(View,{style:styles.header,children:[_jsx(Text,{style:styles.title,children:\"Generate your Expo SplashScreen\"}),_jsx(Text,{style:styles.subtitle,children:\"Upload your awesome logo, select your color and download your splashscreen in PNG format and with good dimensions\"})]}),_jsx(View,{style:styles.uploadContainer,children:_jsxs(View,{style:[styles.row,{justifyContent:'space-between'}],children:[_jsxs(View,{style:styles.row,children:[_jsx(View,{style:styles.dot}),_jsx(Text,{style:styles.subtitle,children:\"Upload your logo\"})]}),_jsx(Button,{title:\"Upload\",onPress:pickImage})]})}),_jsx(View,{style:styles.uploadContainer,children:_jsxs(View,{style:[styles.row,{justifyContent:'space-between'}],children:[_jsxs(View,{style:styles.row,children:[_jsx(View,{style:styles.dot}),_jsx(Text,{style:styles.subtitle,children:\"Select your background color\"})]}),_jsx(Tooltip,{isVisible:visibleColorTooltip,content:_jsx(ColorPicker,{onValueChanged:setColor}),closeOnContentInteraction:false,backgroundColor:\"rgba(0,0,0,0)\",contentStyle:{backgroundColor:'#F2F2F2',marginTop:10},animated:true,arrowSize:{width:16,height:8},placement:\"bottom\",showChildInTooltip:false,onClose:openCloseTooltip,children:_jsx(Button,{title:\"Select color\",onPress:openCloseTooltip})})]})}),_jsx(Footer,{})]})});};export default React.memo(SplashscreenConfig);","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/components/SplashscreenConfig.js"],"names":["React","styles","Button","ImagePicker","Tooltip","ColorPicker","Footer","SplashscreenConfig","setColor","setLogo","console","log","useState","visibleColorTooltip","setVisibleColorTooltip","openCloseTooltip","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uri","configContainer","config","header","title","subtitle","uploadContainer","row","justifyContent","dot","backgroundColor","marginTop","width","height","memo"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View } from 'react-native';\nimport React from 'react';\nimport { styles } from '../Style';\nimport Button from './Button';\nimport * as ImagePicker from 'expo-image-picker';\nimport Tooltip from 'react-native-walkthrough-tooltip';\nimport { ColorPicker } from './ColorPicker';\nimport Footer from './Footer';\n\nconst SplashscreenConfig = ({ setColor, setLogo }) => {\n    console.log('setLogo: ');\n    const [visibleColorTooltip, setVisibleColorTooltip] = React.useState(false);\n    const openCloseTooltip = () => setVisibleColorTooltip(!visibleColorTooltip);\n\n    const pickImage = async () => {\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [4, 3],\n            quality: 1,\n        });\n\n        if (!result.cancelled) {\n            setLogo(result.uri);\n        }\n    };\n    return (\n        <View style={styles.configContainer}>\n            <View style={styles.config}>\n                <View style={styles.header}>\n                    <Text style={styles.title}>Generate your Expo SplashScreen</Text>\n                    <Text style={styles.subtitle}>\n                        Upload your awesome logo, select your color and download your\n                        splashscreen in PNG format and with good dimensions\n                    </Text>\n                </View>\n\n                <View style={styles.uploadContainer}>\n                    <View style={[styles.row, { justifyContent: 'space-between' }]}>\n                        <View style={styles.row}>\n                            <View style={styles.dot}></View>\n                            <Text style={styles.subtitle}>Upload your logo</Text>\n                        </View>\n                        <Button title=\"Upload\" onPress={pickImage} />\n                    </View>\n                </View>\n\n                <View style={styles.uploadContainer}>\n                    <View style={[styles.row, { justifyContent: 'space-between' }]}>\n                        <View style={styles.row}>\n                            <View style={styles.dot}></View>\n                            <Text style={styles.subtitle}>Select your background color</Text>\n                        </View>\n                        <Tooltip\n                            isVisible={visibleColorTooltip}\n                            content={<ColorPicker onValueChanged={setColor} />}\n                            closeOnContentInteraction={false}\n                            backgroundColor=\"rgba(0,0,0,0)\"\n                            contentStyle={{ backgroundColor: '#F2F2F2', marginTop: 10 }}\n                            animated={true}\n                            arrowSize={{ width: 16, height: 8 }}\n                            placement=\"bottom\"\n                            showChildInTooltip={false}\n                            onClose={openCloseTooltip}\n                        >\n                            <Button\n                                title=\"Select color\"\n                                onPress={openCloseTooltip}\n                            />\n                        </Tooltip>\n                    </View>\n                </View>\n\n                <Footer />\n            </View>\n        </View>\n    );\n};\n\nexport default React.memo(SplashscreenConfig)\n"]},"metadata":{},"sourceType":"module"}