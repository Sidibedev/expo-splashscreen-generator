{"ast":null,"code":"'use strict';var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,_aA,_aB,mX1,mX2){var currentX,currentT,i=0,aA=_aA,aB=_aB;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,_aGuessT,mX1,mX2){var aGuessT=_aGuessT;for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}export default function bezier(mX1,mY1,mX2,mY2){if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}var sampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);if(mX1!==mY1||mX2!==mY2){for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}}function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};};","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-web/dist/vendor/react-native/Animated/bezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","_aA","_aB","mX1","mX2","currentX","currentT","i","aA","aB","Math","abs","newtonRaphsonIterate","_aGuessT","aGuessT","currentSlope","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x"],"mappings":"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","sourcesContent":["/**\n * Portions Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/**\n * BezierEasing - use bezier curve for transition easing function\n * https://github.com/gre/bezier-easing\n * @copyright 2014-2015 GaÃ«tan Renaudeau. MIT License.\n */\n'use strict'; // These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n} // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n} // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, _aA, _aB, mX1, mX2) {\n  var currentX,\n      currentT,\n      i = 0,\n      aA = _aA,\n      aB = _aB;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n  var aGuessT = _aGuessT;\n\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nexport default function bezier(mX1, mY1, mX2, mY2) {\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  } // Precompute samples table\n\n\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample; // Interpolate to provide an initial guess for t\n\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    } // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n;"]},"metadata":{},"sourceType":"module"}