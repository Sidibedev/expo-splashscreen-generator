{"ast":null,"code":"'use strict';function setAndForwardRef(_ref){var getForwardedRef=_ref.getForwardedRef,setLocalRef=_ref.setLocalRef;return function forwardRef(ref){var forwardedRef=getForwardedRef();setLocalRef(ref);if(typeof forwardedRef==='function'){forwardedRef(ref);}else if(typeof forwardedRef==='object'&&forwardedRef!=null){forwardedRef.current=ref;}};}export default setAndForwardRef;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-web/dist/vendor/react-native/Utilities/setAndForwardRef.js"],"names":["setAndForwardRef","_ref","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current"],"mappings":"AASA,aAgCA,QAASA,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgC,CAC9B,GAAIC,CAAAA,eAAe,CAAGD,IAAI,CAACC,eAA3B,CACIC,WAAW,CAAGF,IAAI,CAACE,WADvB,CAEA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,GAApB,CAAyB,CAC9B,GAAIC,CAAAA,YAAY,CAAGJ,eAAe,EAAlC,CACAC,WAAW,CAACE,GAAD,CAAX,CAEA,GAAI,MAAOC,CAAAA,YAAP,GAAwB,UAA5B,CAAwC,CAEtCA,YAAY,CAACD,GAAD,CAAZ,CACD,CAHD,IAGO,IAAI,MAAOC,CAAAA,YAAP,GAAwB,QAAxB,EAAoCA,YAAY,EAAI,IAAxD,CAA8D,CAEnEA,YAAY,CAACC,OAAb,CAAuBF,GAAvB,CACD,CACF,CAXD,CAYD,CAED,cAAeL,CAAAA,gBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\n/**\n * This is a helper function for when a component needs to be able to forward a ref\n * to a child component, but still needs to have access to that component as part of\n * its implementation.\n *\n * Its main use case is in wrappers for native components.\n *\n * Usage:\n *\n *   class MyView extends React.Component {\n *     _nativeRef = null;\n *\n *     _setNativeRef = setAndForwardRef({\n *       getForwardedRef: () => this.props.forwardedRef,\n *       setLocalRef: ref => {\n *         this._nativeRef = ref;\n *       },\n *     });\n *\n *     render() {\n *       return <View ref={this._setNativeRef} />;\n *     }\n *   }\n *\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\n *     <MyView {...props} forwardedRef={ref} />\n *   ));\n *\n *   module.exports = MyViewWithRef;\n */\nfunction setAndForwardRef(_ref) {\n  var getForwardedRef = _ref.getForwardedRef,\n      setLocalRef = _ref.setLocalRef;\n  return function forwardRef(ref) {\n    var forwardedRef = getForwardedRef();\n    setLocalRef(ref); // Forward to user ref prop (if one has been specified)\n\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}\n\nexport default setAndForwardRef;"]},"metadata":{},"sourceType":"module"}