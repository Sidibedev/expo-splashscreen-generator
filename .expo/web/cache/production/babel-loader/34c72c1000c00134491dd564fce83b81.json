{"ast":null,"code":"var g;g=function(){return this;}();try{g=g||new Function(\"return this\")();}catch(e){if(typeof window===\"object\")g=window;}module.exports=g;","map":{"version":3,"sources":["/Users/mas/.nvm/versions/node/v14.18.1/lib/node_modules/expo-cli/node_modules/webpack/buildin/global.js"],"names":["g","Function","e","window","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,CAAJ,CAGAA,CAAC,CAAI,UAAW,CACf,MAAO,KAAP,CACA,CAFG,EAAJ,CAIA,GAAI,CAEHA,CAAC,CAAGA,CAAC,EAAI,GAAIC,CAAAA,QAAJ,CAAa,aAAb,GAAT,CACA,CAAC,MAAOC,CAAP,CAAU,CAEX,GAAI,MAAOC,CAAAA,MAAP,GAAkB,QAAtB,CAAgCH,CAAC,CAAGG,MAAJ,CAChC,CAMDC,MAAM,CAACC,OAAP,CAAiBL,CAAjB","sourcesContent":["var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"]},"metadata":{},"sourceType":"script"}