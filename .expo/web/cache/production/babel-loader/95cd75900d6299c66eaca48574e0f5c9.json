{"ast":null,"code":"import React from'react';import{always,block}from\"../base\";export default function useCode(nodeFactory,dependencies){if(!(React.useEffect instanceof Function))return;React.useEffect(function(){if(!(nodeFactory instanceof Function)){console.warn('useCode() first argument should be a function that returns an animation node.');var _node=nodeFactory;nodeFactory=function nodeFactory(){return _node;};}var node=nodeFactory();if(node){if(node instanceof Array)node=block(node);var animatedAlways=always(node);animatedAlways.__attach();return function(){return animatedAlways.__detach();};}},dependencies);}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js"],"names":["React","always","block","useCode","nodeFactory","dependencies","useEffect","Function","console","warn","node","Array","animatedAlways","__attach","__detach"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,KAAjB,eAaA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,WAAjB,CAA8BC,YAA9B,CAA4C,CACzD,GAAI,EAAEL,KAAK,CAACM,SAAN,WAA2BC,CAAAA,QAA7B,CAAJ,CAA4C,OAE5CP,KAAK,CAACM,SAAN,CAAgB,UAAM,CAEpB,GAAI,EAAEF,WAAW,WAAYG,CAAAA,QAAzB,CAAJ,CAAwC,CACtCC,OAAO,CAACC,IAAR,CACE,+EADF,EAIA,GAAMC,CAAAA,KAAI,CAAGN,WAAb,CACAA,WAAW,CAAG,6BAAMM,CAAAA,KAAN,EAAd,CACD,CAED,GAAIA,CAAAA,IAAI,CAAGN,WAAW,EAAtB,CACA,GAAIM,IAAJ,CAAU,CAER,GAAIA,IAAI,WAAYC,CAAAA,KAApB,CAA2BD,IAAI,CAAGR,KAAK,CAACQ,IAAD,CAAZ,CAE3B,GAAME,CAAAA,cAAc,CAAGX,MAAM,CAACS,IAAD,CAA7B,CACAE,cAAc,CAACC,QAAf,GAGA,MAAO,kBAAMD,CAAAA,cAAc,CAACE,QAAf,EAAN,EAAP,CACD,CACF,CAtBD,CAsBGT,YAtBH,EAuBD","sourcesContent":["import React from 'react';\nimport { always, block } from '../base';\n\n/**\n * @callback NodeFactory\n * Function to create a node or an array of nodes.\n * @returns {(Node[] | Node | null | undefined | Boolean)}\n */\n\n/**\n * React hook to run a node.\n * @param {NodeFactory} nodeFactory Function to build the node to run.\n * @param dependencies Array of dependencies. Refresh the node on changes.\n */\nexport default function useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n\n  React.useEffect(() => {\n    // check and correct 1st parameter\n    if (!(nodeFactory instanceof Function)) {\n      console.warn(\n        'useCode() first argument should be a function that returns an animation node.'\n      );\n\n      const node = nodeFactory;\n      nodeFactory = () => node;\n    }\n\n    let node = nodeFactory();\n    if (node) {\n      // allow factory to return array\n      if (node instanceof Array) node = block(node);\n\n      const animatedAlways = always(node);\n      animatedAlways.__attach();\n\n      // return undo function\n      return () => animatedAlways.__detach();\n    }\n  }, dependencies);\n}\n"]},"metadata":{},"sourceType":"module"}