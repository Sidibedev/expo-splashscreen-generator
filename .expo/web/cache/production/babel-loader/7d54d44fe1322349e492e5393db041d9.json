{"ast":null,"code":"import ReactNativePlatform from\"react-native-web/dist/exports/Platform\";import{isDOMAvailable,canUseEventListeners,canUseViewport,isAsyncDebugging}from\"./environment/browser\";var Platform={OS:ReactNativePlatform.OS,select:ReactNativePlatform.select,isDOMAvailable:isDOMAvailable,canUseEventListeners:canUseEventListeners,canUseViewport:canUseViewport,isAsyncDebugging:isAsyncDebugging};export default Platform;","map":{"version":3,"sources":["../src/Platform.ts"],"names":[],"mappings":"wEAEA,OACE,cADF,CAEE,oBAFF,CAGE,cAHF,CAIE,gBAJF,6BAWA,GAAM,CAAA,QAAQ,CAAG,CAKf,EAAE,CAAE,mBAAmB,CAAC,EALT,CAcf,MAAM,CAAE,mBAAmB,CAAC,MAdb,CAmBf,cAAc,CAAd,cAnBe,CAyBf,oBAAoB,CAApB,oBAzBe,CA+Bf,cAAc,CAAd,cA/Be,CAoCf,gBAAgB,CAAhB,gBApCe,CAAjB,CAuCA,cAAe,CAAA,QAAf","sourcesContent":["import { Platform as ReactNativePlatform, PlatformOSType } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}