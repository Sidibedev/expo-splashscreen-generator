{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import invariant from'invariant';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{val}from\"../val\";import{adapt,createAnimatedBlock as block}from\"./AnimatedBlock\";import{createAnimatedCall as call}from\"./AnimatedCall\";import AnimatedNode from\"./AnimatedNode\";var AnimatedDebug=function(_AnimatedNode){_inherits(AnimatedDebug,_AnimatedNode);var _super=_createSuper(AnimatedDebug);function AnimatedDebug(message,value){var _this;_classCallCheck(this,AnimatedDebug);invariant(typeof message==='string',\"Reanimated: Animated.debug node first argument should be of type string but got \"+message);invariant(value instanceof AnimatedNode,\"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \"+value);_this=_super.call(this,{type:'debug',message:message,value:value},[value]);_this._message=message;_this._value=value;return _this;}_createClass(AnimatedDebug,[{key:\"toString\",value:function toString(){return\"AnimatedDebug, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){var value=val(this._value);console.log(this._message,value);return value;}}]);return AnimatedDebug;}(AnimatedNode);export function createAnimatedDebug(message,value){if(__DEV__){var _NativeModules$Native,_NativeModules$Native2,_NativeModules$Native3;var runningInRemoteDebugger=typeof atob!=='undefined';var runningInExpoShell=((_NativeModules$Native=NativeModules.NativeUnimoduleProxy)==null?void 0:(_NativeModules$Native2=_NativeModules$Native.modulesConstants)==null?void 0:(_NativeModules$Native3=_NativeModules$Native2.ExponentConstants)==null?void 0:_NativeModules$Native3.executionEnvironment)==='storeClient';if(runningInRemoteDebugger||runningInExpoShell){return block([call([value],function(_ref){var _ref2=_slicedToArray(_ref,1),a=_ref2[0];return console.log(message+\" \"+a);}),value]);}else{return new AnimatedDebug(message,adapt(value));}}return value;}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"names":["invariant","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","message","value","type","_message","_value","__nodeID","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","NativeModules","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","a"],"mappings":"skCAAA,MAAOA,CAAAA,SAAP,KAAsB,WAAtB,C,uEAEA,OAASC,GAAT,cACA,OAASC,KAAT,CAAgBC,mBAAmB,GAAIC,CAAAA,KAAvC,uBACA,OAASC,kBAAkB,GAAIC,CAAAA,IAA/B,sBACA,MAAOC,CAAAA,YAAP,sB,GAEMC,CAAAA,a,uGAIJ,uBAAYC,OAAZ,CAAqBC,KAArB,CAA4B,+CAC1BV,SAAS,CACP,MAAOS,CAAAA,OAAP,GAAmB,QADZ,oFAE4EA,OAF5E,CAAT,CAIAT,SAAS,CACPU,KAAK,WAAYH,CAAAA,YADV,2FAEmFG,KAFnF,CAAT,CAIA,uBAAM,CAAEC,IAAI,CAAE,OAAR,CAAiBF,OAAO,CAAPA,OAAjB,CAA0BC,KAAK,CAALA,KAA1B,CAAN,CAAyC,CAACA,KAAD,CAAzC,EACA,MAAKE,QAAL,CAAgBH,OAAhB,CACA,MAAKI,MAAL,CAAcH,KAAd,CAX0B,aAY3B,C,kDAED,mBAAW,CACT,4BAA6B,KAAKI,QAAlC,CACD,C,4BAED,uBAAe,CACb,GAAMJ,CAAAA,KAAK,CAAGT,GAAG,CAAC,KAAKY,MAAN,CAAjB,CACAE,OAAO,CAACC,GAAR,CAAY,KAAKJ,QAAjB,CAA2BF,KAA3B,EACA,MAAOA,CAAAA,KAAP,CACD,C,2BA1ByBH,Y,EA6B5B,MAAO,SAASU,CAAAA,mBAAT,CAA6BR,OAA7B,CAAsCC,KAAtC,CAA6C,CAClD,GAAIQ,OAAJ,CAAa,yEAGX,GAAMC,CAAAA,uBAAuB,CAAG,MAAOC,CAAAA,IAAP,GAAgB,WAAhD,CAIA,GAAMC,CAAAA,kBAAkB,CACtB,wBAAAC,aAAa,CAACC,oBAAd,6DAAoCC,gBAApC,8DAAsDC,iBAAtD,sCACIC,oBADJ,IAC6B,aAF/B,CAIA,GAAIP,uBAAuB,EAAIE,kBAA/B,CAAmD,CAGjD,MAAOjB,CAAAA,KAAK,CAAC,CACXE,IAAI,CAAC,CAACI,KAAD,CAAD,CAAU,gDAAEiB,CAAF,gBAASZ,CAAAA,OAAO,CAACC,GAAR,CAAeP,OAAf,KAA0BkB,CAA1B,CAAT,EAAV,CADO,CAEXjB,KAFW,CAAD,CAAZ,CAID,CAPD,IAOO,CACL,MAAO,IAAIF,CAAAA,aAAJ,CAAkBC,OAAlB,CAA2BP,KAAK,CAACQ,KAAD,CAAhC,CAAP,CACD,CACF,CAED,MAAOA,CAAAA,KAAP,CACD","sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}