{"ast":null,"code":"import processColor from\"react-native-web/dist/exports/processColor\";import{round}from\"../base\";import color from\"./color\";import interpolate,{Extrapolate}from\"./interpolate\";function red(c){return c>>16&255;}function green(c){return c>>8&255;}function blue(c){return c&255;}function opacity(c){return(c>>24&255)/255;}export default function interpolateColors(animationValue,options){var inputRange=options.inputRange,outputColorRange=options.outputColorRange;var colors=outputColorRange.map(processColor);var r=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(red),extrapolate:Extrapolate.CLAMP}));var g=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(green),extrapolate:Extrapolate.CLAMP}));var b=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(blue),extrapolate:Extrapolate.CLAMP}));var a=interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(opacity),extrapolate:Extrapolate.CLAMP});return color(r,g,b,a);}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js"],"names":["round","color","interpolate","Extrapolate","red","c","green","blue","opacity","interpolateColors","animationValue","options","inputRange","outputColorRange","colors","map","processColor","r","outputRange","extrapolate","CLAMP","g","b","a"],"mappings":"qEACA,OAASA,KAAT,eACA,MAAOC,CAAAA,KAAP,eACA,MAAOC,CAAAA,WAAP,EAAsBC,WAAtB,qBAEA,QAASC,CAAAA,GAAT,CAAaC,CAAb,CAAgB,CACd,MAAQA,CAAAA,CAAC,EAAI,EAAN,CAAY,GAAnB,CACD,CACD,QAASC,CAAAA,KAAT,CAAeD,CAAf,CAAkB,CAChB,MAAQA,CAAAA,CAAC,EAAI,CAAN,CAAW,GAAlB,CACD,CACD,QAASE,CAAAA,IAAT,CAAcF,CAAd,CAAiB,CACf,MAAOA,CAAAA,CAAC,CAAG,GAAX,CACD,CACD,QAASG,CAAAA,OAAT,CAAiBH,CAAjB,CAAoB,CAClB,MAAO,CAAEA,CAAC,EAAI,EAAN,CAAY,GAAb,EAAoB,GAA3B,CACD,CAaD,cAAe,SAASI,CAAAA,iBAAT,CAA2BC,cAA3B,CAA2CC,OAA3C,CAAoD,CACjE,GAAQC,CAAAA,UAAR,CAAyCD,OAAzC,CAAQC,UAAR,CAAoBC,gBAApB,CAAyCF,OAAzC,CAAoBE,gBAApB,CACA,GAAMC,CAAAA,MAAM,CAAGD,gBAAgB,CAACE,GAAjB,CAAqBC,YAArB,CAAf,CAEA,GAAMC,CAAAA,CAAC,CAAGjB,KAAK,CACbE,WAAW,CAACQ,cAAD,CAAiB,CAC1BE,UAAU,CAAVA,UAD0B,CAE1BM,WAAW,CAAEJ,MAAM,CAACC,GAAP,CAAWX,GAAX,CAFa,CAG1Be,WAAW,CAAEhB,WAAW,CAACiB,KAHC,CAAjB,CADE,CAAf,CAOA,GAAMC,CAAAA,CAAC,CAAGrB,KAAK,CACbE,WAAW,CAACQ,cAAD,CAAiB,CAC1BE,UAAU,CAAVA,UAD0B,CAE1BM,WAAW,CAAEJ,MAAM,CAACC,GAAP,CAAWT,KAAX,CAFa,CAG1Ba,WAAW,CAAEhB,WAAW,CAACiB,KAHC,CAAjB,CADE,CAAf,CAOA,GAAME,CAAAA,CAAC,CAAGtB,KAAK,CACbE,WAAW,CAACQ,cAAD,CAAiB,CAC1BE,UAAU,CAAVA,UAD0B,CAE1BM,WAAW,CAAEJ,MAAM,CAACC,GAAP,CAAWR,IAAX,CAFa,CAG1BY,WAAW,CAAEhB,WAAW,CAACiB,KAHC,CAAjB,CADE,CAAf,CAOA,GAAMG,CAAAA,CAAC,CAAGrB,WAAW,CAACQ,cAAD,CAAiB,CACpCE,UAAU,CAAVA,UADoC,CAEpCM,WAAW,CAAEJ,MAAM,CAACC,GAAP,CAAWP,OAAX,CAFuB,CAGpCW,WAAW,CAAEhB,WAAW,CAACiB,KAHW,CAAjB,CAArB,CAMA,MAAOnB,CAAAA,KAAK,CAACgB,CAAD,CAAII,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAZ,CACD","sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"]},"metadata":{},"sourceType":"module"}