{"ast":null,"code":"import{always,block,call,clockRunning,cond,set,startClock,stopClock}from\"../base\";import Clock from\"../core/AnimatedClock\";import{evaluateOnce}from\"../derived/evaluateOnce\";function createOldAnimationObject(node,animationStateDefaults,value,config){var newClock=new Clock();var currentState=animationStateDefaults();var alwaysNode;var isStarted=false;var isDone=false;var wasStopped=false;var animationCallback;var animation={start:function start(currentAnimationCallback){animationCallback=currentAnimationCallback;if(isStarted){animationCallback&&animationCallback({finished:false});return;}if(isDone){console.warn('Animation has been finished before');return;}if(!value.isNativelyInitialized()){return;}isStarted=true;evaluateOnce(set(currentState.position,value),currentState.position,function(){alwaysNode=always(set(value,block([cond(clockRunning(newClock),0,startClock(newClock)),node(newClock,currentState,config),cond(currentState.finished,[call([],function(){isStarted=false;if(!wasStopped){isDone=true;}value.__detachAnimation(animation);isDone=true;if(!wasStopped){wasStopped=false;}}),stopClock(newClock)]),currentState.position])));value.__attachAnimation(animation);alwaysNode.__addChild(value);});},__detach:function __detach(){animationCallback&&animationCallback({finished:isDone});animationCallback=null;value.__initialized&&alwaysNode.__removeChild(value);},stop:function stop(){if(isDone){console.warn('Calling stop has no effect as the animation has already completed');return;}if(!isStarted){console.warn(\"Calling stop has no effect as the animation hasn't been started\");return;}wasStopped=true;evaluateOnce(set(currentState.finished,1),currentState.finished);},__stopImmediately_testOnly:function __stopImmediately_testOnly(result){animation.stop();isDone=result;value.__detachAnimation(animation);}};return animation;}export default function backwardsCompatibleAnimWrapper(node,animationStateDefaults){return function(clock,state,config){if(config!==undefined){return node(clock,state,config);}return createOldAnimationObject(node,animationStateDefaults,clock,state);};}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/animations/backwardCompatibleAnimWrapper.js"],"names":["always","block","call","clockRunning","cond","set","startClock","stopClock","Clock","evaluateOnce","createOldAnimationObject","node","animationStateDefaults","value","config","newClock","currentState","alwaysNode","isStarted","isDone","wasStopped","animationCallback","animation","start","currentAnimationCallback","finished","console","warn","isNativelyInitialized","position","__detachAnimation","__attachAnimation","__addChild","__detach","__initialized","__removeChild","stop","__stopImmediately_testOnly","result","backwardsCompatibleAnimWrapper","clock","state","undefined"],"mappings":"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","sourcesContent":["import {\n  always,\n  block,\n  call,\n  clockRunning,\n  cond,\n  set,\n  startClock,\n  stopClock,\n} from '../base';\nimport Clock from '../core/AnimatedClock';\nimport { evaluateOnce } from '../derived/evaluateOnce';\n\nfunction createOldAnimationObject(node, animationStateDefaults, value, config) {\n  const newClock = new Clock();\n  const currentState = animationStateDefaults();\n  let alwaysNode;\n  let isStarted = false;\n  let isDone = false;\n  let wasStopped = false;\n  let animationCallback;\n  const animation = {\n    start: (currentAnimationCallback) => {\n      animationCallback = currentAnimationCallback;\n      if (isStarted) {\n        animationCallback && animationCallback({ finished: false });\n        return;\n      }\n      if (isDone) {\n        console.warn('Animation has been finished before');\n        // inconsistent with React Native\n        return;\n      }\n\n      if (!value.isNativelyInitialized()) {\n        return;\n      }\n\n      isStarted = true;\n      evaluateOnce(\n        set(currentState.position, value),\n        currentState.position,\n        () => {\n          alwaysNode = always(\n            set(\n              value,\n              block([\n                cond(clockRunning(newClock), 0, startClock(newClock)),\n                node(newClock, currentState, config),\n                cond(currentState.finished, [\n                  call([], () => {\n                    isStarted = false;\n                    if (!wasStopped) {\n                      isDone = true;\n                    }\n                    value.__detachAnimation(animation);\n                    isDone = true;\n                    if (!wasStopped) {\n                      wasStopped = false;\n                    }\n                  }),\n                  stopClock(newClock),\n                ]),\n                currentState.position,\n              ])\n            )\n          );\n          value.__attachAnimation(animation);\n          alwaysNode.__addChild(value);\n        }\n      );\n    },\n    __detach: () => {\n      animationCallback && animationCallback({ finished: isDone });\n      animationCallback = null;\n      value.__initialized && alwaysNode.__removeChild(value);\n    },\n    stop: () => {\n      if (isDone) {\n        console.warn(\n          'Calling stop has no effect as the animation has already completed'\n        );\n        return;\n      }\n      if (!isStarted) {\n        console.warn(\n          \"Calling stop has no effect as the animation hasn't been started\"\n        );\n        return;\n      }\n      wasStopped = true;\n      evaluateOnce(set(currentState.finished, 1), currentState.finished);\n    },\n    __stopImmediately_testOnly: (result) => {\n      animation.stop();\n      isDone = result;\n      value.__detachAnimation(animation);\n    },\n  };\n  return animation;\n}\n\n/**\n * Depending on the arguments list we either return animation node or return an\n * animation object that is compatible with the original Animated API\n */\nexport default function backwardsCompatibleAnimWrapper(\n  node,\n  animationStateDefaults\n) {\n  return (clock, state, config) => {\n    if (config !== undefined) {\n      return node(clock, state, config);\n    }\n    return createOldAnimationObject(node, animationStateDefaults, clock, state);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}