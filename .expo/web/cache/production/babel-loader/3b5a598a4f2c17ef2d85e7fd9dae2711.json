{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{cond,lessThan,multiply,pow,cos,sqrt,sub,add,divide}from\"./base\";import AnimatedBezier from\"./core/AnimatedBezier\";var Easing=function(){function Easing(){_classCallCheck(this,Easing);}_createClass(Easing,null,[{key:\"linear\",value:function linear(t){return t;}},{key:\"ease\",value:function ease(t){return new AnimatedBezier(t,0.42,0,1,1);}},{key:\"quad\",value:function quad(t){return multiply(t,t);}},{key:\"cubic\",value:function cubic(t){return multiply(t,t,t);}},{key:\"poly\",value:function poly(n){return function(t){return pow(t,n);};}},{key:\"sin\",value:function sin(t){return sub(1,cos(multiply(t,Math.PI,0.5)));}},{key:\"circle\",value:function circle(t){return sub(1,sqrt(sub(1,multiply(t,t))));}},{key:\"exp\",value:function exp(t){return pow(2,multiply(10,sub(t,1)));}},{key:\"elastic\",value:function elastic(){var bounciness=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var p=bounciness*Math.PI;return function(t){return sub(1,multiply(pow(cos(multiply(t,Math.PI,0.5)),3),cos(multiply(t,p))));};}},{key:\"back\",value:function back(s){if(s===undefined){s=1.70158;}return function(t){return multiply(t,t,sub(multiply(add(s,1),t),s));};}},{key:\"bounce\",value:function bounce(t){var sq=function sq(v){return multiply(7.5625,v,v);};return cond(lessThan(t,1/2.75),sq(t),cond(lessThan(t,2/2.75),add(0.75,sq(sub(t,1.5/2.75))),cond(lessThan(t,2.5/2.76),add(0.9375,sq(sub(t,2.25/2.75))),add(0.984375,sq(sub(t,2.625/2.75))))));}},{key:\"bezier\",value:function bezier(x1,y1,x2,y2){return function(t){return new AnimatedBezier(t,x1,y1,x2,y2);};}},{key:\"in\",value:function _in(easing){return easing;}},{key:\"out\",value:function out(easing){return function(t){return sub(1,easing(sub(1,t)));};}},{key:\"inOut\",value:function inOut(easing){return function(t){return cond(lessThan(t,0.5),divide(easing(multiply(t,2)),2),sub(1,divide(easing(multiply(sub(1,t),2)),2)));};}}]);return Easing;}();export{Easing as default};","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/Easing.js"],"names":["cond","lessThan","multiply","pow","cos","sqrt","sub","add","divide","AnimatedBezier","Easing","t","n","Math","PI","bounciness","p","s","undefined","sq","v","x1","y1","x2","y2","easing"],"mappings":"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","sourcesContent":["import {\n  cond,\n  lessThan,\n  multiply,\n  pow,\n  cos,\n  sqrt,\n  sub,\n  add,\n  divide,\n} from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return (t) => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness = 1) {\n    const p = bounciness * Math.PI;\n    return (t) =>\n      sub(\n        1,\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\n      );\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = (v) => multiply(7.5625, v, v);\n    return cond(\n      lessThan(t, 1 / 2.75),\n      sq(t),\n      cond(\n        lessThan(t, 2 / 2.75),\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\n        cond(\n          lessThan(t, 2.5 / 2.76),\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\n        )\n      )\n    );\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return (t) => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return (t) => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return (t) =>\n      cond(\n        lessThan(t, 0.5),\n        divide(easing(multiply(t, 2)), 2),\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}