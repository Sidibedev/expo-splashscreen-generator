{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'invariant';\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\n\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedSet);\n\n  function AnimatedSet(what, value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedSet);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.set first argument should be of type AnimatedNode but got \" + what);\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \" + value);\n    _this = _super.call(this, {\n      type: 'set',\n      what: what,\n      value: value\n    }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n\n  _createClass(AnimatedSet, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedSet, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n\n      this._what.setValue(newValue);\n\n      return newValue;\n    }\n  }]);\n\n  return AnimatedSet;\n}(AnimatedNode);\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js"],"names":["AnimatedNode","invariant","val","adapt","AnimatedSet","what","value","type","_constant","_what","_value","__nodeID","newValue","setValue","createAnimatedSet"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,GAAT;AACA,SAASC,KAAT;;IAEMC,W;;;;;AAIJ,uBAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;;AAAA;;AACvBL,IAAAA,SAAS,CACPI,IAAI,YAAYL,YADT,sFAE2EK,IAF3E,CAAT;AAIAJ,IAAAA,SAAS,CACPK,KAAK,YAAYN,YADV,yGAE8FM,KAF9F,CAAT;AAIA,8BAAM;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeF,MAAAA,IAAI,EAAJA,IAAf;AAAqBC,MAAAA,KAAK,EAALA;AAArB,KAAN,EAAoC,CAACA,KAAD,CAApC;AACAL,IAAAA,SAAS,CAAC,CAACI,IAAI,CAACG,SAAP,EAAkB,oCAAlB,CAAT;AACA,UAAKC,KAAL,GAAaJ,IAAb;AACA,UAAKK,MAAL,GAAcJ,KAAd;AAZuB;AAaxB;;;;WAED,oBAAW;AACT,mCAA2B,KAAKK,QAAhC;AACD;;;WAED,wBAAe;AACb,UAAMC,QAAQ,GAAGV,GAAG,CAAC,KAAKQ,MAAN,CAApB;;AACA,WAAKD,KAAL,CAAWI,QAAX,CAAoBD,QAApB;;AACA,aAAOA,QAAP;AACD;;;;EA3BuBZ,Y;;AA8B1B,OAAO,SAASc,iBAAT,CAA2BT,IAA3B,EAAiCC,KAAjC,EAAwC;AAC7C,SAAO,IAAIF,WAAJ,CAAgBC,IAAhB,EAAsBF,KAAK,CAACG,KAAD,CAA3B,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}