{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createOrReuseTransformNode } from \"./AnimatedTransform\";\nimport deepEqual from 'lodash.isequal';\n\nfunction sanitizeStyle(inputStyle) {\n  var style;\n\n  for (var key in inputStyle) {\n    var value = inputStyle[key];\n\n    if (value instanceof AnimatedNode) {\n      if (style === undefined) {\n        style = {};\n      }\n\n      style[key] = value.__nodeID;\n    }\n  }\n\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n\n  if (style.transform) {\n    var transform = createOrReuseTransformNode(style.transform, oldNode && oldNode._style.transform);\n\n    if (transform) {\n      style = _objectSpread(_objectSpread({}, style), {}, {\n        transform: transform\n      });\n    }\n  }\n\n  var config = sanitizeStyle(style);\n\n  if (config === undefined) {\n    return undefined;\n  }\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedStyle(style, config);\n}\n\nvar AnimatedStyle = function (_AnimatedNode) {\n  _inherits(AnimatedStyle, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedStyle);\n\n  function AnimatedStyle(style, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedStyle);\n\n    _this = _super.call(this, {\n      type: 'style',\n      style: config\n    }, Object.values(style));\n    _this._config = config;\n    _this._style = style;\n    return _this;\n  }\n\n  _createClass(AnimatedStyle, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedStyle, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"_walkStyleAndGetAnimatedValues\",\n    value: function _walkStyleAndGetAnimatedValues(style) {\n      var updatedStyle = {};\n\n      for (var key in style) {\n        var value = style[key];\n\n        if (value instanceof AnimatedNode) {\n          updatedStyle[key] = value.__getValue();\n        } else if (value && !Array.isArray(value) && typeof value === 'object') {\n          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n        }\n      }\n\n      return updatedStyle;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._walkStyleAndGetAnimatedValues(this._style);\n    }\n  }]);\n\n  return AnimatedStyle;\n}(AnimatedNode);\n\nexport { AnimatedStyle as default };","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStyle.js"],"names":["AnimatedNode","createOrReuseTransformNode","deepEqual","sanitizeStyle","inputStyle","style","key","value","undefined","__nodeID","createOrReuseStyleNode","oldNode","StyleSheet","flatten","transform","_style","config","_config","AnimatedStyle","type","Object","values","updatedStyle","__getValue","Array","isArray","_walkStyleAndGetAnimatedValues"],"mappings":";;;;;;;;;;;;;;;;AAEA,OAAOA,YAAP;AACA,SAASC,0BAAT;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,MAAIC,KAAJ;;AACA,OAAK,IAAMC,GAAX,IAAkBF,UAAlB,EAA8B;AAC5B,QAAMG,KAAK,GAAGH,UAAU,CAACE,GAAD,CAAxB;;AACA,QAAIC,KAAK,YAAYP,YAArB,EAAmC;AACjC,UAAIK,KAAK,KAAKG,SAAd,EAAyB;AACvBH,QAAAA,KAAK,GAAG,EAAR;AACD;;AACDA,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaC,KAAK,CAACE,QAAnB;AACD;AACF;;AACD,SAAOJ,KAAP;AACD;;AAED,OAAO,SAASK,sBAAT,CAAgCL,KAAhC,EAAuCM,OAAvC,EAAgD;AACrDN,EAAAA,KAAK,GAAGO,UAAU,CAACC,OAAX,CAAmBR,KAAnB,KAA6B,EAArC;;AACA,MAAIA,KAAK,CAACS,SAAV,EAAqB;AACnB,QAAMA,SAAS,GAAGb,0BAA0B,CAC1CI,KAAK,CAACS,SADoC,EAE1CH,OAAO,IAAIA,OAAO,CAACI,MAAR,CAAeD,SAFgB,CAA5C;;AAIA,QAAIA,SAAJ,EAAe;AACbT,MAAAA,KAAK,mCACAA,KADA;AAEHS,QAAAA,SAAS,EAATA;AAFG,QAAL;AAID;AACF;;AACD,MAAME,MAAM,GAAGb,aAAa,CAACE,KAAD,CAA5B;;AACA,MAAIW,MAAM,KAAKR,SAAf,EAA0B;AACxB,WAAOA,SAAP;AACD;;AACD,MAAIG,OAAO,IAAIT,SAAS,CAACc,MAAD,EAASL,OAAO,CAACM,OAAjB,CAAxB,EAAmD;AACjD,WAAON,OAAP;AACD;;AACD,SAAO,IAAIO,aAAJ,CAAkBb,KAAlB,EAAyBW,MAAzB,CAAP;AACD;;IAMoBE,a;;;;;AACnB,yBAAYb,KAAZ,EAAmBW,MAAnB,EAA2B;AAAA;;AAAA;;AACzB,8BAAM;AAAEG,MAAAA,IAAI,EAAE,OAAR;AAAiBd,MAAAA,KAAK,EAAEW;AAAxB,KAAN,EAAwCI,MAAM,CAACC,MAAP,CAAchB,KAAd,CAAxC;AACA,UAAKY,OAAL,GAAeD,MAAf;AACA,UAAKD,MAAL,GAAcV,KAAd;AAHyB;AAI1B;;;;WAED,oBAAW;AACT,qCAA6B,KAAKI,QAAlC;AACD;;;WAED,wCAA+BJ,KAA/B,EAAsC;AACpC,UAAMiB,YAAY,GAAG,EAArB;;AACA,WAAK,IAAMhB,GAAX,IAAkBD,KAAlB,EAAyB;AACvB,YAAME,KAAK,GAAGF,KAAK,CAACC,GAAD,CAAnB;;AACA,YAAIC,KAAK,YAAYP,YAArB,EAAmC;AACjCsB,UAAAA,YAAY,CAAChB,GAAD,CAAZ,GAAoBC,KAAK,CAACgB,UAAN,EAApB;AACD,SAFD,MAEO,IAAIhB,KAAK,IAAI,CAACiB,KAAK,CAACC,OAAN,CAAclB,KAAd,CAAV,IAAkC,OAAOA,KAAP,KAAiB,QAAvD,EAAiE;AAEtEe,UAAAA,YAAY,CAAChB,GAAD,CAAZ,GAAoB,KAAKoB,8BAAL,CAAoCnB,KAApC,CAApB;AACD;AACF;;AACD,aAAOe,YAAP;AACD;;;WAED,wBAAe;AACb,aAAO,KAAKI,8BAAL,CAAoC,KAAKX,MAAzC,CAAP;AACD;;;;EA3BwCf,Y;;SAAtBkB,a","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'lodash.isequal';\n\nfunction sanitizeStyle(inputStyle) {\n  let style;\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      if (style === undefined) {\n        style = {};\n      }\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    const transform = createOrReuseTransformNode(\n      style.transform,\n      oldNode && oldNode._style.transform\n    );\n    if (transform) {\n      style = {\n        ...style,\n        transform,\n      };\n    }\n  }\n  const config = sanitizeStyle(style);\n  if (config === undefined) {\n    return undefined;\n  }\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  toString() {\n    return `AnimatedStyle, id: ${this.__nodeID}`;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}