{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport invariant from 'invariant';\nimport ReanimatedEventEmitter from \"../../ReanimatedEventEmitter\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nvar AnimatedCall = function (_AnimatedNode) {\n  _inherits(AnimatedCall, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCall);\n\n  function AnimatedCall(args, jsFunction) {\n    var _this;\n\n    _classCallCheck(this, AnimatedCall);\n\n    invariant(args.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    _this = _super.call(this, {\n      type: 'call',\n      input: args\n    }, args);\n    _this._callback = jsFunction;\n    _this._args = args;\n    return _this;\n  }\n\n  _createClass(AnimatedCall, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCall, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      _get(_getPrototypeOf(AnimatedCall.prototype), \"__attach\", this).call(this);\n\n      NODE_MAPPING.set(this.__nodeID, this);\n\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      NODE_MAPPING.delete(this.__nodeID);\n\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n      }\n\n      _get(_getPrototypeOf(AnimatedCall.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      this._callback(this._args.map(val));\n\n      return 0;\n    }\n  }]);\n\n  return AnimatedCall;\n}(AnimatedNode);\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCall.js"],"names":["invariant","ReanimatedEventEmitter","val","AnimatedNode","NODE_MAPPING","Map","listener","data","node","get","id","_callback","args","AnimatedCall","jsFunction","every","el","type","input","_args","__nodeID","set","size","addListener","delete","removeAllListeners","map","createAnimatedCall","func"],"mappings":";;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,sBAAP;AACA,SAASC,GAAT;AACA,OAAOC,YAAP;AAEA,IAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAMC,IAAI,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,IAAI,CAACG,EAAtB,CAAb;AACAF,EAAAA,IAAI,IAAIA,IAAI,CAACG,SAAL,CAAeJ,IAAI,CAACK,IAApB,CAAR;AACD;;IAEKC,Y;;;;;AAIJ,wBAAYD,IAAZ,EAAkBE,UAAlB,EAA8B;AAAA;;AAAA;;AAC5Bd,IAAAA,SAAS,CACPY,IAAI,CAACG,KAAL,CAAW,UAACC,EAAD;AAAA,aAAQA,EAAE,YAAYb,YAAtB;AAAA,KAAX,CADO,yIAAT;AAIA,8BAAM;AAAEc,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAEN;AAAvB,KAAN,EAAqCA,IAArC;AACA,UAAKD,SAAL,GAAiBG,UAAjB;AACA,UAAKK,KAAL,GAAaP,IAAb;AAP4B;AAQ7B;;;;WAED,oBAAW;AACT,oCAA4B,KAAKQ,QAAjC;AACD;;;WAED,oBAAW;AACT;;AACAhB,MAAAA,YAAY,CAACiB,GAAb,CAAiB,KAAKD,QAAtB,EAAgC,IAAhC;;AACA,UAAIhB,YAAY,CAACkB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BrB,QAAAA,sBAAsB,CAACsB,WAAvB,CAAmC,kBAAnC,EAAuDjB,QAAvD;AACD;AACF;;;WAED,oBAAW;AACTF,MAAAA,YAAY,CAACoB,MAAb,CAAoB,KAAKJ,QAAzB;;AACA,UAAIhB,YAAY,CAACkB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BrB,QAAAA,sBAAsB,CAACwB,kBAAvB,CAA0C,kBAA1C;AACD;;AACD;AACD;;;WAED,wBAAe;AACb,WAAKd,SAAL,CAAe,KAAKQ,KAAL,CAAWO,GAAX,CAAexB,GAAf,CAAf;;AACA,aAAO,CAAP;AACD;;;;EArCwBC,Y;;AAwC3B,OAAO,SAASwB,kBAAT,CAA4Bf,IAA5B,EAAkCgB,IAAlC,EAAwC;AAC7C,SAAO,IAAIf,YAAJ,CAAiBD,IAAjB,EAAuBgB,IAAvB,CAAP;AACD","sourcesContent":["import invariant from 'invariant';\nimport ReanimatedEventEmitter from '../../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    invariant(\n      args.every((el) => el instanceof AnimatedNode),\n      `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'call', input: args }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return `AnimatedCall, id: ${this.__nodeID}`;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]},"metadata":{},"sourceType":"module"}