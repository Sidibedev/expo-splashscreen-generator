{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport ReanimatedModule from \"../../ReanimatedModule\";\nimport invariant from 'invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string' ? value : Number(value);\n}\n\nvar CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n\n  [0, -1, 1, -2, 2].forEach(function (v) {\n    return CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true));\n  });\n}\n\nvar InternalAnimatedValue = function (_AnimatedNode) {\n  _inherits(InternalAnimatedValue, _AnimatedNode);\n\n  var _super = _createSuper(InternalAnimatedValue);\n\n  function InternalAnimatedValue(value) {\n    var _this;\n\n    var constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, InternalAnimatedValue);\n\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    _this = _super.call(this, {\n      type: 'value',\n      value: sanitizeValue(value)\n    });\n    _this._startingValue = _this._value = value;\n    _this._animation = null;\n    _this._constant = constant;\n    return _this;\n  }\n\n  _createClass(InternalAnimatedValue, [{\n    key: \"__detach\",\n    value: function __detach() {\n      var _this2 = this;\n\n      if (!this._constant) {\n        if (ReanimatedModule.getValue) {\n          ReanimatedModule.getValue(this.__nodeID, function (val) {\n            return _this2.__nodeConfig.value = val;\n          });\n        } else {\n          this.__nodeConfig.value = this.__getValue();\n        }\n      }\n\n      this.__detachAnimation(this._animation);\n\n      _get(_getPrototypeOf(InternalAnimatedValue.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__detachAnimation\",\n    value: function __detachAnimation(animation) {\n      animation && animation.__detach();\n\n      if (this._animation === animation) {\n        this._animation = null;\n      }\n    }\n  }, {\n    key: \"__attachAnimation\",\n    value: function __attachAnimation(animation) {\n      this.__detachAnimation(this._animation);\n\n      this._animation = animation;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (this.__inputNodes && this.__inputNodes.length) {\n        this.__inputNodes.forEach(val);\n      }\n\n      return this._value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.__detachAnimation(this._animation);\n\n      this._updateValue(value);\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue(value) {\n      this._value = value;\n\n      this.__forceUpdateCache(value);\n    }\n  }], [{\n    key: \"valueForConstant\",\n    value: function valueForConstant(number) {\n      initializeConstantValues();\n      return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);\n    }\n  }]);\n\n  return InternalAnimatedValue;\n}(AnimatedNode);\n\nexport { InternalAnimatedValue as default };","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js"],"names":["AnimatedNode","val","ReanimatedModule","invariant","sanitizeValue","value","undefined","Number","CONSTANT_VALUES","Map","initializeConstantValues","size","forEach","v","set","InternalAnimatedValue","constant","type","_startingValue","_value","_animation","_constant","getValue","__nodeID","__nodeConfig","__getValue","__detachAnimation","animation","__detach","__inputNodes","length","_updateValue","__forceUpdateCache","number","get"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport invariant from 'invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach((v) =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          (val) => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}