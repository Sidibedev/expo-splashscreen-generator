{"ast":null,"code":"export var MediaTypeOptions;\n\n(function (MediaTypeOptions) {\n  MediaTypeOptions[\"All\"] = \"All\";\n  MediaTypeOptions[\"Videos\"] = \"Videos\";\n  MediaTypeOptions[\"Images\"] = \"Images\";\n})(MediaTypeOptions || (MediaTypeOptions = {}));\n\nexport var VideoExportPreset;\n\n(function (VideoExportPreset) {\n  VideoExportPreset[VideoExportPreset[\"Passthrough\"] = 0] = \"Passthrough\";\n  VideoExportPreset[VideoExportPreset[\"LowQuality\"] = 1] = \"LowQuality\";\n  VideoExportPreset[VideoExportPreset[\"MediumQuality\"] = 2] = \"MediumQuality\";\n  VideoExportPreset[VideoExportPreset[\"HighestQuality\"] = 3] = \"HighestQuality\";\n  VideoExportPreset[VideoExportPreset[\"H264_640x480\"] = 4] = \"H264_640x480\";\n  VideoExportPreset[VideoExportPreset[\"H264_960x540\"] = 5] = \"H264_960x540\";\n  VideoExportPreset[VideoExportPreset[\"H264_1280x720\"] = 6] = \"H264_1280x720\";\n  VideoExportPreset[VideoExportPreset[\"H264_1920x1080\"] = 7] = \"H264_1920x1080\";\n  VideoExportPreset[VideoExportPreset[\"H264_3840x2160\"] = 8] = \"H264_3840x2160\";\n  VideoExportPreset[VideoExportPreset[\"HEVC_1920x1080\"] = 9] = \"HEVC_1920x1080\";\n  VideoExportPreset[VideoExportPreset[\"HEVC_3840x2160\"] = 10] = \"HEVC_3840x2160\";\n})(VideoExportPreset || (VideoExportPreset = {}));\n\nexport var UIImagePickerControllerQualityType;\n\n(function (UIImagePickerControllerQualityType) {\n  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"High\"] = 0] = \"High\";\n  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"Medium\"] = 1] = \"Medium\";\n  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"Low\"] = 2] = \"Low\";\n  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"VGA640x480\"] = 3] = \"VGA640x480\";\n  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"IFrame1280x720\"] = 4] = \"IFrame1280x720\";\n  UIImagePickerControllerQualityType[UIImagePickerControllerQualityType[\"IFrame960x540\"] = 5] = \"IFrame960x540\";\n})(UIImagePickerControllerQualityType || (UIImagePickerControllerQualityType = {}));\n\nexport var UIImagePickerPresentationStyle;\n\n(function (UIImagePickerPresentationStyle) {\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"FullScreen\"] = 0] = \"FullScreen\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"PageSheet\"] = 1] = \"PageSheet\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"FormSheet\"] = 2] = \"FormSheet\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"CurrentContext\"] = 3] = \"CurrentContext\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"OverFullScreen\"] = 5] = \"OverFullScreen\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"OverCurrentContext\"] = 6] = \"OverCurrentContext\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"Popover\"] = 7] = \"Popover\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"BlurOverFullScreen\"] = 8] = \"BlurOverFullScreen\";\n  UIImagePickerPresentationStyle[UIImagePickerPresentationStyle[\"Automatic\"] = -2] = \"Automatic\";\n})(UIImagePickerPresentationStyle || (UIImagePickerPresentationStyle = {}));","map":{"version":3,"sources":["../src/ImagePicker.types.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse } from 'expo-modules-core';\n\n// @needsAudit\n/**\n * Alias for `PermissionResponse` type exported by `unimodules-permission-interface`.\n */\nexport type CameraPermissionResponse = PermissionResponse;\n\n// @needsAudit\n/**\n * Extends [PermissionResponse](permissions.md#permissionresponse) type exported by\n * `unimodules-permission-interface` and contains additional iOS-specific field.\n */\nexport type MediaLibraryPermissionResponse = CameraPermissionResponse & {\n  /**\n   * @platform ios\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n// @needsAudit\n/**\n * An alias for the `MediaLibraryPermissionResponse` object.\n * @deprecated Use `ImagePicker.MediaLibraryPermissionResponse`\n */\nexport type CameraRollPermissionResponse = MediaLibraryPermissionResponse;\n\n// @needsAudit\nexport enum MediaTypeOptions {\n  /**\n   * Images and videos.\n   */\n  All = 'All',\n  /**\n   * Only videos.\n   */\n  Videos = 'Videos',\n  /**\n   * Only images.\n   */\n  Images = 'Images',\n}\n\n// @needsAudit\nexport enum VideoExportPreset {\n  /**\n   * Resolution: __Unchanged__ •\n   * Video compression: __None__ •\n   * Audio compression: __None__\n   */\n  Passthrough = 0,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  LowQuality = 1,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  MediumQuality = 2,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  HighestQuality = 3,\n  /**\n   * Resolution: __640 × 480__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_640x480 = 4,\n  /**\n   * Resolution: __960 × 540__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_960x540 = 5,\n  /**\n   * Resolution: __1280 × 720__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_1280x720 = 6,\n  /**\n   * Resolution: __1920 × 1080__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_1920x1080 = 7,\n  /**\n   * Resolution: __3840 × 2160__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_3840x2160 = 8,\n  /**\n   * Resolution: __1920 × 1080__ •\n   * Video compression: __HEVC__ •\n   * Audio compression: __AAC__\n   */\n  HEVC_1920x1080 = 9,\n  /**\n   * Resolution: __3840 × 2160__ •\n   * Video compression: __HEVC__ •\n   * Audio compression: __AAC__\n   */\n  HEVC_3840x2160 = 10,\n}\n\n// @needsAudit\nexport enum UIImagePickerControllerQualityType {\n  /**\n   * Highest available resolution.\n   */\n  High = 0,\n  /**\n   * Depends on the device.\n   */\n  Medium = 1,\n  /**\n   * Depends on the device.\n   */\n  Low = 2,\n  /**\n   * 640 × 480\n   */\n  VGA640x480 = 3,\n  /**\n   * 1280 × 720\n   */\n  IFrame1280x720 = 4,\n  /**\n   * 960 × 540\n   */\n  IFrame960x540 = 5,\n}\n\n// @docsMissing\nexport enum UIImagePickerPresentationStyle {\n  FullScreen = 0,\n  PageSheet = 1,\n  FormSheet = 2,\n  CurrentContext = 3,\n  OverFullScreen = 5,\n  OverCurrentContext = 6,\n  Popover = 7,\n  BlurOverFullScreen = 8,\n  Automatic = -2,\n}\n\n// @needsAudit\nexport type ImageInfo = {\n  /**\n   * URI to the local image or video file (usable as the source of an `Image` element, in the case of\n   * an image) and `width` and `height` specify the dimensions of the media.\n   */\n  uri: string;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * The type of the asset.\n   */\n  type?: 'image' | 'video';\n  /**\n   * The `exif` field is included if the `exif` option is truthy, and is an object containing the\n   * image's EXIF data. The names of this object's properties are EXIF tags and the values are the\n   * respective EXIF values for those tags.\n   */\n  exif?: Record<string, any>;\n  /**\n   * Included if the `base64` option is truthy, and is a Base64-encoded string of the selected\n   * image's JPEG data. If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,\n   * you can use it as the source of an `Image` element; for example:\n   * ```ts\n   * <Image\n   *   source={{ uri: 'data:image/jpeg;base64,' + launchCameraResult.base64 }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  base64?: string;\n  /**\n   * Length of the video in milliseconds.\n   */\n  duration?: number;\n  /**\n   * Boolean flag which shows if request was cancelled. If asset data have been returned this should\n   * always be `false`.\n   */\n  cancelled: boolean;\n};\n\n// @needsAudit\nexport type ImagePickerErrorResult = {\n  /**\n   * The error code.\n   */\n  code: string;\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The exception which caused the error.\n   */\n  exception?: string;\n};\n\n// @needsAudit\n/**\n * An object returned when the pick action has been cancelled by the user.\n */\nexport type ImagePickerCancelledResult = { cancelled: true };\n\n// @needsAudit\nexport type ImagePickerResult = ImagePickerCancelledResult | ImageInfo;\n\n// @needsAudit @docsMissing\nexport type ImagePickerMultipleResult =\n  | ImagePickerCancelledResult\n  | { cancelled: false; selected: ImageInfo[] };\n\n// @needsAudit\nexport type ImagePickerOptions = {\n  /**\n   * Whether to show a UI to edit the image after it is picked. On Android the user can crop and\n   * rotate the image and on iOS simply crop it.\n   * @default false\n   */\n  allowsEditing?: boolean;\n  /**\n   * An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is\n   * allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on\n   * Android, since on iOS the crop rectangle is always a square.\n   */\n  aspect?: [number, number];\n  /**\n   * Specify the quality of compression, from `0` to `1`. `0` means compress for small size,\n   * `1` means compress for maximum quality.\n   * > Note: If the selected image has been compressed before, the size of the output file may be\n   * > bigger than the size of the original image.\n   */\n  quality?: number;\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes?: MediaTypeOptions;\n  /**\n   * Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS\n   * tags in the camera case.\n   */\n  exif?: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Specify preset which will be used to compress selected video.\n   * @default ImagePicker.VideoExportPreset.Passthrough\n   * @platform ios 11+\n   * @deprecated Deprecate: see [iOS videoExportPreset](https://developer.apple.com/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset?language=objc)\n   */\n  videoExportPreset?: VideoExportPreset;\n  /**\n   * Specify the quality of recorded videos. Defaults to `ImagePicker.UIImagePickerControllerQualityType.High`,\n   * which is the highest available for the device.\n   * @platform ios\n   */\n  videoQuality?: UIImagePickerControllerQualityType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection?: boolean;\n  /**\n   * Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit.\n   * Defaults to `0` (no limit).\n   * - **On iOS**, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes.\n   *   This limit is applied automatically, if `0` or no value is specified.\n   * - **On Android**, effect of this option depends on support of installed camera app.\n   * - **On Web** this option has no effect - the limit is browser-dependant.\n   */\n  videoMaxDuration?: number;\n  /**\n   * Choose [presentation style](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle?language=objc)\n   * to customize view during taking photo/video.\n   * @default ImagePicker.UIImagePickerPresentationStyle.Automatic\n   * @platform ios\n   */\n  presentationStyle?: UIImagePickerPresentationStyle;\n};\n\n// @needsAudit\nexport type OpenFileBrowserOptions = {\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes: MediaTypeOptions;\n  // @docsMissing\n  capture?: boolean;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64: boolean;\n};\n\n// @needsAudit @docsMissing\nexport type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =\n  T extends {\n    allowsMultipleSelection: true;\n  }\n    ? ImagePickerMultipleResult\n    : ImagePickerResult;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}