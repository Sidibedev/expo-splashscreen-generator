{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport deepEqual from 'lodash.isequal';\n\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  var hasAnimatedTransform = false;\n  inputTransform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        hasAnimatedTransform = true;\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value: value\n        });\n      }\n    }\n  });\n  return hasAnimatedTransform ? outputTransform : undefined;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n\n  if (config === undefined) {\n    return undefined;\n  }\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedTransform(transform, config);\n}\n\nvar AnimatedTransform = function (_AnimatedNode) {\n  _inherits(AnimatedTransform, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedTransform);\n\n  function AnimatedTransform(transform, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedTransform);\n\n    _this = _super.call(this, {\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform));\n    _this._config = config;\n    _this._transform = transform;\n    return _this;\n  }\n\n  _createClass(AnimatedTransform, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedTransform, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._transform.map(function (transform) {\n        var result = {};\n\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          }\n        }\n\n        return result;\n      });\n    }\n  }]);\n\n  return AnimatedTransform;\n}(AnimatedNode);","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js"],"names":["AnimatedNode","deepEqual","sanitizeTransform","inputTransform","outputTransform","hasAnimatedTransform","forEach","transform","key","value","push","property","nodeID","__nodeID","undefined","extractAnimatedParentNodes","parents","createOrReuseTransformNode","oldNode","config","_config","AnimatedTransform","type","_transform","map","result","__getValue"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAP;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,SAASC,iBAAT,CAA2BC,cAA3B,EAA2C;AACzC,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAIC,oBAAoB,GAAG,KAA3B;AACAF,EAAAA,cAAc,CAACG,OAAf,CAAuB,UAACC,SAAD,EAAe;AACpC,SAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,UAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,UAAIC,KAAK,YAAYT,YAArB,EAAmC;AACjCK,QAAAA,oBAAoB,GAAG,IAAvB;AACAD,QAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,UAAAA,QAAQ,EAAEH,GADS;AAEnBI,UAAAA,MAAM,EAAEH,KAAK,CAACI;AAFK,SAArB;AAID,OAND,MAMO;AACLT,QAAAA,eAAe,CAACM,IAAhB,CAAqB;AACnBC,UAAAA,QAAQ,EAAEH,GADS;AAEnBC,UAAAA,KAAK,EAALA;AAFmB,SAArB;AAID;AACF;AACF,GAhBD;AAiBA,SAAOJ,oBAAoB,GAAGD,eAAH,GAAqBU,SAAhD;AACD;;AAED,SAASC,0BAAT,CAAoCR,SAApC,EAA+C;AAC7C,MAAMS,OAAO,GAAG,EAAhB;AACAT,EAAAA,SAAS,CAACD,OAAV,CAAkB,UAACC,SAAD,EAAe;AAC/B,SAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,UAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,UAAIC,KAAK,YAAYT,YAArB,EAAmC;AACjCgB,QAAAA,OAAO,CAACN,IAAR,CAAaD,KAAb;AACD;AACF;AACF,GAPD;AAQA,SAAOO,OAAP;AACD;;AAED,OAAO,SAASC,0BAAT,CAAoCV,SAApC,EAA+CW,OAA/C,EAAwD;AAC7D,MAAMC,MAAM,GAAGjB,iBAAiB,CAACK,SAAD,CAAhC;;AACA,MAAIY,MAAM,KAAKL,SAAf,EAA0B;AACxB,WAAOA,SAAP;AACD;;AACD,MAAII,OAAO,IAAIjB,SAAS,CAACkB,MAAD,EAASD,OAAO,CAACE,OAAjB,CAAxB,EAAmD;AACjD,WAAOF,OAAP;AACD;;AACD,SAAO,IAAIG,iBAAJ,CAAsBd,SAAtB,EAAiCY,MAAjC,CAAP;AACD;;IAEKE,iB;;;;;AACJ,6BAAYd,SAAZ,EAAuBY,MAAvB,EAA+B;AAAA;;AAAA;;AAC7B,8BACE;AAAEG,MAAAA,IAAI,EAAE,WAAR;AAAqBf,MAAAA,SAAS,EAAEY;AAAhC,KADF,EAEEJ,0BAA0B,CAACR,SAAD,CAF5B;AAIA,UAAKa,OAAL,GAAeD,MAAf;AACA,UAAKI,UAAL,GAAkBhB,SAAlB;AAN6B;AAO9B;;;;WAED,oBAAW;AACT,yCAAiC,KAAKM,QAAtC;AACD;;;WAED,wBAAe;AACb,aAAO,KAAKU,UAAL,CAAgBC,GAAhB,CAAoB,UAACjB,SAAD,EAAe;AACxC,YAAMkB,MAAM,GAAG,EAAf;;AACA,aAAK,IAAMjB,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,cAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,cAAIC,KAAK,YAAYT,YAArB,EAAmC;AACjCyB,YAAAA,MAAM,CAACjB,GAAD,CAAN,GAAcC,KAAK,CAACiB,UAAN,EAAd;AACD;AACF;;AACD,eAAOD,MAAP;AACD,OATM,CAAP;AAUD;;;;EAzB6BzB,Y","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'lodash.isequal';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  let hasAnimatedTransform = false;\n  inputTransform.forEach((transform) => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        hasAnimatedTransform = true;\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return hasAnimatedTransform ? outputTransform : undefined;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach((transform) => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (config === undefined) {\n    return undefined;\n  }\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return `AnimatedTransform, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._transform.map((transform) => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}