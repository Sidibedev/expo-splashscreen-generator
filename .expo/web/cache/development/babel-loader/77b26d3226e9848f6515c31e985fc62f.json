{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport invariant from 'invariant';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { val } from \"../val\";\nimport { adapt, createAnimatedBlock as block } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nvar AnimatedDebug = function (_AnimatedNode) {\n  _inherits(AnimatedDebug, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedDebug);\n\n  function AnimatedDebug(message, value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedDebug);\n\n    invariant(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \" + message);\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \" + value);\n    _this = _super.call(this, {\n      type: 'debug',\n      message: message,\n      value: value\n    }, [value]);\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n\n  _createClass(AnimatedDebug, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedDebug, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = val(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n\n  return AnimatedDebug;\n}(AnimatedNode);\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var _NativeModules$Native, _NativeModules$Native2, _NativeModules$Native3;\n\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = ((_NativeModules$Native = NativeModules.NativeUnimoduleProxy) == null ? void 0 : (_NativeModules$Native2 = _NativeModules$Native.modulesConstants) == null ? void 0 : (_NativeModules$Native3 = _NativeModules$Native2.ExponentConstants) == null ? void 0 : _NativeModules$Native3.executionEnvironment) === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            a = _ref2[0];\n\n        return console.log(message + \" \" + a);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"names":["invariant","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","message","value","type","_message","_value","__nodeID","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","NativeModules","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","a"],"mappings":";;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AAEA,SAASC,GAAT;AACA,SAASC,KAAT,EAAgBC,mBAAmB,IAAIC,KAAvC;AACA,SAASC,kBAAkB,IAAIC,IAA/B;AACA,OAAOC,YAAP;;IAEMC,a;;;;;AAIJ,yBAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAAA;;AAC1BV,IAAAA,SAAS,CACP,OAAOS,OAAP,KAAmB,QADZ,uFAE4EA,OAF5E,CAAT;AAIAT,IAAAA,SAAS,CACPU,KAAK,YAAYH,YADV,8FAEmFG,KAFnF,CAAT;AAIA,8BAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBF,MAAAA,OAAO,EAAPA,OAAjB;AAA0BC,MAAAA,KAAK,EAALA;AAA1B,KAAN,EAAyC,CAACA,KAAD,CAAzC;AACA,UAAKE,QAAL,GAAgBH,OAAhB;AACA,UAAKI,MAAL,GAAcH,KAAd;AAX0B;AAY3B;;;;WAED,oBAAW;AACT,qCAA6B,KAAKI,QAAlC;AACD;;;WAED,wBAAe;AACb,UAAMJ,KAAK,GAAGT,GAAG,CAAC,KAAKY,MAAN,CAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,QAAjB,EAA2BF,KAA3B;AACA,aAAOA,KAAP;AACD;;;;EA1ByBH,Y;;AA6B5B,OAAO,SAASU,mBAAT,CAA6BR,OAA7B,EAAsCC,KAAtC,EAA6C;AAClD,MAAIQ,OAAJ,EAAa;AAAA;;AAGX,QAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WAAhD;AAIA,QAAMC,kBAAkB,GACtB,0BAAAC,aAAa,CAACC,oBAAd,qEAAoCC,gBAApC,sEAAsDC,iBAAtD,4CACIC,oBADJ,MAC6B,aAF/B;;AAIA,QAAIP,uBAAuB,IAAIE,kBAA/B,EAAmD;AAGjD,aAAOjB,KAAK,CAAC,CACXE,IAAI,CAAC,CAACI,KAAD,CAAD,EAAU;AAAA;AAAA,YAAEiB,CAAF;;AAAA,eAASZ,OAAO,CAACC,GAAR,CAAeP,OAAf,SAA0BkB,CAA1B,CAAT;AAAA,OAAV,CADO,EAEXjB,KAFW,CAAD,CAAZ;AAID,KAPD,MAOO;AACL,aAAO,IAAIF,aAAJ,CAAkBC,OAAlB,EAA2BP,KAAK,CAACQ,KAAD,CAAhC,CAAP;AACD;AACF;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}