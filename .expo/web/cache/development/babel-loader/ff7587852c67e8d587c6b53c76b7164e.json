{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, Platform } from 'expo-modules-core';\nimport FontObserver from 'fontfaceobserver';\nimport { FontDisplay } from \"./Font.types\";\n\nfunction getFontFaceStyleSheet() {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n\n  var styleSheet = getStyleElement();\n  return styleSheet.sheet ? styleSheet.sheet : null;\n}\n\nfunction getFontFaceRules() {\n  var sheet = getFontFaceStyleSheet();\n\n  if (sheet) {\n    var rules = _toConsumableArray(sheet.cssRules);\n\n    var items = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({\n          rule: rule,\n          index: i\n        });\n      }\n    }\n\n    return items;\n  }\n\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(fontFamilyName, options) {\n  var rules = getFontFaceRules();\n  return rules.filter(function (_ref) {\n    var rule = _ref.rule;\n    return rule.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule.style.fontDisplay : true);\n  });\n}\n\nexport default {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n\n  unloadAllAsync: function unloadAllAsync() {\n    return function _callee() {\n      var element;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (Platform.isDOMAvailable) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              element = document.getElementById(ID);\n\n              if (element && element instanceof HTMLStyleElement) {\n                document.removeChild(element);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  unloadAsync: function unloadAsync(fontFamilyName, options) {\n    return function _callee2() {\n      var sheet, items, _iterator, _step, item;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              sheet = getFontFaceStyleSheet();\n\n              if (sheet) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n\n              for (_iterator = _createForOfIteratorHelperLoose(items); !(_step = _iterator()).done;) {\n                item = _step.value;\n                sheet.deleteRule(item.index);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  loadAsync: function loadAsync(fontFamilyName, resource) {\n    return function _callee3() {\n      var canInjectStyle, style;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (Platform.isDOMAvailable) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n\n              if (canInjectStyle) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new CodedError('ERR_WEB_ENVIRONMENT', \"The browser's `document.head` element doesn't support injecting fonts.\");\n\n            case 5:\n              style = _createWebStyle(fontFamilyName, resource);\n              document.head.appendChild(style);\n\n              if (isFontLoadingListenerSupported()) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 9:\n              return _context3.abrupt(\"return\", new FontObserver(fontFamilyName, {\n                display: resource.display\n              }).load());\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nvar ID = 'expo-generated-fonts';\n\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \" + fontFamily + \";\\n    src: url(\" + resource.uri + \");\\n    font-display: \" + (resource.display || FontDisplay.AUTO) + \";\\n  }\";\n  var styleElement = getStyleElement();\n\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported() {\n  var userAgent = window.navigator.userAgent;\n  var isIOS = !!userAgent.match(/iPad|iPhone/i);\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isEdge = userAgent.includes('Edge');\n  var isIE = userAgent.includes('Trident');\n  var isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}","map":{"version":3,"sources":["../src/ExpoFontLoader.web.ts"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,UAAT,EAAqB,QAArB,QAAqC,mBAArC;AACA,OAAO,YAAP,MAAyB,kBAAzB;AAGA,SAAS,WAAT;;AAEA,SAAS,qBAAT,GAA8B;AAC5B,MAAI,CAAC,QAAQ,CAAC,cAAd,EAA8B;AAC5B,WAAO,IAAP;AACD;;AACD,MAAM,UAAU,GAAG,eAAe,EAAlC;AACA,SAAO,UAAU,CAAC,KAAX,GAAoB,UAAU,CAAC,KAA/B,GAAyD,IAAhE;AACD;;AAID,SAAS,gBAAT,GAAyB;AACvB,MAAM,KAAK,GAAG,qBAAqB,EAAnC;;AACA,MAAI,KAAJ,EAAW;AAET,QAAM,KAAK,sBAAO,KAAK,CAAC,QAAb,CAAX;;AAEA,QAAM,KAAK,GAAe,EAA1B;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,UAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;;AACA,UAAI,IAAI,YAAY,eAApB,EAAqC;AACnC,QAAA,KAAK,CAAC,IAAN,CAAW;AAAE,UAAA,IAAI,EAAJ,IAAF;AAAQ,UAAA,KAAK,EAAE;AAAf,SAAX;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AACD,SAAO,EAAP;AACD;;AAED,SAAS,gCAAT,CACE,cADF,EAEE,OAFF,EAE6B;AAE3B,MAAM,KAAK,GAAG,gBAAgB,EAA9B;AACA,SAAO,KAAK,CAAC,MAAN,CAAa,gBAAa;AAAA,QAAV,IAAU,QAAV,IAAU;AAC/B,WACE,IAAI,CAAC,KAAL,CAAW,UAAX,KAA0B,cAA1B,KACC,OAAO,IAAI,OAAO,CAAC,OAAnB,GAA6B,OAAO,CAAC,OAAR,KAAqB,IAAI,CAAC,KAAL,CAAmB,WAArE,GAAmF,IADpF,CADF;AAID,GALM,CAAP;AAMD;;AAED,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,gBAAP;AACD,GAHY;;AAKP,EAAA,cALO,4BAKO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACb,QAAQ,CAAC,cADI;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGZ,cAAA,OAHY,GAGF,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAHE;;AAIlB,kBAAI,OAAO,IAAI,OAAO,YAAY,gBAAlC,EAAoD;AAClD,gBAAA,QAAQ,CAAC,WAAT,CAAqB,OAArB;AACD;;AANiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnB,GAZY;AAcP,EAAA,WAdO,uBAcK,cAdL,EAc6B,OAd7B,EAcwD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7D,cAAA,KAD6D,GACrD,qBAAqB,EADgC;;AAAA,kBAE9D,KAF8D;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAG7D,cAAA,KAH6D,GAGrD,gCAAgC,CAAC,cAAD,EAAiB,OAAjB,CAHqB;;AAInE,+DAAmB,KAAnB,iCAA0B;AAAf,gBAAA,IAAe;AACxB,gBAAA,KAAK,CAAC,UAAN,CAAiB,IAAI,CAAC,KAAtB;AACD;;AANkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpE,GArBY;AAuBP,EAAA,SAvBO,qBAuBG,cAvBH,EAuB2B,QAvB3B,EAuBiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACvD,QAAQ,CAAC,cAD8C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKtD,cAAA,cALsD,GAKrC,QAAQ,CAAC,IAAT,IAAiB,OAAO,QAAQ,CAAC,IAAT,CAAc,WAArB,KAAqC,UALjB;;AAAA,kBAMvD,cANuD;AAAA;AAAA;AAAA;;AAAA,oBAOpD,IAAI,UAAJ,CACJ,qBADI,2EAPoD;;AAAA;AAatD,cAAA,KAbsD,GAa9C,eAAe,CAAC,cAAD,EAAiB,QAAjB,CAb+B;AAc5D,cAAA,QAAQ,CAAC,IAAT,CAAe,WAAf,CAA2B,KAA3B;;AAd4D,kBAgBvD,8BAA8B,EAhByB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gDAoBrD,IAAI,YAAJ,CAAiB,cAAjB,EAAiC;AAAE,gBAAA,OAAO,EAAE,QAAQ,CAAC;AAApB,eAAjC,EAAgE,IAAhE,EApBqD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB7D;AA5CY,CAAf;AA+CA,IAAM,EAAE,GAAG,sBAAX;;AAEA,SAAS,eAAT,GAAwB;AACtB,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAhB;;AACA,MAAI,OAAO,IAAI,OAAO,YAAY,gBAAlC,EAAoD;AAClD,WAAO,OAAP;AACD;;AACD,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAArB;AACA,EAAA,YAAY,CAAC,EAAb,GAAkB,EAAlB;AACA,EAAA,YAAY,CAAC,IAAb,GAAoB,UAApB;AACA,SAAO,YAAP;AACD;;AAED,SAAS,eAAT,CAAyB,UAAzB,EAA6C,QAA7C,EAAmE;AACjE,MAAM,SAAS,uCACE,UADF,wBAEF,QAAQ,CAAC,GAFP,+BAGG,QAAQ,CAAC,OAAT,IAAoB,WAAW,CAAC,IAHnC,YAAf;AAMA,MAAM,YAAY,GAAG,eAAe,EAApC;;AAGA,MAAI,YAAY,CAAC,UAAjB,EAA6B;AAC3B,QAAM,cAAc,GAAG,YAAvB;AACA,IAAA,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAAoC,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAChC,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAAoC,SADJ,GAEhC,SAFJ;AAGD,GALD,MAKO;AACL,QAAM,QAAQ,GAAG,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAjB;AACA,IAAA,YAAY,CAAC,WAAb,CAAyB,QAAzB;AACD;;AACD,SAAO,YAAP;AACD;;AAED,SAAS,8BAAT,GAAuC;AACrC,MAAQ,SAAR,GAAsB,MAAM,CAAC,SAA7B,CAAQ,SAAR;AAEA,MAAM,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAAhB;AACA,MAAM,QAAQ,GAAG,iCAAiC,IAAjC,CAAsC,SAAS,CAAC,SAAhD,CAAjB;AAEA,MAAM,MAAM,GAAG,SAAS,CAAC,QAAV,CAAmB,MAAnB,CAAf;AAEA,MAAM,IAAI,GAAG,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAAb;AAEA,MAAM,SAAS,GAAG,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAAlB;AACA,SAAO,CAAC,QAAD,IAAa,CAAC,KAAd,IAAuB,CAAC,MAAxB,IAAkC,CAAC,IAAnC,IAA2C,CAAC,SAAnD;AACD","sourcesContent":["import { CodedError, Platform } from 'expo-modules-core';\nimport FontObserver from 'fontfaceobserver';\n\nimport { UnloadFontOptions } from './Font';\nimport { FontDisplay, FontResource } from './Font.types';\n\nfunction getFontFaceStyleSheet(): CSSStyleSheet | null {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n  const styleSheet = getStyleElement();\n  return styleSheet.sheet ? (styleSheet.sheet as CSSStyleSheet) : null;\n}\n\ntype RuleItem = { rule: CSSFontFaceRule; index: number };\n\nfunction getFontFaceRules(): RuleItem[] {\n  const sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    // @ts-ignore: rule iterator\n    const rules = [...sheet.cssRules];\n\n    const items: RuleItem[] = [];\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({ rule, index: i });\n      }\n    }\n    return items;\n  }\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(\n  fontFamilyName: string,\n  options?: UnloadFontOptions\n): RuleItem[] {\n  const rules = getFontFaceRules();\n  return rules.filter(({ rule }) => {\n    return (\n      rule.style.fontFamily === fontFamilyName &&\n      (options && options.display ? options.display === (rule.style as any).fontDisplay : true)\n    );\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async unloadAllAsync(): Promise<void> {\n    if (!Platform.isDOMAvailable) return;\n\n    const element = document.getElementById(ID);\n    if (element && element instanceof HTMLStyleElement) {\n      document.removeChild(element);\n    }\n  },\n\n  async unloadAsync(fontFamilyName: string, options?: UnloadFontOptions): Promise<void> {\n    const sheet = getFontFaceStyleSheet();\n    if (!sheet) return;\n    const items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n    for (const item of items) {\n      sheet.deleteRule(item.index);\n    }\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError(\n        'ERR_WEB_ENVIRONMENT',\n        `The browser's \\`document.head\\` element doesn't support injecting fonts.`\n      );\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n\n    if (!isFontLoadingListenerSupported()) {\n      return;\n    }\n\n    return new FontObserver(fontFamilyName, { display: resource.display }).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n    font-display: ${resource.display || FontDisplay.AUTO};\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported(): boolean {\n  const { userAgent } = window.navigator;\n  // WebKit is broken https://github.com/bramstein/fontfaceobserver/issues/95\n  const isIOS = !!userAgent.match(/iPad|iPhone/i);\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  // Edge is broken https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n  const isEdge = userAgent.includes('Edge');\n  // Internet Explorer\n  const isIE = userAgent.includes('Trident');\n  // Firefox\n  const isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}