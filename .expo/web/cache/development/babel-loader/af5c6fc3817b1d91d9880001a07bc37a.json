{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\nimport { COLORS } from \"../constants/colors\";\nimport useDimensions from \"../hooks/useDimensions\";\nimport { generateImagesAsync } from \"../utils/processImage\";\nimport SplashscreenConfig from \"./SplashscreenConfig\";\nimport SplashscreenPreview from \"./SplashscreenPreview\";\nimport { styles } from \"../Style\";\nimport Empty from \"./Empty\";\nimport * as Analytics from 'expo-firebase-analytics';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SplashscreenContainer = function SplashscreenContainer() {\n  var _React$useState = React.useState(COLORS.secondary),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      color = _React$useState2[0],\n      setColor = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      logo = _React$useState4[0],\n      setLogo = _React$useState4[1];\n\n  var _useDimensions = useDimensions(),\n      width = _useDimensions.width;\n\n  var isMobile = React.useMemo(function () {\n    return width < 1000;\n  }, [width]);\n\n  var downloadSplash = function downloadSplash() {\n    return _regeneratorRuntime.async(function downloadSplash$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(generateImagesAsync({\n              image: logo,\n              color: color\n            }));\n\n          case 2:\n            Analytics.logEvent('DOWNLOAD_SPLASHSCREEN', {\n              screen: 'home',\n              purpose: 'Download splashscreen'\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: isMobile ? _jsx(Empty, {}) : _jsxs(View, {\n      style: styles.content,\n      children: [_jsx(SplashscreenConfig, {\n        setColor: setColor,\n        setLogo: setLogo\n      }), _jsx(SplashscreenPreview, {\n        logo: logo,\n        onDownload: downloadSplash,\n        backgroundColor: color\n      })]\n    })\n  });\n};\n\nexport default SplashscreenContainer;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/components/SplashscreenContainer.js"],"names":["React","COLORS","useDimensions","generateImagesAsync","SplashscreenConfig","SplashscreenPreview","styles","Empty","Analytics","SplashscreenContainer","useState","secondary","color","setColor","logo","setLogo","width","isMobile","useMemo","downloadSplash","image","logEvent","screen","purpose","container","content"],"mappings":";;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT;AACA,OAAOC,aAAP;AACA,SAASC,mBAAT;AACA,OAAOC,kBAAP;AACA,OAAOC,mBAAP;AACA,SAASC,MAAT;AACA,OAAOC,KAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,yBAA3B;;;;AAGA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAChC,wBAA0BT,KAAK,CAACU,QAAN,CAAeT,MAAM,CAACU,SAAtB,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,yBAAwBb,KAAK,CAACU,QAAN,CAAe,IAAf,CAAxB;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AACA,uBAAkBb,aAAa,EAA/B;AAAA,MAAQc,KAAR,kBAAQA,KAAR;;AAEA,MAAMC,QAAQ,GAAGjB,KAAK,CAACkB,OAAN,CAAc;AAAA,WAAMF,KAAK,GAAG,IAAd;AAAA,GAAd,EAAkC,CAACA,KAAD,CAAlC,CAAjB;;AAEA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEbhB,mBAAmB,CAAC;AAAEiB,cAAAA,KAAK,EAAEN,IAAT;AAAeF,cAAAA,KAAK,EAALA;AAAf,aAAD,CAFN;;AAAA;AAInBJ,YAAAA,SAAS,CAACa,QAAV,CAAmB,uBAAnB,EAA4C;AACxCC,cAAAA,MAAM,EAAE,MADgC;AAExCC,cAAAA,OAAO,EAAE;AAF+B,aAA5C;;AAJmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAUA,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,MAAM,CAACkB,SAApB;AAAA,cACKP,QAAQ,GAAG,KAAC,KAAD,KAAH,GACL,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEX,MAAM,CAACmB,OAApB;AAAA,iBACI,KAAC,kBAAD;AAAoB,QAAA,QAAQ,EAAEZ,QAA9B;AAAwC,QAAA,OAAO,EAAEE;AAAjD,QADJ,EAEI,KAAC,mBAAD;AACI,QAAA,IAAI,EAAED,IADV;AAEI,QAAA,UAAU,EAAEK,cAFhB;AAGI,QAAA,eAAe,EAAEP;AAHrB,QAFJ;AAAA;AAFR,IADJ;AAaH,CA9BD;;AAgCA,eAAeH,qBAAf","sourcesContent":["import { StyleSheet, Text, View } from 'react-native'\nimport React from 'react'\nimport { COLORS } from '../constants/colors';\nimport useDimensions from '../hooks/useDimensions';\nimport { generateImagesAsync } from '../utils/processImage';\nimport SplashscreenConfig from './SplashscreenConfig';\nimport SplashscreenPreview from './SplashscreenPreview';\nimport { styles } from '../Style';\nimport Empty from './Empty';\nimport * as Analytics from 'expo-firebase-analytics';\n\n\nconst SplashscreenContainer = () => {\n    const [color, setColor] = React.useState(COLORS.secondary);\n    const [logo, setLogo] = React.useState(null);\n    const { width } = useDimensions();\n\n    const isMobile = React.useMemo(() => width < 1000, [width])\n\n    const downloadSplash = async () => {\n\n        await generateImagesAsync({ image: logo, color });\n\n        Analytics.logEvent('DOWNLOAD_SPLASHSCREEN', {\n            screen: 'home',\n            purpose: 'Download splashscreen',\n        });\n    };\n\n    return (\n        <View style={styles.container}>\n            {isMobile ? <Empty /> :\n                <View style={styles.content}>\n                    <SplashscreenConfig setColor={setColor} setLogo={setLogo} />\n                    <SplashscreenPreview\n                        logo={logo}\n                        onDownload={downloadSplash}\n                        backgroundColor={color}\n                    />\n                </View>}\n        </View>\n    );\n}\n\nexport default SplashscreenContainer\n\n"]},"metadata":{},"sourceType":"module"}