{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { runOnUI } from \"../core\";\nimport { withStyleAnimation } from \"../animation/styleAnimation\";\nimport { ColorProperties } from \"../UpdateProps\";\nimport { processColor } from \"../Colors\";\nrunOnUI(function () {\n  var _f = function _f() {\n    var configs = {};\n    var enteringAnimationForTag = {};\n    global.LayoutAnimationRepository = {\n      configs: configs,\n      registerConfig: function registerConfig(tag, config) {\n        configs[tag] = config;\n        enteringAnimationForTag[tag] = null;\n      },\n      removeConfig: function removeConfig(tag) {\n        delete configs[tag];\n        delete enteringAnimationForTag[tag];\n      },\n      startAnimationForTag: function startAnimationForTag(tag, type, yogaValues) {\n        if (configs[tag] == null) {\n          return;\n        }\n\n        var style = configs[tag][type](yogaValues);\n        var currentAnimation = style.animations;\n\n        if (type === 'entering') {\n          enteringAnimationForTag[tag] = style;\n        } else if (type === 'layout' && enteringAnimationForTag[tag] !== null) {\n          var entryAniamtion = enteringAnimationForTag[tag].animations;\n          var layoutAnimation = style.animations;\n          currentAnimation = {};\n\n          for (var key in entryAniamtion) {\n            currentAnimation[key] = entryAniamtion[key];\n          }\n\n          for (var _key in layoutAnimation) {\n            currentAnimation[_key] = layoutAnimation[_key];\n          }\n        }\n\n        var sv = configs[tag].sv;\n\n        _stopObservingProgress(tag, false);\n\n        _startObservingProgress(tag, sv);\n\n        var backupColor = {};\n\n        for (var _key2 in style.initialValues) {\n          if (ColorProperties.includes(_key2)) {\n            var value = style.initialValues[_key2];\n            backupColor[_key2] = value;\n            style.initialValues[_key2] = processColor(value);\n          }\n        }\n\n        sv.value = _extends({}, sv._value, style.initialValues);\n\n        _stopObservingProgress(tag, false);\n\n        var animation = withStyleAnimation(currentAnimation);\n\n        animation.callback = function (finished) {\n          if (finished) {\n            _stopObservingProgress(tag, finished);\n          }\n\n          style.callback && style.callback(finished);\n        };\n\n        if (backupColor) {\n          configs[tag].sv._value = _extends(_extends({}, configs[tag].sv.value), backupColor);\n        }\n\n        configs[tag].sv.value = animation;\n\n        _startObservingProgress(tag, sv);\n      }\n    };\n  };\n\n  _f._closure = {\n    ColorProperties: ColorProperties,\n    processColor: processColor,\n    withStyleAnimation: withStyleAnimation\n  };\n  _f.asString = \"function _f(){const{ColorProperties,processColor,withStyleAnimation}=jsThis._closure;{const configs={};const enteringAnimationForTag={};global.LayoutAnimationRepository={configs:configs,registerConfig:function(tag,config){configs[tag]=config;enteringAnimationForTag[tag]=null;},removeConfig:function(tag){delete configs[tag];delete enteringAnimationForTag[tag];},startAnimationForTag:function(tag,type,yogaValues){if(configs[tag]==null){return;}const style=configs[tag][type](yogaValues);let currentAnimation=style.animations;if(type==='entering'){enteringAnimationForTag[tag]=style;}else if(type==='layout'&&enteringAnimationForTag[tag]!==null){const entryAniamtion=enteringAnimationForTag[tag].animations;const layoutAnimation=style.animations;currentAnimation={};for(const key in entryAniamtion){currentAnimation[key]=entryAniamtion[key];}for(const key in layoutAnimation){currentAnimation[key]=layoutAnimation[key];}}const sv=configs[tag].sv;_stopObservingProgress(tag,false);_startObservingProgress(tag,sv);const backupColor={};for(const key in style.initialValues){if(ColorProperties.includes(key)){const value=style.initialValues[key];backupColor[key]=value;style.initialValues[key]=processColor(value);}}sv.value=Object.assign({},sv._value,style.initialValues);_stopObservingProgress(tag,false);const animation=withStyleAnimation(currentAnimation);animation.callback=function(finished){if(finished){_stopObservingProgress(tag,finished);}style.callback&&style.callback(finished);};if(backupColor){configs[tag].sv._value=Object.assign(Object.assign({},configs[tag].sv.value),backupColor);}configs[tag].sv.value=animation;_startObservingProgress(tag,sv);}};}}\";\n  _f.__workletHash = 15633326713685;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/LayoutAnimationRepository.js (6:8)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}())();","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/LayoutAnimationRepository.js"],"names":["runOnUI","withStyleAnimation","ColorProperties","processColor","configs","enteringAnimationForTag","global","LayoutAnimationRepository","registerConfig","tag","config","removeConfig","startAnimationForTag","type","yogaValues","style","currentAnimation","animations","entryAniamtion","layoutAnimation","key","sv","_stopObservingProgress","_startObservingProgress","backupColor","initialValues","includes","value","_value","animation","callback","finished"],"mappings":"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","sourcesContent":["/* global _stopObservingProgress, _startObservingProgress */\nimport { runOnUI } from '../core';\nimport { withStyleAnimation } from '../animation/styleAnimation';\nimport { ColorProperties } from '../UpdateProps';\nimport { processColor } from '../Colors';\nrunOnUI(() => {\n    'worklet';\n    const configs = {};\n    const enteringAnimationForTag = {};\n    global.LayoutAnimationRepository = {\n        configs,\n        registerConfig(tag, config) {\n            configs[tag] = config;\n            enteringAnimationForTag[tag] = null;\n        },\n        removeConfig(tag) {\n            delete configs[tag];\n            delete enteringAnimationForTag[tag];\n        },\n        startAnimationForTag(tag, type, yogaValues) {\n            if (configs[tag] == null) {\n                return; // :(\n            }\n            const style = configs[tag][type](yogaValues);\n            let currentAnimation = style.animations;\n            if (type === 'entering') {\n                enteringAnimationForTag[tag] = style;\n            }\n            else if (type === 'layout' && enteringAnimationForTag[tag] !== null) {\n                const entryAniamtion = enteringAnimationForTag[tag].animations;\n                const layoutAnimation = style.animations;\n                currentAnimation = {};\n                for (const key in entryAniamtion) {\n                    currentAnimation[key] = entryAniamtion[key];\n                }\n                for (const key in layoutAnimation) {\n                    currentAnimation[key] = layoutAnimation[key];\n                }\n            }\n            const sv = configs[tag].sv;\n            _stopObservingProgress(tag, false);\n            _startObservingProgress(tag, sv);\n            const backupColor = {};\n            for (const key in style.initialValues) {\n                if (ColorProperties.includes(key)) {\n                    const value = style.initialValues[key];\n                    backupColor[key] = value;\n                    style.initialValues[key] = processColor(value);\n                }\n            }\n            sv.value = Object.assign({}, sv._value, style.initialValues);\n            _stopObservingProgress(tag, false);\n            const animation = withStyleAnimation(currentAnimation);\n            animation.callback = (finished) => {\n                if (finished) {\n                    _stopObservingProgress(tag, finished);\n                }\n                style.callback && style.callback(finished);\n            };\n            if (backupColor) {\n                configs[tag].sv._value = Object.assign(Object.assign({}, configs[tag].sv.value), backupColor);\n            }\n            configs[tag].sv.value = animation;\n            _startObservingProgress(tag, sv);\n        },\n    };\n})();\n"]},"metadata":{},"sourceType":"module"}