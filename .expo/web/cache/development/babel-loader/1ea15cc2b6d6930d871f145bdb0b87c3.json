{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useEffect, useState } from 'react';\nexport default function useDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dims = _useState2[0],\n      setDims = _useState2[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange);\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/hooks/useDimensions.ts"],"names":["useEffect","useState","useDimensions","Dimensions","get","dims","setDims","handleChange","window","addEventListener","removeEventListener"],"mappings":";;AAQA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,aAAT,GAAqC;AAClD,kBAAwBD,QAAQ,CAAa;AAAA,WAAME,UAAU,CAACC,GAAX,CAAe,QAAf,CAAN;AAAA,GAAb,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACd,aAASO,YAAT,OAA0D;AAAA,UAAlCC,MAAkC,QAAlCA,MAAkC;AACxDF,MAAAA,OAAO,CAACE,MAAD,CAAP;AACD;;AACDL,IAAAA,UAAU,CAACM,gBAAX,CAA4B,QAA5B,EAAsCF,YAAtC;AAIAD,IAAAA,OAAO,CAACH,UAAU,CAACC,GAAX,CAAe,QAAf,CAAD,CAAP;AACA,WAAO,YAAM;AACXD,MAAAA,UAAU,CAACO,mBAAX,CAA+B,QAA/B,EAAyCH,YAAzC;AACD,KAFD;AAGD,GAZQ,EAYN,EAZM,CAAT;AAaA,SAAOF,IAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Dimensions, ScaledSize } from 'react-native';\nimport { useEffect, useState } from 'react';\n\nexport default function useDimensions(): ScaledSize {\n  const [dims, setDims] = useState<ScaledSize>(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({ window }: { window: ScaledSize }) {\n      setDims(window);\n    }\n    Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    setDims(Dimensions.get('window'));\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}\n"]},"metadata":{},"sourceType":"module"}