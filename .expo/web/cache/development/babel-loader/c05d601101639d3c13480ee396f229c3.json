{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport interpolateNode from \"../reanimated1/derived/interpolate\";\nexport var Extrapolation;\n\n(function (Extrapolation) {\n  Extrapolation[\"IDENTITY\"] = \"identity\";\n  Extrapolation[\"CLAMP\"] = \"clamp\";\n  Extrapolation[\"EXTEND\"] = \"extend\";\n})(Extrapolation || (Extrapolation = {}));\n\nvar isNode = function () {\n  var _f = function _f(x) {\n    return x.__nodeId !== undefined;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function isNode(x){return x.__nodeId!==undefined;}\";\n  _f.__workletHash = 11428170322833;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js (9:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar getVal = function () {\n  var _f = function _f(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n    switch (type) {\n      case Extrapolation.IDENTITY:\n        return x;\n\n      case Extrapolation.CLAMP:\n        if (coef * val < coef * leftEdgeOutput) {\n          return leftEdgeOutput;\n        }\n\n        return rightEdgeOutput;\n\n      case Extrapolation.EXTEND:\n      default:\n        return val;\n    }\n  };\n\n  _f._closure = {\n    Extrapolation: {\n      IDENTITY: Extrapolation.IDENTITY,\n      CLAMP: Extrapolation.CLAMP,\n      EXTEND: Extrapolation.EXTEND\n    }\n  };\n  _f.asString = \"function getVal(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){const{Extrapolation}=jsThis._closure;{switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}}}\";\n  _f.__workletHash = 17254780971327;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js (13:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar isExtrapolate = function () {\n  var _f = function _f(value) {\n    return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;\n  };\n\n  _f._closure = {\n    Extrapolation: {\n      EXTEND: Extrapolation.EXTEND,\n      CLAMP: Extrapolation.CLAMP,\n      IDENTITY: Extrapolation.IDENTITY\n    }\n  };\n  _f.asString = \"function isExtrapolate(value){const{Extrapolation}=jsThis._closure;{return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;}}\";\n  _f.__workletHash = 10218308201564;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js (28:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar validateType = function () {\n  var _f = function _f(type) {\n    var extrapolationConfig = {\n      extrapolateLeft: Extrapolation.EXTEND,\n      extrapolateRight: Extrapolation.EXTEND\n    };\n\n    if (!type) {\n      return extrapolationConfig;\n    }\n\n    if (typeof type === 'string') {\n      if (!isExtrapolate(type)) {\n        throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\\n        interpolate(value, [inputRange], [outputRange], \\\"clamp\\\")\");\n      }\n\n      extrapolationConfig.extrapolateLeft = type;\n      extrapolationConfig.extrapolateRight = type;\n      return extrapolationConfig;\n    }\n\n    if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\\n      interpolate(value, [inputRange], [outputRange], {\\n        extrapolateLeft: Extrapolation.CLAMP,\\n        extrapolateRight: Extrapolation.IDENTITY\\n      }})\");\n    }\n\n    _extends(extrapolationConfig, type);\n\n    return extrapolationConfig;\n  };\n\n  _f._closure = {\n    Extrapolation: {\n      EXTEND: Extrapolation.EXTEND\n    },\n    isExtrapolate: isExtrapolate\n  };\n  _f.asString = \"function validateType(type){const{Extrapolation,isExtrapolate}=jsThis._closure;{const extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n        interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n      interpolate(value, [inputRange], [outputRange], {\\\\n        extrapolateLeft: Extrapolation.CLAMP,\\\\n        extrapolateRight: Extrapolation.IDENTITY\\\\n      }})\\\");}Object.assign(extrapolationConfig,type);return extrapolationConfig;}}\";\n  _f.__workletHash = 7740971206170;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js (36:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar internalInterpolate = function () {\n  var _f = function _f(x, narrowedInput, extrapolationConfig) {\n    var leftEdgeInput = narrowedInput.leftEdgeInput,\n        rightEdgeInput = narrowedInput.rightEdgeInput,\n        leftEdgeOutput = narrowedInput.leftEdgeOutput,\n        rightEdgeOutput = narrowedInput.rightEdgeOutput;\n    if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n    var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n    var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n    var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n    if (coef * val < coef * leftEdgeOutput) {\n      return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    } else if (coef * val > coef * rightEdgeOutput) {\n      return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    }\n\n    return val;\n  };\n\n  _f._closure = {\n    getVal: getVal\n  };\n  _f.asString = \"function internalInterpolate(x,narrowedInput,extrapolationConfig){const{getVal}=jsThis._closure;{const{leftEdgeInput:leftEdgeInput,rightEdgeInput:rightEdgeInput,leftEdgeOutput:leftEdgeOutput,rightEdgeOutput:rightEdgeOutput}=narrowedInput;if(rightEdgeInput-leftEdgeInput===0)return leftEdgeOutput;const progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);const val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);const coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;}}\";\n  _f.__workletHash = 8108992359068;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js (67:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var interpolate = function () {\n  var _f = function _f(x, input, output, type) {\n    if (input.length < 2 || output.length < 2) {\n      throw Error('Interpolation input and output should contain at least two values.');\n    }\n\n    var extrapolationConfig = validateType(type);\n\n    if (isNode(x)) {\n      console.warn(\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\");\n      return interpolateNode(x, {\n        inputRange: input,\n        outputRange: output,\n        extrapolateLeft: extrapolationConfig.extrapolateLeft,\n        extrapolateRight: extrapolationConfig.extrapolateRight\n      });\n    }\n\n    var length = input.length;\n    var narrowedInput = {\n      leftEdgeInput: input[0],\n      rightEdgeInput: input[1],\n      leftEdgeOutput: output[0],\n      rightEdgeOutput: output[1]\n    };\n\n    if (length > 2) {\n      if (x > input[length - 1]) {\n        narrowedInput.leftEdgeInput = input[length - 2];\n        narrowedInput.rightEdgeInput = input[length - 1];\n        narrowedInput.leftEdgeOutput = output[length - 2];\n        narrowedInput.rightEdgeOutput = output[length - 1];\n      } else {\n        for (var i = 1; i < length; ++i) {\n          if (x <= input[i]) {\n            narrowedInput.leftEdgeInput = input[i - 1];\n            narrowedInput.rightEdgeInput = input[i];\n            narrowedInput.leftEdgeOutput = output[i - 1];\n            narrowedInput.rightEdgeOutput = output[i];\n            break;\n          }\n        }\n      }\n    }\n\n    return internalInterpolate(x, narrowedInput, extrapolationConfig);\n  };\n\n  _f._closure = {\n    validateType: validateType,\n    isNode: isNode,\n    interpolateNode: interpolateNode,\n    internalInterpolate: internalInterpolate\n  };\n  _f.asString = \"function interpolate(x,input,output,type){const{validateType,isNode,interpolateNode,internalInterpolate}=jsThis._closure;{if(input.length<2||output.length<2){throw Error('Interpolation input and output should contain at least two values.');}const extrapolationConfig=validateType(type);if(isNode(x)){console.warn(\\\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\\\");return interpolateNode(x,{inputRange:input,outputRange:output,extrapolateLeft:extrapolationConfig.extrapolateLeft,extrapolateRight:extrapolationConfig.extrapolateRight});}const length=input.length;const narrowedInput={leftEdgeInput:input[0],rightEdgeInput:input[1],leftEdgeOutput:output[0],rightEdgeOutput:output[1]};if(length>2){if(x>input[length-1]){narrowedInput.leftEdgeInput=input[length-2];narrowedInput.rightEdgeInput=input[length-1];narrowedInput.leftEdgeOutput=output[length-2];narrowedInput.rightEdgeOutput=output[length-1];}else{for(let i=1;i<length;++i){if(x<=input[i]){narrowedInput.leftEdgeInput=input[i-1];narrowedInput.rightEdgeInput=input[i];narrowedInput.leftEdgeOutput=output[i-1];narrowedInput.rightEdgeOutput=output[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);}}\";\n  _f.__workletHash = 14201461170439;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js (85:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/interpolation.js"],"names":["interpolateNode","Extrapolation","isNode","x","__nodeId","undefined","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","Error","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","interpolate","input","output","length","console","warn","inputRange","outputRange","i"],"mappings":"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","sourcesContent":["// @ts-ignore JS file\nimport interpolateNode from '../reanimated1/derived/interpolate';\nexport var Extrapolation;\n(function (Extrapolation) {\n    Extrapolation[\"IDENTITY\"] = \"identity\";\n    Extrapolation[\"CLAMP\"] = \"clamp\";\n    Extrapolation[\"EXTEND\"] = \"extend\";\n})(Extrapolation || (Extrapolation = {}));\nfunction isNode(x) {\n    'worklet';\n    return x.__nodeId !== undefined;\n}\nfunction getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n    'worklet';\n    switch (type) {\n        case Extrapolation.IDENTITY:\n            return x;\n        case Extrapolation.CLAMP:\n            if (coef * val < coef * leftEdgeOutput) {\n                return leftEdgeOutput;\n            }\n            return rightEdgeOutput;\n        case Extrapolation.EXTEND:\n        default:\n            return val;\n    }\n}\nfunction isExtrapolate(value) {\n    'worklet';\n    return (value === Extrapolation.EXTEND ||\n        value === Extrapolation.CLAMP ||\n        value === Extrapolation.IDENTITY);\n}\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type) {\n    'worklet';\n    // initialize extrapolationConfig with default extrapolation\n    const extrapolationConfig = {\n        extrapolateLeft: Extrapolation.EXTEND,\n        extrapolateRight: Extrapolation.EXTEND,\n    };\n    if (!type) {\n        return extrapolationConfig;\n    }\n    if (typeof type === 'string') {\n        if (!isExtrapolate(type)) {\n            throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n        }\n        extrapolationConfig.extrapolateLeft = type;\n        extrapolationConfig.extrapolateRight = type;\n        return extrapolationConfig;\n    }\n    // otherwise type is extrapolation config object\n    if ((type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n        (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))) {\n        throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);\n    }\n    Object.assign(extrapolationConfig, type);\n    return extrapolationConfig;\n}\nfunction internalInterpolate(x, narrowedInput, extrapolationConfig) {\n    'worklet';\n    const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput, } = narrowedInput;\n    if (rightEdgeInput - leftEdgeInput === 0)\n        return leftEdgeOutput;\n    const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n    const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n    const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n    if (coef * val < coef * leftEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    }\n    else if (coef * val > coef * rightEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    }\n    return val;\n}\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolatation.CLAMP)\nexport function interpolate(x, input, output, type) {\n    'worklet';\n    if (input.length < 2 || output.length < 2) {\n        throw Error('Interpolation input and output should contain at least two values.');\n    }\n    const extrapolationConfig = validateType(type);\n    if (isNode(x)) {\n        console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n        return interpolateNode(x, {\n            inputRange: input,\n            outputRange: output,\n            extrapolateLeft: extrapolationConfig.extrapolateLeft,\n            extrapolateRight: extrapolationConfig.extrapolateRight,\n        });\n    }\n    const length = input.length;\n    const narrowedInput = {\n        leftEdgeInput: input[0],\n        rightEdgeInput: input[1],\n        leftEdgeOutput: output[0],\n        rightEdgeOutput: output[1],\n    };\n    if (length > 2) {\n        if (x > input[length - 1]) {\n            narrowedInput.leftEdgeInput = input[length - 2];\n            narrowedInput.rightEdgeInput = input[length - 1];\n            narrowedInput.leftEdgeOutput = output[length - 2];\n            narrowedInput.rightEdgeOutput = output[length - 1];\n        }\n        else {\n            for (let i = 1; i < length; ++i) {\n                if (x <= input[i]) {\n                    narrowedInput.leftEdgeInput = input[i - 1];\n                    narrowedInput.rightEdgeInput = input[i];\n                    narrowedInput.leftEdgeOutput = output[i - 1];\n                    narrowedInput.rightEdgeOutput = output[i];\n                    break;\n                }\n            }\n        }\n    }\n    return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n"]},"metadata":{},"sourceType":"module"}