{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"isMobile\", \"onValueChanged\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport tinycolor from \"tinycolor2\";\nimport { COLORPICKER_COLORS, COLORS } from \"../constants/colors\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { isValidHex, toState } from \"../utils\";\nimport { FONTS } from \"../constants/fonts\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ColorView(_ref) {\n  var size = _ref.size,\n      color = _ref.color,\n      style = _ref.style;\n  return typeof color == \"object\" ? _jsx(LinearGradient, {\n    colors: _toConsumableArray(color),\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: color\n    }, style]\n  }) : _jsx(View, {\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: color\n    }, style]\n  });\n}\n\nexport function ColorPicker(_ref2) {\n  var isMobile = _ref2.isMobile,\n      onValueChanged = _ref2.onValueChanged,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var _React$useState = React.useState(\"FFFFFF\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      onTextChanged = _React$useState2[1];\n\n  var COLOR_SIZE = 24;\n  var PADDING = 12;\n  var SCROLL_HEIGHT = COLOR_SIZE + PADDING * 2;\n  var COLORS = React.useMemo(function () {\n    return COLORPICKER_COLORS.reverse();\n  }, []);\n  return _jsx(View, _objectSpread(_objectSpread({\n    showsVerticalScrollIndicator: false\n  }, props), {}, {\n    style: [isMobile ? {\n      minHeight: SCROLL_HEIGHT,\n      maxHeight: SCROLL_HEIGHT\n    } : {\n      flexShrink: 1,\n      flexGrow: 0,\n      maxWidth: 300\n    }, props.style],\n    contentContainerStyle: [{\n      paddingVertical: PADDING\n    }, !isMobile && {\n      width: \"100%\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\"\n    }, props.contentContainerStyle],\n    horizontal: isMobile,\n    pagingEnabled: true,\n    children: _jsxs(ScrollView, {\n      style: styles.content,\n      children: [COLORS.map(function (color) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return onValueChanged(color);\n          },\n          children: _jsx(ColorView, {\n            size: COLOR_SIZE,\n            color: color,\n            style: {\n              margin: isMobile ? 12 : 6\n            }\n          })\n        }, color);\n      }), _jsx(ColorPickerInput, {\n        size: COLOR_SIZE,\n        value: text,\n        onValueChanged: onTextChanged,\n        onSubmit: function onSubmit(value) {\n          onValueChanged(value);\n        }\n      }), _jsx(TouchableOpacity, {\n        style: styles.useGradientButton,\n        children: _jsx(Text, {\n          style: styles.useGradientButtonText,\n          children: \"Use gradients colors\"\n        })\n      })]\n    })\n  }));\n}\n\nfunction ColorPickerInput(_ref3) {\n  var size = _ref3.size,\n      value = _ref3.value,\n      onValueChanged = _ref3.onValueChanged,\n      onSubmit = _ref3.onSubmit;\n  return _jsxs(View, {\n    style: [{\n      height: size,\n      flex: 1,\n      minWidth: 275,\n      margin: 10,\n      borderRadius: size / 2,\n      borderWidth: 2,\n      flexDirection: \"row\",\n      overflow: \"hidden\"\n    }, {\n      borderColor: \"gray\",\n      backgroundColor: \"gray\"\n    }],\n    children: [_jsx(View, {\n      style: {\n        width: size,\n        height: size - 4,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(Text, {\n        style: {\n          alignSelf: \"center\",\n          color: \"#98A1A4\"\n        },\n        children: \"#\"\n      })\n    }), _jsx(TextInput, {\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      value: value.replace(\"#\", \"\"),\n      onChangeText: function onChangeText(value) {\n        onValueChanged(value);\n\n        if (isValidHex(value)) {\n          onSubmit(\"#\" + tinycolor(value).toHex());\n        }\n      },\n      style: {\n        flex: 1,\n        paddingHorizontal: 4,\n        color: \"#fff\",\n        outlineColor: \"transparent\"\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  useGradientButton: {\n    justifyContent: 'center',\n    marginVertical: 10\n  },\n  useGradientButtonText: {\n    textAlign: 'center',\n    fontFamily: FONTS.medium\n  },\n  content: {\n    width: '100%',\n    height: \"100%\"\n  }\n});","map":{"version":3,"names":["React","tinycolor","COLORPICKER_COLORS","COLORS","LinearGradient","isValidHex","toState","FONTS","ColorView","size","color","style","width","height","borderRadius","backgroundColor","ColorPicker","isMobile","onValueChanged","props","useState","text","onTextChanged","COLOR_SIZE","PADDING","SCROLL_HEIGHT","useMemo","reverse","minHeight","maxHeight","flexShrink","flexGrow","maxWidth","paddingVertical","flexDirection","flexWrap","contentContainerStyle","styles","content","map","margin","value","useGradientButton","useGradientButtonText","ColorPickerInput","onSubmit","flex","minWidth","borderWidth","overflow","borderColor","justifyContent","alignItems","alignSelf","replace","toHex","paddingHorizontal","outlineColor","StyleSheet","create","marginVertical","textAlign","fontFamily","medium"],"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/components/ColorPicker.js"],"sourcesContent":["import React from \"react\";\nimport {\n    ScrollView,\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from \"react-native\";\nimport tinycolor from \"tinycolor2\";\nimport { COLORPICKER_COLORS, COLORS } from \"../constants/colors\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { isValidHex, toState } from \"../utils\";\nimport { FONTS } from \"../constants/fonts\";\n\n\n\nfunction ColorView({ size, color, style }) {\n    return (\n        typeof color == \"object\" ?\n            <LinearGradient\n                colors={[...color]}\n                style={[\n                    {\n                        width: size,\n                        height: size,\n                        borderRadius: size / 2,\n                        backgroundColor: color,\n                    },\n                    style,\n                ]}\n            /> : \n        <View\n            style={[\n                {\n                    width: size,\n                    height: size,\n                    borderRadius: size / 2,\n                    backgroundColor: color,\n                },\n                style,\n            ]}\n        />\n\n    );\n}\n\nexport function ColorPicker({\n    isMobile,\n    onValueChanged,\n    ...props\n}) {\n\n    const [text, onTextChanged] = React.useState(\"FFFFFF\");\n    const COLOR_SIZE = 24;\n    const PADDING = 12;\n    const SCROLL_HEIGHT = COLOR_SIZE + PADDING * 2;\n    const COLORS = React.useMemo(() => COLORPICKER_COLORS.reverse(), []);\n    return (\n        <View\n            showsVerticalScrollIndicator={false}\n            {...props}\n            style={[\n                isMobile\n                    ? { minHeight: SCROLL_HEIGHT, maxHeight: SCROLL_HEIGHT }\n                    : { flexShrink: 1, flexGrow: 0, maxWidth: 300, },\n                props.style,\n\n            ]}\n            contentContainerStyle={[\n                { paddingVertical: PADDING },\n                !isMobile && {\n                    width: \"100%\",\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                },\n                props.contentContainerStyle,\n            ]}\n            horizontal={isMobile}\n            pagingEnabled\n        >\n            <ScrollView style={styles.content}>\n\n            {COLORS.map((color) => (\n                <TouchableOpacity key={color} onPress={() => onValueChanged(color)}>\n                    <ColorView\n                        size={COLOR_SIZE}\n                        color={color}\n                        style={{ margin: isMobile ? 12 : 6 }}\n                    />\n                </TouchableOpacity>\n            ))}\n            <ColorPickerInput\n                size={COLOR_SIZE}\n\n                value={text}\n                onValueChanged={onTextChanged}\n                onSubmit={(value) => {\n                    onValueChanged(value);\n                }}\n            />\n\n                <TouchableOpacity style={styles.useGradientButton}>\n                    <Text style={styles.useGradientButtonText}>Use gradients colors</Text>\n                </TouchableOpacity>\n            </ScrollView>\n\n        </View>\n    );\n}\n\nfunction ColorPickerInput({ size, value, onValueChanged, onSubmit }) {\n    return (\n        <View\n            style={[\n                {\n                    height: size,\n                    flex: 1,\n                    minWidth: 275,\n                    margin: 10,\n                    borderRadius: size / 2,\n                    borderWidth: 2,\n                    flexDirection: \"row\",\n                    overflow: \"hidden\",\n                },\n                {\n                    borderColor: \"gray\",\n                    backgroundColor: \"gray\",\n                },\n            ]}\n        >\n            <View\n                style={{\n                    width: size,\n                    height: size - 4,\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Text\n                    style={{ alignSelf: \"center\", color: \"#98A1A4\" }}\n                >\n                    #\n                </Text>\n            </View>\n            <TextInput\n                autoCapitalize={\"none\"}\n                autoCorrect={false}\n                value={value.replace(\"#\", \"\")}\n                onChangeText={(value) => {\n                    onValueChanged(value);\n\n                    if (isValidHex(value)) {\n                        onSubmit(\"#\" + tinycolor(value).toHex());\n                    }\n                }}\n                style={{\n                    flex: 1,\n                    paddingHorizontal: 4,\n                    color: \"#fff\",\n                    outlineColor: \"transparent\",\n                }}\n            />\n        </View>\n    );\n}\n\n\n\n\nconst styles = StyleSheet.create({\n    useGradientButton: {\n        justifyContent: 'center',\n        marginVertical: 10,\n    },\n    useGradientButtonText: {\n        textAlign: 'center',\n        fontFamily: FONTS.medium,\n    },\n    content: {\n        width: '100%',\n        height: \"100%\"\n    }\n\n})"],"mappings":"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"},"metadata":{},"sourceType":"module"}