{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport { adapt } from \"./AnimatedBlock\";\nimport { val } from \"../val\";\nimport invariant from 'invariant';\n\nvar AnimatedCallFunc = function (_AnimatedNode) {\n  _inherits(AnimatedCallFunc, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCallFunc);\n\n  function AnimatedCallFunc(what, args, params) {\n    var _this;\n\n    _classCallCheck(this, AnimatedCallFunc);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \" + what);\n    invariant(args.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got \" + args);\n    invariant(params.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got \" + params);\n    _this = _super.call(this, {\n      type: 'callfunc',\n      what: what,\n      args: args,\n      params: params\n    }, _toConsumableArray(args));\n    _this._what = what;\n    _this._args = args;\n    _this._params = params;\n    return _this;\n  }\n\n  _createClass(AnimatedCallFunc, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCallFunc, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"beginContext\",\n    value: function beginContext() {\n      var _this2 = this;\n\n      this._previousCallID = getCallID();\n      setCallID(getCallID() + '/' + this.__nodeID);\n\n      this._params.forEach(function (param, index) {\n        param.beginContext(_this2._args[index], _this2._previousCallID);\n      });\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this._params.forEach(function (param) {\n        param.endContext();\n      });\n\n      setCallID(this._previousCallID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      this.beginContext();\n      var value = val(this._what);\n      this.endContext();\n      return value;\n    }\n  }]);\n\n  return AnimatedCallFunc;\n}(AnimatedNode);\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(function (p) {\n    return adapt(p);\n  }), params);\n}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js"],"names":["AnimatedNode","getCallID","setCallID","adapt","val","invariant","AnimatedCallFunc","what","args","params","every","el","type","_what","_args","_params","__nodeID","_previousCallID","forEach","param","index","beginContext","endContext","value","createAnimatedCallFunc","proc","map","p"],"mappings":";;;;;;;;;;;AAAA,OAAOA,YAAP,IAAuBC,SAAvB,EAAkCC,SAAlC;AACA,SAASC,KAAT;AACA,SAASC,GAAT;AACA,OAAOC,SAAP,MAAsB,WAAtB;;IAEMC,gB;;;;;AAKJ,4BAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAAA;;AAAA;;AAC9BJ,IAAAA,SAAS,CACPE,IAAI,YAAYP,YADT,2FAEgFO,IAFhF,CAAT;AAIAF,IAAAA,SAAS,CACPG,IAAI,CAACE,KAAL,CAAW,UAACC,EAAD;AAAA,aAAQA,EAAE,YAAYX,YAAtB;AAAA,KAAX,CADO,iGAEsFQ,IAFtF,CAAT;AAIAH,IAAAA,SAAS,CACPI,MAAM,CAACC,KAAP,CAAa,UAACC,EAAD;AAAA,aAAQA,EAAE,YAAYX,YAAtB;AAAA,KAAb,CADO,mGAEwFS,MAFxF,CAAT;AAIA,8BACE;AACEG,MAAAA,IAAI,EAAE,UADR;AAEEL,MAAAA,IAAI,EAAJA,IAFF;AAGEC,MAAAA,IAAI,EAAJA,IAHF;AAIEC,MAAAA,MAAM,EAANA;AAJF,KADF,qBAOMD,IAPN;AASA,UAAKK,KAAL,GAAaN,IAAb;AACA,UAAKO,KAAL,GAAaN,IAAb;AACA,UAAKO,OAAL,GAAeN,MAAf;AAxB8B;AAyB/B;;;;WAED,oBAAW;AACT,wCAAgC,KAAKO,QAArC;AACD;;;WAED,wBAAe;AAAA;;AACb,WAAKC,eAAL,GAAuBhB,SAAS,EAAhC;AACAC,MAAAA,SAAS,CAACD,SAAS,KAAK,GAAd,GAAoB,KAAKe,QAA1B,CAAT;;AAEA,WAAKD,OAAL,CAAaG,OAAb,CAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACrCD,QAAAA,KAAK,CAACE,YAAN,CAAmB,MAAI,CAACP,KAAL,CAAWM,KAAX,CAAnB,EAAsC,MAAI,CAACH,eAA3C;AACD,OAFD;AAGD;;;WAED,sBAAa;AACX,WAAKF,OAAL,CAAaG,OAAb,CAAqB,UAACC,KAAD,EAAW;AAC9BA,QAAAA,KAAK,CAACG,UAAN;AACD,OAFD;;AAGApB,MAAAA,SAAS,CAAC,KAAKe,eAAN,CAAT;AACD;;;WAED,wBAAe;AACb,WAAKI,YAAL;AACA,UAAME,KAAK,GAAGnB,GAAG,CAAC,KAAKS,KAAN,CAAjB;AACA,WAAKS,UAAL;AACA,aAAOC,KAAP;AACD;;;;EAzD4BvB,Y;;AA4D/B,OAAO,SAASwB,sBAAT,CAAgCC,IAAhC,EAAsCjB,IAAtC,EAA4CC,MAA5C,EAAoD;AACzD,SAAO,IAAIH,gBAAJ,CACLmB,IADK,EAELjB,IAAI,CAACkB,GAAL,CAAS,UAACC,CAAD;AAAA,WAAOxB,KAAK,CAACwB,CAAD,CAAZ;AAAA,GAAT,CAFK,EAGLlB,MAHK,CAAP;AAKD","sourcesContent":["import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n  constructor(what, args, params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      args.every((el) => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`\n    );\n    invariant(\n      params.every((el) => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`\n    );\n    super(\n      {\n        type: 'callfunc',\n        what,\n        args,\n        params,\n      },\n      [...args]\n    );\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach((param) => {\n      param.endContext();\n    });\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(\n    proc,\n    args.map((p) => adapt(p)),\n    params\n  );\n}\n"]},"metadata":{},"sourceType":"module"}