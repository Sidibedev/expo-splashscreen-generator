{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport rfcIsEqual from 'react-fast-compare';\nimport { Point, Size, Rect, swapSizeDimmensions, makeChildlessRect, computeCenterGeometry, computeTopGeometry, computeBottomGeometry, computeLeftGeometry, computeRightGeometry } from \"./geom\";\nimport styleGenerator from \"./styles\";\nimport TooltipChildrenContext from \"./tooltip-children.context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport { TooltipChildrenContext };\nvar DEFAULT_DISPLAY_INSETS = {\n  top: 24,\n  bottom: 24,\n  left: 24,\n  right: 24\n};\n\nvar computeDisplayInsets = function computeDisplayInsets(insetsFromProps) {\n  return _extends({}, DEFAULT_DISPLAY_INSETS, insetsFromProps);\n};\n\nvar invertPlacement = function invertPlacement(placement) {\n  switch (placement) {\n    case 'top':\n      return 'bottom';\n\n    case 'bottom':\n      return 'top';\n\n    case 'right':\n      return 'left';\n\n    case 'left':\n      return 'right';\n\n    default:\n      return placement;\n  }\n};\n\nvar Tooltip = function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip(props) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _super.call(this, props);\n\n    _this.updateWindowDims = function (dims) {\n      _this.setState({\n        windowDims: dims.window,\n        contentSize: new Size(0, 0),\n        adjustedContentSize: new Size(0, 0),\n        anchorPoint: new Point(0, 0),\n        tooltipOrigin: new Point(0, 0),\n        childRect: new Rect(0, 0, 0, 0),\n        measurementsFinished: false\n      }, function () {\n        setTimeout(function () {\n          _this.measureChildRect();\n        }, 500);\n      });\n    };\n\n    _this.doChildlessPlacement = function () {\n      _this.onChildMeasurementComplete(makeChildlessRect({\n        displayInsets: _this.state.displayInsets,\n        placement: _this.state.placement,\n        windowDims: _this.state.windowDims\n      }));\n    };\n\n    _this.measureContent = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          width = _e$nativeEvent$layout.width,\n          height = _e$nativeEvent$layout.height;\n      var contentSize = new Size(width, height);\n\n      _this.setState({\n        contentSize: contentSize\n      }, function () {\n        _this.computeGeometry();\n      });\n    };\n\n    _this.onChildMeasurementComplete = function (rect) {\n      _this.setState({\n        childRect: rect,\n        waitingForInteractions: false\n      }, function () {\n        _this.isMeasuringChild = false;\n\n        if (_this.state.contentSize.width) {\n          _this.computeGeometry();\n        }\n      });\n    };\n\n    _this.measureChildRect = function () {\n      var doMeasurement = function doMeasurement() {\n        if (!_this.isMeasuringChild) {\n          _this.isMeasuringChild = true;\n\n          if (_this.childWrapper.current && typeof _this.childWrapper.current.measure === 'function') {\n            _this.childWrapper.current.measure(function (x, y, width, height, pageX, pageY) {\n              var childRect = new Rect(pageX, pageY, width, height);\n\n              if (Object.values(childRect).every(function (value) {\n                return value !== undefined;\n              })) {\n                _this.onChildMeasurementComplete(childRect);\n              } else {\n                _this.doChildlessPlacement();\n              }\n            });\n          } else {\n            _this.doChildlessPlacement();\n          }\n        }\n      };\n\n      if (_this.props.useInteractionManager) {\n        if (_this.interactionPromise) {\n          _this.interactionPromise.cancel();\n        }\n\n        _this.interactionPromise = InteractionManager.runAfterInteractions(function () {\n          doMeasurement();\n        });\n      } else {\n        doMeasurement();\n      }\n    };\n\n    _this.computeGeometry = function () {\n      var _this$props = _this.props,\n          arrowSize = _this$props.arrowSize,\n          childContentSpacing = _this$props.childContentSpacing;\n      var _this$state = _this.state,\n          childRect = _this$state.childRect,\n          contentSize = _this$state.contentSize,\n          displayInsets = _this$state.displayInsets,\n          placement = _this$state.placement,\n          windowDims = _this$state.windowDims;\n      var options = {\n        displayInsets: displayInsets,\n        childRect: childRect,\n        windowDims: windowDims,\n        arrowSize: placement === 'top' || placement === 'bottom' ? arrowSize : swapSizeDimmensions(arrowSize),\n        contentSize: contentSize,\n        childContentSpacing: childContentSpacing\n      };\n      var geom = computeTopGeometry(options);\n\n      if (placement === 'center' && React.Children.count(_this.props.children) === 0) {\n        geom = computeCenterGeometry(options);\n      } else {\n        switch (placement) {\n          case 'bottom':\n            geom = computeBottomGeometry(options);\n            break;\n\n          case 'left':\n            geom = computeLeftGeometry(options);\n            break;\n\n          case 'right':\n            geom = computeRightGeometry(options);\n            break;\n\n          case 'top':\n          default:\n            break;\n        }\n      }\n\n      var _geom = geom,\n          tooltipOrigin = _geom.tooltipOrigin,\n          anchorPoint = _geom.anchorPoint,\n          adjustedContentSize = _geom.adjustedContentSize;\n\n      _this.setState({\n        tooltipOrigin: tooltipOrigin,\n        anchorPoint: anchorPoint,\n        placement: placement,\n        measurementsFinished: childRect.width && contentSize.width,\n        adjustedContentSize: adjustedContentSize\n      });\n    };\n\n    _this.renderChildInTooltip = function () {\n      var _this$state$childRect = _this.state.childRect,\n          height = _this$state$childRect.height,\n          width = _this$state$childRect.width,\n          x = _this$state$childRect.x,\n          y = _this$state$childRect.y;\n\n      var onTouchEnd = function onTouchEnd() {\n        if (_this.props.closeOnChildInteraction) {\n          _this.props.onClose();\n        }\n      };\n\n      return _jsx(TooltipChildrenContext.Provider, {\n        value: {\n          tooltipDuplicate: true\n        },\n        children: _jsx(View, {\n          onTouchEnd: onTouchEnd,\n          pointerEvents: _this.props.allowChildInteraction ? 'box-none' : 'none',\n          style: [{\n            position: 'absolute',\n            height: height,\n            width: width,\n            top: y,\n            left: x,\n            alignItems: 'center',\n            justifyContent: 'center'\n          }, _this.props.childrenWrapperStyle],\n          children: _this.props.children\n        })\n      });\n    };\n\n    _this.renderContentForTooltip = function () {\n      var generatedStyles = styleGenerator({\n        adjustedContentSize: _this.state.adjustedContentSize,\n        anchorPoint: _this.state.anchorPoint,\n        arrowSize: _this.props.arrowSize,\n        displayInsets: _this.state.displayInsets,\n        measurementsFinished: _this.state.measurementsFinished,\n        ownProps: _objectSpread({}, _this.props),\n        placement: _this.state.placement,\n        tooltipOrigin: _this.state.tooltipOrigin,\n        topAdjustment: _this.props.topAdjustment\n      });\n      var hasChildren = React.Children.count(_this.props.children) > 0;\n\n      var onPressContent = function onPressContent() {\n        if (_this.props.closeOnContentInteraction) {\n          _this.props.onClose();\n        }\n      };\n\n      return _jsx(TouchableWithoutFeedback, {\n        onPress: _this.props.onClose,\n        accessible: _this.props.accessible,\n        children: _jsxs(View, {\n          style: generatedStyles.containerStyle,\n          children: [_jsx(View, {\n            style: [generatedStyles.backgroundStyle],\n            children: _jsxs(View, {\n              style: generatedStyles.tooltipStyle,\n              children: [hasChildren ? _jsx(View, {\n                style: generatedStyles.arrowStyle\n              }) : null, _jsx(View, {\n                onLayout: _this.measureContent,\n                style: generatedStyles.contentStyle,\n                children: _jsx(TouchableWithoutFeedback, {\n                  onPress: onPressContent,\n                  accessible: _this.props.accessible,\n                  children: _this.props.content\n                })\n              })]\n            })\n          }), hasChildren && _this.props.showChildInTooltip ? _this.renderChildInTooltip() : null]\n        })\n      });\n    };\n\n    var isVisible = props.isVisible,\n        useInteractionManager = props.useInteractionManager;\n    _this.isMeasuringChild = false;\n    _this.interactionPromise = null;\n    _this.dimensionsSubscription = null;\n    _this.childWrapper = React.createRef();\n    _this.state = {\n      waitingForInteractions: isVisible && useInteractionManager,\n      contentSize: new Size(0, 0),\n      adjustedContentSize: new Size(0, 0),\n      anchorPoint: new Point(0, 0),\n      tooltipOrigin: new Point(0, 0),\n      childRect: new Rect(0, 0, 0, 0),\n      displayInsets: computeDisplayInsets(props.displayInsets),\n      placement: React.Children.count(props.children) === 0 ? invertPlacement(props.placement) : props.placement,\n      measurementsFinished: false,\n      windowDims: Dimensions.get('window')\n    };\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsSubscription = Dimensions.addEventListener('change', this.updateWindowDims);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          content = _this$props2.content,\n          isVisible = _this$props2.isVisible,\n          placement = _this$props2.placement;\n      var displayInsets = this.state.displayInsets;\n      var contentChanged = !rfcIsEqual(prevProps.content, content);\n      var placementChanged = prevProps.placement !== placement;\n      var becameVisible = isVisible && !prevProps.isVisible;\n      var insetsChanged = !rfcIsEqual(prevState.displayInsets, displayInsets);\n\n      if (contentChanged || placementChanged || becameVisible || insetsChanged) {\n        setTimeout(function () {\n          _this2.measureChildRect();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$dimensionsSubsc;\n\n      if ((_this$dimensionsSubsc = this.dimensionsSubscription) != null && _this$dimensionsSubsc.remove) {\n        this.dimensionsSubscription.remove();\n      } else {\n        Dimensions.removeEventListener('change', this.updateWindowDims);\n      }\n\n      if (this.interactionPromise) {\n        this.interactionPromise.cancel();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          isVisible = _this$props3.isVisible,\n          useReactNativeModal = _this$props3.useReactNativeModal,\n          modalComponent = _this$props3.modalComponent;\n      var hasChildren = React.Children.count(children) > 0;\n      var showTooltip = isVisible && !this.state.waitingForInteractions;\n      var ModalComponent = modalComponent || Modal;\n      return _jsxs(React.Fragment, {\n        children: [useReactNativeModal ? _jsx(ModalComponent, {\n          transparent: true,\n          visible: showTooltip,\n          onRequestClose: this.props.onClose,\n          supportedOrientations: this.props.supportedOrientations,\n          children: this.renderContentForTooltip()\n        }) : null, hasChildren ? _jsx(View, {\n          ref: this.childWrapper,\n          onLayout: this.measureChildRect,\n          style: this.props.parentWrapperStyle,\n          children: children\n        }) : null, !useReactNativeModal && showTooltip ? this.renderContentForTooltip() : null]\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var nextState = {};\n      var nextPlacement = React.Children.count(nextProps.children) === 0 ? invertPlacement(nextProps.placement) : nextProps.placement;\n\n      if (nextPlacement !== prevState.placement) {\n        nextState.placement = nextPlacement;\n      }\n\n      var nextDisplayInsets = computeDisplayInsets(nextProps.displayInsets);\n\n      if (!rfcIsEqual(nextDisplayInsets, prevState.displayInsets)) {\n        nextState.displayInsets = nextDisplayInsets;\n      }\n\n      if (prevState.measurementsFinished && !nextProps.isVisible) {\n        nextState.measurementsFinished = false;\n        nextState.adjustedContentSize = new Size(0, 0);\n      }\n\n      if (Object.keys(nextState).length) {\n        return nextState;\n      }\n\n      return null;\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\nTooltip.defaultProps = {\n  allowChildInteraction: true,\n  arrowSize: new Size(16, 8),\n  backgroundColor: 'rgba(0,0,0,0.5)',\n  childContentSpacing: 4,\n  children: null,\n  closeOnChildInteraction: true,\n  closeOnContentInteraction: true,\n  content: _jsx(View, {}),\n  displayInsets: {},\n  disableShadow: false,\n  isVisible: false,\n  onClose: function onClose() {\n    console.warn('[react-native-walkthrough-tooltip] onClose prop not provided');\n  },\n  placement: 'center',\n  showChildInTooltip: true,\n  supportedOrientations: ['portrait', 'landscape'],\n  useInteractionManager: false,\n  useReactNativeModal: true,\n  topAdjustment: 0,\n  accessible: true\n};\nTooltip.propTypes = {\n  allowChildInteraction: PropTypes.bool,\n  arrowSize: PropTypes.shape({\n    height: PropTypes.number,\n    width: PropTypes.number\n  }),\n  backgroundColor: PropTypes.string,\n  childContentSpacing: PropTypes.number,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  closeOnChildInteraction: PropTypes.bool,\n  closeOnContentInteraction: PropTypes.bool,\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  displayInsets: PropTypes.shape({\n    top: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number\n  }),\n  disableShadow: PropTypes.bool,\n  isVisible: PropTypes.bool,\n  onClose: PropTypes.func,\n  placement: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'center']),\n  showChildInTooltip: PropTypes.bool,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.string),\n  useInteractionManager: PropTypes.bool,\n  useReactNativeModal: PropTypes.bool,\n  topAdjustment: PropTypes.number,\n  accessible: PropTypes.bool\n};\nexport default Tooltip;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-walkthrough-tooltip/src/tooltip.js"],"names":["React","Component","PropTypes","rfcIsEqual","Point","Size","Rect","swapSizeDimmensions","makeChildlessRect","computeCenterGeometry","computeTopGeometry","computeBottomGeometry","computeLeftGeometry","computeRightGeometry","styleGenerator","TooltipChildrenContext","DEFAULT_DISPLAY_INSETS","top","bottom","left","right","computeDisplayInsets","insetsFromProps","invertPlacement","placement","Tooltip","props","updateWindowDims","dims","setState","windowDims","window","contentSize","adjustedContentSize","anchorPoint","tooltipOrigin","childRect","measurementsFinished","setTimeout","measureChildRect","doChildlessPlacement","onChildMeasurementComplete","displayInsets","state","measureContent","e","nativeEvent","layout","width","height","computeGeometry","rect","waitingForInteractions","isMeasuringChild","doMeasurement","childWrapper","current","measure","x","y","pageX","pageY","Object","values","every","value","undefined","useInteractionManager","interactionPromise","cancel","InteractionManager","runAfterInteractions","arrowSize","childContentSpacing","options","geom","Children","count","children","renderChildInTooltip","onTouchEnd","closeOnChildInteraction","onClose","tooltipDuplicate","allowChildInteraction","position","alignItems","justifyContent","childrenWrapperStyle","renderContentForTooltip","generatedStyles","ownProps","topAdjustment","hasChildren","onPressContent","closeOnContentInteraction","accessible","containerStyle","backgroundStyle","tooltipStyle","arrowStyle","contentStyle","content","showChildInTooltip","isVisible","dimensionsSubscription","createRef","Dimensions","get","addEventListener","prevProps","prevState","contentChanged","placementChanged","becameVisible","insetsChanged","remove","removeEventListener","useReactNativeModal","modalComponent","showTooltip","ModalComponent","Modal","supportedOrientations","parentWrapperStyle","nextProps","nextState","nextPlacement","nextDisplayInsets","keys","length","defaultProps","backgroundColor","disableShadow","console","warn","propTypes","bool","shape","number","string","oneOfType","node","func","oneOf","arrayOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dimensions,\n  InteractionManager,\n  Modal,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport rfcIsEqual from 'react-fast-compare';\nimport {\n  Point,\n  Size,\n  Rect,\n  swapSizeDimmensions,\n  makeChildlessRect,\n  computeCenterGeometry,\n  computeTopGeometry,\n  computeBottomGeometry,\n  computeLeftGeometry,\n  computeRightGeometry,\n} from './geom';\nimport styleGenerator from './styles';\nimport TooltipChildrenContext from './tooltip-children.context';\n\nexport { TooltipChildrenContext };\n\nconst DEFAULT_DISPLAY_INSETS = {\n  top: 24,\n  bottom: 24,\n  left: 24,\n  right: 24,\n};\n\nconst computeDisplayInsets = insetsFromProps =>\n  Object.assign({}, DEFAULT_DISPLAY_INSETS, insetsFromProps);\n\nconst invertPlacement = placement => {\n  switch (placement) {\n    case 'top':\n      return 'bottom';\n    case 'bottom':\n      return 'top';\n    case 'right':\n      return 'left';\n    case 'left':\n      return 'right';\n    default:\n      return placement;\n  }\n};\n\nclass Tooltip extends Component {\n  static defaultProps = {\n    allowChildInteraction: true,\n    arrowSize: new Size(16, 8),\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    childContentSpacing: 4,\n    children: null,\n    closeOnChildInteraction: true,\n    closeOnContentInteraction: true,\n    content: <View />,\n    displayInsets: {},\n    disableShadow: false,\n    isVisible: false,\n    onClose: () => {\n      console.warn(\n        '[react-native-walkthrough-tooltip] onClose prop not provided',\n      );\n    },\n    placement: 'center', // falls back to \"top\" if there ARE children\n    showChildInTooltip: true,\n    supportedOrientations: ['portrait', 'landscape'],\n    useInteractionManager: false,\n    useReactNativeModal: true,\n    topAdjustment: 0,\n    accessible: true,\n  };\n\n  static propTypes = {\n    allowChildInteraction: PropTypes.bool,\n    arrowSize: PropTypes.shape({\n      height: PropTypes.number,\n      width: PropTypes.number,\n    }),\n    backgroundColor: PropTypes.string,\n    childContentSpacing: PropTypes.number,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    closeOnChildInteraction: PropTypes.bool,\n    closeOnContentInteraction: PropTypes.bool,\n    content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    displayInsets: PropTypes.shape({\n      top: PropTypes.number,\n      bottom: PropTypes.number,\n      left: PropTypes.number,\n      right: PropTypes.number,\n    }),\n    disableShadow: PropTypes.bool,\n    isVisible: PropTypes.bool,\n    onClose: PropTypes.func,\n    placement: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'center']),\n    showChildInTooltip: PropTypes.bool,\n    supportedOrientations: PropTypes.arrayOf(PropTypes.string),\n    useInteractionManager: PropTypes.bool,\n    useReactNativeModal: PropTypes.bool,\n    topAdjustment: PropTypes.number,\n    accessible: PropTypes.bool,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { isVisible, useInteractionManager } = props;\n\n    this.isMeasuringChild = false;\n    this.interactionPromise = null;\n    this.dimensionsSubscription = null;\n\n    this.childWrapper = React.createRef();\n    this.state = {\n      // no need to wait for interactions if not visible initially\n      waitingForInteractions: isVisible && useInteractionManager,\n      contentSize: new Size(0, 0),\n      adjustedContentSize: new Size(0, 0),\n      anchorPoint: new Point(0, 0),\n      tooltipOrigin: new Point(0, 0),\n      childRect: new Rect(0, 0, 0, 0),\n      displayInsets: computeDisplayInsets(props.displayInsets),\n      // if we have no children, and place the tooltip at the \"top\" we want it to\n      // behave like placement \"bottom\", i.e. display below the top of the screen\n      placement:\n        React.Children.count(props.children) === 0\n          ? invertPlacement(props.placement)\n          : props.placement,\n      measurementsFinished: false,\n      windowDims: Dimensions.get('window'),\n    };\n  }\n\n  componentDidMount() {\n    this.dimensionsSubscription = Dimensions.addEventListener(\n      'change',\n      this.updateWindowDims,\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { content, isVisible, placement } = this.props;\n    const { displayInsets } = this.state;\n\n    const contentChanged = !rfcIsEqual(prevProps.content, content);\n    const placementChanged = prevProps.placement !== placement;\n    const becameVisible = isVisible && !prevProps.isVisible;\n    const insetsChanged = !rfcIsEqual(prevState.displayInsets, displayInsets);\n\n    if (contentChanged || placementChanged || becameVisible || insetsChanged) {\n      setTimeout(() => {\n        this.measureChildRect();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    // removeEventListener deprecated\n    // https://reactnative.dev/docs/dimensions#removeeventlistener\n    if (this.dimensionsSubscription?.remove) {\n      // react native >= 0.65.*\n      this.dimensionsSubscription.remove();\n    } else {\n      // react native < 0.65.*\n      Dimensions.removeEventListener('change', this.updateWindowDims);\n    }\n\n    if (this.interactionPromise) {\n      this.interactionPromise.cancel();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const nextState = {};\n\n    // update placement in state if the prop changed\n    const nextPlacement =\n      React.Children.count(nextProps.children) === 0\n        ? invertPlacement(nextProps.placement)\n        : nextProps.placement;\n\n    if (nextPlacement !== prevState.placement) {\n      nextState.placement = nextPlacement;\n    }\n\n    // update computed display insets if they changed\n    const nextDisplayInsets = computeDisplayInsets(nextProps.displayInsets);\n    if (!rfcIsEqual(nextDisplayInsets, prevState.displayInsets)) {\n      nextState.displayInsets = nextDisplayInsets;\n    }\n\n    // set measurements finished flag to false when tooltip closes\n    if (prevState.measurementsFinished && !nextProps.isVisible) {\n      nextState.measurementsFinished = false;\n      nextState.adjustedContentSize = new Size(0, 0);\n    }\n\n    if (Object.keys(nextState).length) {\n      return nextState;\n    }\n\n    return null;\n  }\n\n  updateWindowDims = dims => {\n    this.setState(\n      {\n        windowDims: dims.window,\n        contentSize: new Size(0, 0),\n        adjustedContentSize: new Size(0, 0),\n        anchorPoint: new Point(0, 0),\n        tooltipOrigin: new Point(0, 0),\n        childRect: new Rect(0, 0, 0, 0),\n        measurementsFinished: false,\n      },\n      () => {\n        setTimeout(() => {\n          this.measureChildRect();\n        }, 500); // give the rotation a moment to finish\n      },\n    );\n  };\n\n  doChildlessPlacement = () => {\n    this.onChildMeasurementComplete(\n      makeChildlessRect({\n        displayInsets: this.state.displayInsets,\n        placement: this.state.placement, // MUST use from state, not props\n        windowDims: this.state.windowDims,\n      }),\n    );\n  };\n\n  measureContent = e => {\n    const { width, height } = e.nativeEvent.layout;\n    const contentSize = new Size(width, height);\n    this.setState({ contentSize }, () => {\n      this.computeGeometry();\n    });\n  };\n\n  onChildMeasurementComplete = rect => {\n    this.setState(\n      {\n        childRect: rect,\n        waitingForInteractions: false,\n      },\n      () => {\n        this.isMeasuringChild = false;\n        if (this.state.contentSize.width) {\n          this.computeGeometry();\n        }\n      },\n    );\n  };\n\n  measureChildRect = () => {\n    const doMeasurement = () => {\n      if (!this.isMeasuringChild) {\n        this.isMeasuringChild = true;\n        if (\n          this.childWrapper.current &&\n          typeof this.childWrapper.current.measure === 'function'\n        ) {\n          this.childWrapper.current.measure(\n            (x, y, width, height, pageX, pageY) => {\n              const childRect = new Rect(pageX, pageY, width, height);\n              if (\n                Object.values(childRect).every(value => value !== undefined)\n              ) {\n                this.onChildMeasurementComplete(childRect);\n              } else {\n                this.doChildlessPlacement();\n              }\n            },\n          );\n        } else {\n          this.doChildlessPlacement();\n        }\n      }\n    };\n\n    if (this.props.useInteractionManager) {\n      if (this.interactionPromise) {\n        this.interactionPromise.cancel();\n      }\n      this.interactionPromise = InteractionManager.runAfterInteractions(() => {\n        doMeasurement();\n      });\n    } else {\n      doMeasurement();\n    }\n  };\n\n  computeGeometry = () => {\n    const { arrowSize, childContentSpacing } = this.props;\n    const {\n      childRect,\n      contentSize,\n      displayInsets,\n      placement,\n      windowDims,\n    } = this.state;\n\n    const options = {\n      displayInsets,\n      childRect,\n      windowDims,\n      arrowSize:\n        placement === 'top' || placement === 'bottom'\n          ? arrowSize\n          : swapSizeDimmensions(arrowSize),\n      contentSize,\n      childContentSpacing,\n    };\n\n    let geom = computeTopGeometry(options);\n\n    // special case for centered, childless placement tooltip\n    if (\n      placement === 'center' &&\n      React.Children.count(this.props.children) === 0\n    ) {\n      geom = computeCenterGeometry(options);\n    } else {\n      switch (placement) {\n        case 'bottom':\n          geom = computeBottomGeometry(options);\n          break;\n        case 'left':\n          geom = computeLeftGeometry(options);\n          break;\n        case 'right':\n          geom = computeRightGeometry(options);\n          break;\n        case 'top':\n        default:\n          break; // computed just above if-else-block\n      }\n    }\n\n    const { tooltipOrigin, anchorPoint, adjustedContentSize } = geom;\n\n    this.setState({\n      tooltipOrigin,\n      anchorPoint,\n      placement,\n      measurementsFinished: childRect.width && contentSize.width,\n      adjustedContentSize,\n    });\n  };\n\n  renderChildInTooltip = () => {\n    const { height, width, x, y } = this.state.childRect;\n\n    const onTouchEnd = () => {\n      if (this.props.closeOnChildInteraction) {\n        this.props.onClose();\n      }\n    };\n\n    return (\n      <TooltipChildrenContext.Provider value={{ tooltipDuplicate: true }}>\n        <View\n          onTouchEnd={onTouchEnd}\n          pointerEvents={this.props.allowChildInteraction ? 'box-none' : 'none'}\n          style={[\n            {\n              position: 'absolute',\n              height,\n              width,\n              top: y,\n              left: x,\n              alignItems: 'center',\n              justifyContent: 'center',\n            },\n            this.props.childrenWrapperStyle,\n          ]}\n        >\n          {this.props.children}\n        </View>\n      </TooltipChildrenContext.Provider>\n    );\n  };\n\n  renderContentForTooltip = () => {\n    const generatedStyles = styleGenerator({\n      adjustedContentSize: this.state.adjustedContentSize,\n      anchorPoint: this.state.anchorPoint,\n      arrowSize: this.props.arrowSize,\n      displayInsets: this.state.displayInsets,\n      measurementsFinished: this.state.measurementsFinished,\n      ownProps: { ...this.props },\n      placement: this.state.placement,\n      tooltipOrigin: this.state.tooltipOrigin,\n      topAdjustment: this.props.topAdjustment,\n    });\n\n    const hasChildren = React.Children.count(this.props.children) > 0;\n\n    const onPressContent = () => {\n      if (this.props.closeOnContentInteraction) {\n        this.props.onClose();\n      }\n    };\n\n    return (\n      <TouchableWithoutFeedback\n        onPress={this.props.onClose}\n        accessible={this.props.accessible}\n      >\n        <View style={generatedStyles.containerStyle}>\n          <View style={[generatedStyles.backgroundStyle]}>\n            <View style={generatedStyles.tooltipStyle}>\n              {hasChildren ? <View style={generatedStyles.arrowStyle} /> : null}\n              <View\n                onLayout={this.measureContent}\n                style={generatedStyles.contentStyle}\n              >\n                <TouchableWithoutFeedback\n                  onPress={onPressContent}\n                  accessible={this.props.accessible}\n                >\n                  {this.props.content}\n                </TouchableWithoutFeedback>\n              </View>\n            </View>\n          </View>\n          {hasChildren && this.props.showChildInTooltip\n            ? this.renderChildInTooltip()\n            : null}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  };\n\n  render() {\n    const {\n      children,\n      isVisible,\n      useReactNativeModal,\n      modalComponent,\n    } = this.props;\n\n    const hasChildren = React.Children.count(children) > 0;\n    const showTooltip = isVisible && !this.state.waitingForInteractions;\n    const ModalComponent = modalComponent || Modal;\n\n    return (\n      <React.Fragment>\n        {useReactNativeModal ? (\n          <ModalComponent\n            transparent\n            visible={showTooltip}\n            onRequestClose={this.props.onClose}\n            supportedOrientations={this.props.supportedOrientations}\n          >\n            {this.renderContentForTooltip()}\n          </ModalComponent>\n        ) : null}\n\n        {/* This renders the child element in place in the parent's layout */}\n        {hasChildren ? (\n          <View\n            ref={this.childWrapper}\n            onLayout={this.measureChildRect}\n            style={this.props.parentWrapperStyle}\n          >\n            {children}\n          </View>\n        ) : null}\n\n        {!useReactNativeModal && showTooltip\n          ? this.renderContentForTooltip()\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}