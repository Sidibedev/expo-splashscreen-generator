{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport FileSaver from 'file-saver';\nimport JSZip from 'jszip';\n\nfunction loadImageAsync(uri) {\n  return new Promise(function (resolve, reject) {\n    var imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n\n    imageSource.onload = function () {\n      return resolve(imageSource);\n    };\n\n    imageSource.onerror = function () {\n      return reject(imageSource);\n    };\n\n    imageSource.src = uri;\n  });\n}\n\nfunction drawImageScaled(img, ctx) {\n  var canvas = ctx.canvas;\n  ctx.drawImage(img, canvas.width / 2 - img.width / 2, canvas.height / 2 - img.height / 2);\n}\n\nexport function createAppIcon(_ref) {\n  var color, imageUrl, width, height, canvas, ctx, imageSource;\n  return _regeneratorRuntime.async(function createAppIcon$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          color = _ref.color, imageUrl = _ref.imageUrl, width = _ref.width, height = _ref.height;\n          canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n          ctx = canvas.getContext('2d');\n          ctx.fillStyle = color;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          if (!imageUrl) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(loadImageAsync(imageUrl));\n\n        case 10:\n          imageSource = _context.sent;\n          drawImageScaled(imageSource, ctx);\n\n        case 12:\n          return _context.abrupt(\"return\", canvas.toDataURL());\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction imageUriToBase64(imageUri) {\n  return imageUri.substring(imageUri.indexOf('base64,') + 'base64,'.length);\n}\n\nexport function generateImagesAsync(_ref2) {\n  var image, color, splash, splashB64, content, folderName;\n  return _regeneratorRuntime.async(function generateImagesAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          image = _ref2.image, color = _ref2.color;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(createAppIcon({\n            color: color,\n            imageUrl: image,\n            width: 1242,\n            height: 2436\n          }));\n\n        case 3:\n          splash = _context2.sent;\n          splashB64 = imageUriToBase64(splash);\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(zipImagesAsync({\n            splash: splashB64\n          }));\n\n        case 7:\n          content = _context2.sent;\n          folderName = \"expo-splashscreen.zip\";\n          FileSaver.saveAs(content, folderName);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction zipImagesAsync(_ref3) {\n  var splash, zip, content;\n  return _regeneratorRuntime.async(function zipImagesAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          splash = _ref3.splash;\n          zip = new JSZip();\n          zip.file('splash.png', splash, {\n            base64: true\n          });\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(zip.generateAsync({\n            type: 'blob'\n          }));\n\n        case 5:\n          content = _context3.sent;\n          return _context3.abrupt(\"return\", content);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/utils/processImage.ts"],"names":["FileSaver","JSZip","loadImageAsync","uri","Promise","resolve","reject","imageSource","Image","crossOrigin","onload","onerror","src","drawImageScaled","img","ctx","canvas","drawImage","width","height","createAppIcon","color","imageUrl","document","createElement","getContext","fillStyle","fillRect","toDataURL","imageUriToBase64","imageUri","substring","indexOf","length","generateImagesAsync","image","splash","splashB64","zipImagesAsync","content","folderName","saveAs","zip","file","base64","generateAsync","type"],"mappings":"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","sourcesContent":["import FileSaver from 'file-saver';\nimport JSZip from 'jszip';\n\nfunction loadImageAsync(uri: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    imageSource.onload = () => resolve(imageSource);\n    imageSource.onerror = () => reject(imageSource);\n    imageSource.src = uri;\n  });\n}\n\nfunction drawImageScaled(img: HTMLImageElement, ctx: CanvasRenderingContext2D) {\n  var canvas = ctx.canvas;\n  ctx.drawImage(\n    img,\n    canvas.width / 2 - img.width / 2,\n    canvas.height / 2 - img.height / 2\n  );\n}\n\nexport async function createAppIcon({\n  color,\n  imageUrl,\n  width,\n  height,\n}: {\n  color: string;\n  imageUrl?: string;\n  width: number;\n  height?: number;\n}): Promise<string> {\n  let canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d')!;\n\n  // draw color\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  if (imageUrl) {\n    const imageSource = await loadImageAsync(imageUrl);\n    drawImageScaled(imageSource, ctx);\n  }\n\n  // defaults to PNG with no loss\n  return canvas.toDataURL();\n}\n\nfunction imageUriToBase64(imageUri: string): string {\n  return imageUri.substring(imageUri.indexOf('base64,') + 'base64,'.length);\n}\n\nexport async function generateImagesAsync({\n  image,\n  color,\n}: {\n  emojiId?: string;\n  image?: string;\n  color: string;\n}): Promise<void> {\n  const splash = await createAppIcon({\n    color,\n    imageUrl: image,\n    width: 1242,\n    height: 2436,\n  });\n\n  const splashB64 = imageUriToBase64(splash);\n\n  const content = await zipImagesAsync({\n    splash: splashB64,\n  });\n\n  const folderName = `expo-splashscreen.zip`;\n\n  FileSaver.saveAs(content, folderName);\n}\n\nasync function zipImagesAsync({ splash }: { splash: string }) {\n  const zip = new JSZip();\n  zip.file('splash.png', splash, { base64: true });\n  const content = await zip.generateAsync({ type: 'blob' });\n  return content;\n}\n"]},"metadata":{},"sourceType":"module"}