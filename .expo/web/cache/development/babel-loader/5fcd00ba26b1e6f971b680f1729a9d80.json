{"ast":null,"code":"import { defineAnimation } from \"./util\";\nexport var withSpring = function () {\n  var _f = function _f(toValue, userConfig, callback) {\n    return defineAnimation(toValue, function () {\n      var _f = function _f() {\n        var config = {\n          damping: 10,\n          mass: 1,\n          stiffness: 100,\n          overshootClamping: false,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 2,\n          velocity: 0\n        };\n\n        if (userConfig) {\n          Object.keys(userConfig).forEach(function (key) {\n            return config[key] = userConfig[key];\n          });\n        }\n\n        function spring(animation, now) {\n          var toValue = animation.toValue,\n              lastTimestamp = animation.lastTimestamp,\n              current = animation.current,\n              velocity = animation.velocity;\n          var deltaTime = Math.min(now - lastTimestamp, 64);\n          animation.lastTimestamp = now;\n          var c = config.damping;\n          var m = config.mass;\n          var k = config.stiffness;\n          var v0 = -velocity;\n          var x0 = toValue - current;\n          var zeta = c / (2 * Math.sqrt(k * m));\n          var omega0 = Math.sqrt(k / m);\n          var omega1 = omega0 * Math.sqrt(1 - Math.pow(zeta, 2));\n          var t = deltaTime / 1000;\n          var sin1 = Math.sin(omega1 * t);\n          var cos1 = Math.cos(omega1 * t);\n          var underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n          var underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n          var underDampedPosition = toValue - underDampedFrag1;\n          var underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n          var criticallyDampedEnvelope = Math.exp(-omega0 * t);\n          var criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n          var criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n\n          var isOvershooting = function isOvershooting() {\n            if (config.overshootClamping && config.stiffness !== 0) {\n              return current < toValue ? animation.current > toValue : animation.current < toValue;\n            } else {\n              return false;\n            }\n          };\n\n          var isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n          var isDisplacement = config.stiffness === 0 || Math.abs(toValue - current) < config.restDisplacementThreshold;\n\n          if (zeta < 1) {\n            animation.current = underDampedPosition;\n            animation.velocity = underDampedVelocity;\n          } else {\n            animation.current = criticallyDampedPosition;\n            animation.velocity = criticallyDampedVelocity;\n          }\n\n          if (isOvershooting() || isVelocity && isDisplacement) {\n            if (config.stiffness !== 0) {\n              animation.velocity = 0;\n              animation.current = toValue;\n            }\n\n            animation.lastTimestamp = 0;\n            return true;\n          }\n\n          return false;\n        }\n\n        function onStart(animation, value, now, previousAnimation) {\n          animation.current = value;\n\n          if (previousAnimation) {\n            animation.velocity = previousAnimation.velocity || animation.velocity || 0;\n            animation.lastTimestamp = previousAnimation.lastTimestamp || now;\n          } else {\n            animation.lastTimestamp = now;\n          }\n        }\n\n        return {\n          onFrame: spring,\n          onStart: onStart,\n          toValue: toValue,\n          velocity: config.velocity || 0,\n          current: toValue,\n          callback: callback,\n          lastTimestamp: 0\n        };\n      };\n\n      _f._closure = {\n        userConfig: userConfig,\n        toValue: toValue,\n        callback: callback\n      };\n      _f.asString = \"function _f(){const{userConfig,toValue,callback}=jsThis._closure;{const config={damping:10,mass:1,stiffness:100,overshootClamping:false,restDisplacementThreshold:0.01,restSpeedThreshold:2,velocity:0};if(userConfig){Object.keys(userConfig).forEach(function(key){return config[key]=userConfig[key];});}function spring(animation,now){const{toValue:toValue,lastTimestamp:lastTimestamp,current:current,velocity:velocity}=animation;const deltaTime=Math.min(now-lastTimestamp,64);animation.lastTimestamp=now;const c=config.damping;const m=config.mass;const k=config.stiffness;const v0=-velocity;const x0=toValue-current;const zeta=c/(2*Math.sqrt(k*m));const omega0=Math.sqrt(k/m);const omega1=omega0*Math.sqrt(1-Math.pow(zeta,2));const t=deltaTime/1000;const sin1=Math.sin(omega1*t);const cos1=Math.cos(omega1*t);const underDampedEnvelope=Math.exp(-zeta*omega0*t);const underDampedFrag1=underDampedEnvelope*(sin1*((v0+zeta*omega0*x0)/omega1)+x0*cos1);const underDampedPosition=toValue-underDampedFrag1;const underDampedVelocity=zeta*omega0*underDampedFrag1-underDampedEnvelope*(cos1*(v0+zeta*omega0*x0)-omega1*x0*sin1);const criticallyDampedEnvelope=Math.exp(-omega0*t);const criticallyDampedPosition=toValue-criticallyDampedEnvelope*(x0+(v0+omega0*x0)*t);const criticallyDampedVelocity=criticallyDampedEnvelope*(v0*(t*omega0-1)+t*x0*omega0*omega0);const isOvershooting=function(){if(config.overshootClamping&&config.stiffness!==0){return current<toValue?animation.current>toValue:animation.current<toValue;}else{return false;}};const isVelocity=Math.abs(velocity)<config.restSpeedThreshold;const isDisplacement=config.stiffness===0||Math.abs(toValue-current)<config.restDisplacementThreshold;if(zeta<1){animation.current=underDampedPosition;animation.velocity=underDampedVelocity;}else{animation.current=criticallyDampedPosition;animation.velocity=criticallyDampedVelocity;}if(isOvershooting()||isVelocity&&isDisplacement){if(config.stiffness!==0){animation.velocity=0;animation.current=toValue;}animation.lastTimestamp=0;return true;}return false;}function onStart(animation,value,now,previousAnimation){animation.current=value;if(previousAnimation){animation.velocity=previousAnimation.velocity||animation.velocity||0;animation.lastTimestamp=previousAnimation.lastTimestamp||now;}else{animation.lastTimestamp=now;}}return{onFrame:spring,onStart:onStart,toValue:toValue,velocity:config.velocity||0,current:toValue,callback:callback,lastTimestamp:0};}}\";\n      _f.__workletHash = 10304282789636;\n      _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/animation/spring.js (4:36)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }());\n  };\n\n  _f._closure = {\n    defineAnimation: defineAnimation\n  };\n  _f.asString = \"function withSpring(toValue,userConfig,callback){const{defineAnimation}=jsThis._closure;{return defineAnimation(toValue,function(){'worklet';const config={damping:10,mass:1,stiffness:100,overshootClamping:false,restDisplacementThreshold:0.01,restSpeedThreshold:2,velocity:0};if(userConfig){Object.keys(userConfig).forEach(function(key){return config[key]=userConfig[key];});}function spring(animation,now){const{toValue:toValue,lastTimestamp:lastTimestamp,current:current,velocity:velocity}=animation;const deltaTime=Math.min(now-lastTimestamp,64);animation.lastTimestamp=now;const c=config.damping;const m=config.mass;const k=config.stiffness;const v0=-velocity;const x0=toValue-current;const zeta=c/(2*Math.sqrt(k*m));const omega0=Math.sqrt(k/m);const omega1=omega0*Math.sqrt(1-Math.pow(zeta,2));const t=deltaTime/1000;const sin1=Math.sin(omega1*t);const cos1=Math.cos(omega1*t);const underDampedEnvelope=Math.exp(-zeta*omega0*t);const underDampedFrag1=underDampedEnvelope*(sin1*((v0+zeta*omega0*x0)/omega1)+x0*cos1);const underDampedPosition=toValue-underDampedFrag1;const underDampedVelocity=zeta*omega0*underDampedFrag1-underDampedEnvelope*(cos1*(v0+zeta*omega0*x0)-omega1*x0*sin1);const criticallyDampedEnvelope=Math.exp(-omega0*t);const criticallyDampedPosition=toValue-criticallyDampedEnvelope*(x0+(v0+omega0*x0)*t);const criticallyDampedVelocity=criticallyDampedEnvelope*(v0*(t*omega0-1)+t*x0*omega0*omega0);const isOvershooting=function(){if(config.overshootClamping&&config.stiffness!==0){return current<toValue?animation.current>toValue:animation.current<toValue;}else{return false;}};const isVelocity=Math.abs(velocity)<config.restSpeedThreshold;const isDisplacement=config.stiffness===0||Math.abs(toValue-current)<config.restDisplacementThreshold;if(zeta<1){animation.current=underDampedPosition;animation.velocity=underDampedVelocity;}else{animation.current=criticallyDampedPosition;animation.velocity=criticallyDampedVelocity;}if(isOvershooting()||isVelocity&&isDisplacement){if(config.stiffness!==0){animation.velocity=0;animation.current=toValue;}animation.lastTimestamp=0;return true;}return false;}function onStart(animation,value,now,previousAnimation){animation.current=value;if(previousAnimation){animation.velocity=previousAnimation.velocity||animation.velocity||0;animation.lastTimestamp=previousAnimation.lastTimestamp||now;}else{animation.lastTimestamp=now;}}return{onFrame:spring,onStart:onStart,toValue:toValue,velocity:config.velocity||0,current:toValue,callback:callback,lastTimestamp:0};});}}\";\n  _f.__workletHash = 12872610892704;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/animation/spring.js (2:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/animation/spring.js"],"names":["defineAnimation","withSpring","toValue","userConfig","callback","config","damping","mass","stiffness","overshootClamping","restDisplacementThreshold","restSpeedThreshold","velocity","Object","keys","forEach","key","spring","animation","now","lastTimestamp","current","deltaTime","Math","min","c","m","k","v0","x0","zeta","sqrt","omega0","omega1","pow","t","sin1","sin","cos1","cos","underDampedEnvelope","exp","underDampedFrag1","underDampedPosition","underDampedVelocity","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","isOvershooting","isVelocity","abs","isDisplacement","onStart","value","previousAnimation","onFrame"],"mappings":"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","sourcesContent":["import { defineAnimation } from './util';\nexport function withSpring(toValue, userConfig, callback) {\n    'worklet';\n    return defineAnimation(toValue, () => {\n        'worklet';\n        // TODO: figure out why we can't use spread or Object.assign here\n        // when user config is \"frozen object\" we can't enumerate it (perhaps\n        // something is wrong with the object prototype).\n        const config = {\n            damping: 10,\n            mass: 1,\n            stiffness: 100,\n            overshootClamping: false,\n            restDisplacementThreshold: 0.01,\n            restSpeedThreshold: 2,\n            velocity: 0,\n        };\n        if (userConfig) {\n            Object.keys(userConfig).forEach((key) => (config[key] = userConfig[key]));\n        }\n        function spring(animation, now) {\n            const { toValue, lastTimestamp, current, velocity } = animation;\n            const deltaTime = Math.min(now - lastTimestamp, 64);\n            animation.lastTimestamp = now;\n            const c = config.damping;\n            const m = config.mass;\n            const k = config.stiffness;\n            const v0 = -velocity;\n            const x0 = toValue - current;\n            const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n            const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n            const omega1 = omega0 * Math.sqrt(1 - Math.pow(zeta, 2)); // exponential decay\n            const t = deltaTime / 1000;\n            const sin1 = Math.sin(omega1 * t);\n            const cos1 = Math.cos(omega1 * t);\n            // under damped\n            const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n            const underDampedFrag1 = underDampedEnvelope *\n                (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n            const underDampedPosition = toValue - underDampedFrag1;\n            // This looks crazy -- it's actually just the derivative of the oscillation function\n            const underDampedVelocity = zeta * omega0 * underDampedFrag1 -\n                underDampedEnvelope *\n                    (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n            // critically damped\n            const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n            const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n            const criticallyDampedVelocity = criticallyDampedEnvelope *\n                (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n            const isOvershooting = () => {\n                if (config.overshootClamping && config.stiffness !== 0) {\n                    return current < toValue\n                        ? animation.current > toValue\n                        : animation.current < toValue;\n                }\n                else {\n                    return false;\n                }\n            };\n            const isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n            const isDisplacement = config.stiffness === 0 ||\n                Math.abs(toValue - current) < config.restDisplacementThreshold;\n            if (zeta < 1) {\n                animation.current = underDampedPosition;\n                animation.velocity = underDampedVelocity;\n            }\n            else {\n                animation.current = criticallyDampedPosition;\n                animation.velocity = criticallyDampedVelocity;\n            }\n            if (isOvershooting() || (isVelocity && isDisplacement)) {\n                if (config.stiffness !== 0) {\n                    animation.velocity = 0;\n                    animation.current = toValue;\n                }\n                // clear lastTimestamp to avoid using stale value by the next spring animation that starts after this one\n                animation.lastTimestamp = 0;\n                return true;\n            }\n            return false;\n        }\n        function onStart(animation, value, now, previousAnimation) {\n            animation.current = value;\n            if (previousAnimation) {\n                animation.velocity =\n                    previousAnimation.velocity || animation.velocity || 0;\n                animation.lastTimestamp = previousAnimation.lastTimestamp || now;\n            }\n            else {\n                animation.lastTimestamp = now;\n            }\n        }\n        return {\n            onFrame: spring,\n            onStart,\n            toValue,\n            velocity: config.velocity || 0,\n            current: toValue,\n            callback,\n            lastTimestamp: 0,\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module"}