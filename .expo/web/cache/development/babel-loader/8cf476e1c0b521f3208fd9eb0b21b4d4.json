{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoFirebaseAnalytics from \"./ExpoFirebaseAnalytics\";\nexport { default as FirebaseAnalyticsJS } from \"./FirebaseAnalyticsJS\";\n\nif (!ExpoFirebaseAnalytics) {\n  console.warn(\"No native ExpoFirebaseAnalytics module found, are you sure the expo-firebase-analytics's module is linked properly?\");\n}\n\nexport function logEvent(name, properties) {\n  return _regeneratorRuntime.async(function logEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.logEvent) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'logEvent');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.logEvent(name, properties));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setAnalyticsCollectionEnabled(isEnabled) {\n  return _regeneratorRuntime.async(function setAnalyticsCollectionEnabled$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setAnalyticsCollectionEnabled');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled(isEnabled));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar hasWarnedAboutSetCurrentScreen = false;\nexport function setCurrentScreen(screenName, screenClassOverride) {\n  return _regeneratorRuntime.async(function setCurrentScreen$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!hasWarnedAboutSetCurrentScreen) {\n            console.warn(\"`FirebaseAnalytics.setCurrentScreen` is deprecated. Use `logEvent('screen_view', { screen_name: 'MyScreen', ... })` instead. This API will be removed in SDK 45.\");\n            hasWarnedAboutSetCurrentScreen = true;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(logEvent('screen_view', screenClassOverride ? {\n            screen_name: screenName,\n            screen_class: screenClassOverride\n          } : {\n            screen_name: screenName\n          }));\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setSessionTimeoutDuration(sessionTimeoutInterval) {\n  return _regeneratorRuntime.async(function setSessionTimeoutDuration$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setSessionTimeoutDuration) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setSessionTimeoutDuration');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setSessionTimeoutDuration(sessionTimeoutInterval));\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUserId(userId) {\n  return _regeneratorRuntime.async(function setUserId$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setUserId) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setUserId');\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setUserId(userId));\n\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUserProperty(name, value) {\n  return _regeneratorRuntime.async(function setUserProperty$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(setUserProperties(_defineProperty({}, name, value)));\n\n        case 2:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function resetAnalyticsData() {\n  return _regeneratorRuntime.async(function resetAnalyticsData$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.resetAnalyticsData) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'resetAnalyticsData');\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.resetAnalyticsData());\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUserProperties(properties) {\n  return _regeneratorRuntime.async(function setUserProperties$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setUserProperties) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setUserProperties');\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setUserProperties(properties));\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUnavailabilityLogging(isEnabled) {\n  if (!ExpoFirebaseAnalytics.setUnavailabilityLogging) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUnavailabilityLogging');\n  }\n\n  ExpoFirebaseAnalytics.setUnavailabilityLogging(isEnabled);\n}\nexport function setClientId(clientId) {\n  if (!ExpoFirebaseAnalytics.setClientId) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setClientId');\n  }\n\n  ExpoFirebaseAnalytics.setClientId(clientId);\n}\nexport function setDebugModeEnabled(isEnabled) {\n  return _regeneratorRuntime.async(function setDebugModeEnabled$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setDebugModeEnabled) {\n            _context9.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setDebugModeEnabled');\n\n        case 2:\n          _context9.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setDebugModeEnabled(isEnabled));\n\n        case 4:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Analytics.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFirebaseAnalytics from './ExpoFirebaseAnalytics';\nexport { default as FirebaseAnalyticsJS } from './FirebaseAnalyticsJS';\n\nif (!ExpoFirebaseAnalytics) {\n  console.warn(\n    \"No native ExpoFirebaseAnalytics module found, are you sure the expo-firebase-analytics's module is linked properly?\"\n  );\n}\n\n// @needsAudit\n/**\n * Logs an app event. The event can have up to 25 parameters. Events with the same name must have\n * the same parameters. Up to 500 event names are supported. Using predefined events and/or\n * parameters is recommended for optimal reporting. See [the Google Analytics event reference](https://developers.google.com/gtagjs/reference/event)\n * for a list of all predefined events.\n *\n * > The following event names are reserved for the native SDKs automatic collection and cannot be used: `ad_activeview, ad_click, ad_exposure, ad_query, ad_reward, adunit_exposure, app_background, app_clear_data, app_exception, app_remove, app_store_refund, app_store_subscription_cancel, ad_activeview, ad_click, ad_exposure, ad_query, ad_reward, adunit_exposure, app_background, app_clear_data, app_exception, app_remove, app_store_refund, app_store_subscription_cancel, app_store_subscription_convert, app_store_subscription_renew, app_update, app_upgrade, dynamic_link_app_open, dynamic_link_app_update, dynamic_link_first_open, error, firebase_campaign, first_open, first_visit, in_app_purchase, notification_dismiss, notification_foreground, notification_open, notification_receive, os_update, session_start, session_start_with_rollout, user_engagement`\n *\n * @example\n * ```ts\n * await Analytics.logEvent('add_to_cart', {\n *   currency: 'USD',\n *   value: 29.98\n *   items: [{\n *     id: \"P12345\",\n *     name: \"Expo Warhol T-Shirt\",\n *     brand: \"Expo\",\n *     category: \"Apparel/T-Shirts\",\n *     coupon: \"SUMMER_DISCOUNT\",\n *     list_name: \"Search Results\",\n *     list_position: 1,\n *     price: 14.99,\n *     quantity: 2,\n *     variant: \"Blue\"\n *   }]\n * });\n * ```\n *\n * @param name The name of the event. Should contain 1 to 40 alphanumeric characters or underscores.\n * The name must start with an alphabetic character. Some event names are  reserved. The `firebase_`,\n * `google_`, and `ga_` prefixes are reserved and should not be used. Note that event names are\n * case-sensitive and that logging two events whose names differ only in case will result in two\n * distinct events. To manually log screen view events, use the `screen_view` event name.\n * @param properties The dictionary of event parameters. Passing `undefined` indicates that the\n * event has no parameters. Parameter names can be up to 40 characters long and must start with an\n * alphabetic character and contain only alphanumeric characters and underscores. Only `String` and\n * `Number` parameter types are supported; and `items` arrays containing dictionaries.\n * `String` parameter values can be up to 100 characters long. The `firebase_`,  `google_`, and\n * `ga_` prefixes are reserved and should not be used for parameter names.\n */\nexport async function logEvent(name: string, properties?: Record<string, any>): Promise<void> {\n  if (!ExpoFirebaseAnalytics.logEvent) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'logEvent');\n  }\n  return await ExpoFirebaseAnalytics.logEvent(name, properties);\n}\n\n// @needsAudit\n/**\n * Sets whether analytics collection is enabled for this app on this device. This setting is\n * persisted across app sessions. __By default it is enabled__.\n *\n * @param isEnabled A flag that enables or disables Analytics collection.\n */\nexport async function setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setAnalyticsCollectionEnabled');\n  }\n  return await ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled(isEnabled);\n}\n\nlet hasWarnedAboutSetCurrentScreen = false;\n// @needsAudit\n/**\n * Sets the current screen name, which specifies the current visual context in your app. This helps\n * identify the areas in your app where users spend their time and how they interact with your app.\n *\n * @deprecated __Deprecated.__ Use [`logEvent('screen_view', { screen_name: 'MyScreen', ... })`](#logevent)\n * instead. This API will be removed in SDK 45.\n *\n * @param screenName The name of the current screen. Should contain 1 to 100 characters. Set to\n * `undefined` to clear the current screen name.\n * @param screenClassOverride The name of the screen class. Should contain 1 to 100 characters. By\n * default this is the class name of the current screen (UIViewController on iOS). Set to\n * `undefined` to revert to the default class name.\n */\nexport async function setCurrentScreen(\n  screenName?: string,\n  screenClassOverride?: string\n): Promise<void> {\n  if (!hasWarnedAboutSetCurrentScreen) {\n    console.warn(\n      \"`FirebaseAnalytics.setCurrentScreen` is deprecated. Use `logEvent('screen_view', { screen_name: 'MyScreen', ... })` instead. This API will be removed in SDK 45.\"\n    );\n    hasWarnedAboutSetCurrentScreen = true;\n  }\n  return await logEvent(\n    'screen_view',\n    screenClassOverride\n      ? {\n          screen_name: screenName,\n          screen_class: screenClassOverride,\n        }\n      : {\n          screen_name: screenName,\n        }\n  );\n}\n\n// @needsAudit\n/**\n * Sets the interval of inactivity in seconds that terminates the current session. The default\n * value is 1800000 milliseconds (30 minutes).\n *\n * > Setting the session timeout only applies to the native iOS and Android SDKs. Calling this\n * > method does nothing on Expo Go or web.\n *\n * @param sessionTimeoutInterval The custom time of inactivity in milliseconds before the current\n * session terminates.\n */\nexport async function setSessionTimeoutDuration(sessionTimeoutInterval: number): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setSessionTimeoutDuration) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setSessionTimeoutDuration');\n  }\n  return await ExpoFirebaseAnalytics.setSessionTimeoutDuration(sessionTimeoutInterval);\n}\n\n// @needsAudit\n/**\n * Sets the user ID property. This feature must be used in accordance with [Google's Privacy Policy](https://www.google.com/policies/privacy)\n *\n * @param userId The user ID to ascribe to the user of this app on this device, which must be\n * non-empty and no more than 256 characters long. Setting userID to null removes the user ID.\n */\nexport async function setUserId(userId: string | null): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserId) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserId');\n  }\n  return await ExpoFirebaseAnalytics.setUserId(userId);\n}\n\n// @needsAudit\n/**\n * Sets a user property to a given value. Up to 25 user property names are supported. Once set,\n * user property values persist throughout the app life-cycle and across sessions.\n *\n * The following user property names are reserved and cannot be used:\n * - `first_open_time`\n * - `last_deep_link_referrer`\n * - `user_id`\n *\n * @example\n * ```ts\n * await Analytics.setUserProperty('favorite_batmobile', '1989 Burton-mobile');\n * ```\n *\n * @param name The name of the user property to set. Should contain 1 to 24 alphanumeric characters\n * or underscores and must start with an alphabetic character. The `firebase_`, `google_`, and\n * `ga_` prefixes are reserved and should not be used for user property names.\n * @param value The value of the user property. Values can be up to 36 characters long. Setting the\n * value to null removes the user property.\n */\nexport async function setUserProperty(name: string, value: string | null): Promise<void> {\n  return await setUserProperties({ [name]: value });\n}\n\n// @needsAudit\n/**\n * Clears all analytics data for this instance from the device and resets the app instance ID.\n */\nexport async function resetAnalyticsData(): Promise<void> {\n  if (!ExpoFirebaseAnalytics.resetAnalyticsData) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'resetAnalyticsData');\n  }\n  return await ExpoFirebaseAnalytics.resetAnalyticsData();\n}\n\n// @needsAudit\n/**\n * Sets multiple user properties to the supplied values.\n *\n * @example\n * ```ts\n * await Analytics.setUserProperties({\n *   loves_expo: 'a lot',\n * });\n * ```\n *\n * @param properties Key/value set of user properties. Values can be up to 36 characters long.\n * Setting the value to null removes the user property.\n */\nexport async function setUserProperties(properties: Record<string, string | null>): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserProperties) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserProperties');\n  }\n  return await ExpoFirebaseAnalytics.setUserProperties(properties);\n}\n\n// @needsAudit\n/**\n * Enables or disables the warning and log messages when using Firebase Analytics on the Expo client.\n *\n * Firebase Analytics is not available on the Expo client and therefore logs the requests to the\n * console for development purposes. To test Firebase Analytics, create a standalone build or custom\n * client. Use this function to suppress the warning and log messages.\n *\n * @param isEnabled A flag that enables or disables unavailability logging.\n */\nexport function setUnavailabilityLogging(isEnabled: boolean): void {\n  if (!ExpoFirebaseAnalytics.setUnavailabilityLogging) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUnavailabilityLogging');\n  }\n  ExpoFirebaseAnalytics.setUnavailabilityLogging(isEnabled);\n}\n\n// @needsAudit\n/**\n * Sets the clientId to the given value. For best results, set this value before\n * calling any other functions on this module.\n *\n * By default, the clientId is set to `Constants.installationId` in Expo Go, which is deprecated and\n * will be removed in SDK 44. At that time, this method will need to be used to set the `clientId`\n * when using Expo Go.\n *\n * @param clientId UUIDv4 string value to set for the current session in Expo Go.\n * @platform expo\n */\nexport function setClientId(clientId: string): void {\n  if (!ExpoFirebaseAnalytics.setClientId) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setClientId');\n  }\n  ExpoFirebaseAnalytics.setClientId(clientId);\n}\n\n/**\n * Enables or disabled debug mode on the Expo client, so events can\n * be tracked using the [DebugView in the Analytics dashboard](https://firebase.google.com/docs/analytics/debugview#reporting).\n *\n * This option is only available in Expo Go. When using a custom development app, a standalone app,\n * the bare workflow or web, use the [natively available options](https://firebase.google.com/docs/analytics/debugview).\n *\n * @param isEnabled A flag that enables or disables debug mode.\n * @platform expo\n */\nexport async function setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setDebugModeEnabled) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setDebugModeEnabled');\n  }\n  return await ExpoFirebaseAnalytics.setDebugModeEnabled(isEnabled);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}