{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isChromeDebugger } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nexport var measure = function () {\n  var _f = function _f(animatedRef) {\n    if (!_WORKLET && !isChromeDebugger()) {\n      throw new Error('(measure) method cannot be used on RN side!');\n    }\n\n    var viewTag = animatedRef();\n\n    var result = _measure(viewTag);\n\n    if (result.x === -1234567) {\n      throw new Error(\"The view with tag \" + viewTag + \" could not be measured\");\n    }\n\n    return result;\n  };\n\n  _f._closure = {\n    isChromeDebugger: isChromeDebugger\n  };\n  _f.asString = \"function measure(animatedRef){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){throw new Error('(measure) method cannot be used on RN side!');}const viewTag=animatedRef();const result=_measure(viewTag);if(result.x===-1234567){throw new Error(\\\"The view with tag \\\"+viewTag+\\\" could not be measured\\\");}return result;}}\";\n  _f.__workletHash = 7743315869169;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (6:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var scrollTo = function () {\n  var _f = function _f(animatedRef, x, y, animated) {\n    if (!_WORKLET && !isChromeDebugger()) {\n      return;\n    }\n\n    var viewTag = animatedRef();\n\n    _scrollTo(viewTag, x, y, animated);\n  };\n\n  _f._closure = {\n    isChromeDebugger: isChromeDebugger\n  };\n  _f.asString = \"function scrollTo(animatedRef,x,y,animated){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}}\";\n  _f.__workletHash = 13469410603586;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (18:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET && !isChromeDebugger()) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    }\n\n    _setGestureState(handlerTag, newState);\n  };\n\n  _f._closure = {\n    isChromeDebugger: isChromeDebugger\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 13583934599272;\n  _f.__location = \"/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (26:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"names":["isChromeDebugger","getTag","view","findNodeHandle","measure","animatedRef","_WORKLET","Error","viewTag","result","_measure","x","scrollTo","y","animated","_scrollTo","setGestureState","handlerTag","newState","console","warn","_setGestureState"],"mappings":";AACA,SAASA,gBAAT;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACzB,SAAOC,cAAc,CAACD,IAAD,CAArB;AACH;AACD,WAAgBE,OAAhB;AAAA,uBAAwBC,WAAxB,EAAqC;AAEjC,QAAI,CAACC,QAAD,IAAa,CAACN,gBAAgB,EAAlC,EAAsC;AAClC,YAAM,IAAIO,KAAJ,CAAU,6CAAV,CAAN;AACH;;AACD,QAAMC,OAAO,GAAGH,WAAW,EAA3B;;AACA,QAAMI,MAAM,GAAGC,QAAQ,CAACF,OAAD,CAAvB;;AACA,QAAIC,MAAM,CAACE,CAAP,KAAa,CAAC,OAAlB,EAA2B;AACvB,YAAM,IAAIJ,KAAJ,wBAA+BC,OAA/B,4BAAN;AACH;;AACD,WAAOC,MAAP;AACH,GAXD;;AAAA;AAAA,sBAHoBT;AAGpB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAYA,WAAgBY,QAAhB;AAAA,uBAAyBP,WAAzB,EAAsCM,CAAtC,EAAyCE,CAAzC,EAA4CC,QAA5C,EAAsD;AAElD,QAAI,CAACR,QAAD,IAAa,CAACN,gBAAgB,EAAlC,EAAsC;AAClC;AACH;;AACD,QAAMQ,OAAO,GAAGH,WAAW,EAA3B;;AACAU,IAAAA,SAAS,CAACP,OAAD,EAAUG,CAAV,EAAaE,CAAb,EAAgBC,QAAhB,CAAT;AACH,GAPD;;AAAA;AAAA,sBAfoBd;AAepB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAQA,WAAgBgB,eAAhB;AAAA,uBAAgCC,UAAhC,EAA4CC,QAA5C,EAAsD;AAElD,QAAI,CAACZ,QAAD,IAAa,CAACN,gBAAgB,EAAlC,EAAsC;AAClCmB,MAAAA,OAAO,CAACC,IAAR,CAAa,uEAAb;AACH;;AACDC,IAAAA,gBAAgB,CAACJ,UAAD,EAAaC,QAAb,CAAhB;AACH,GAND;;AAAA;AAAA,sBAvBoBlB;AAuBpB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA","sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nexport function measure(animatedRef) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        throw new Error('(measure) method cannot be used on RN side!');\n    }\n    const viewTag = animatedRef();\n    const result = _measure(viewTag);\n    if (result.x === -1234567) {\n        throw new Error(`The view with tag ${viewTag} could not be measured`);\n    }\n    return result;\n}\nexport function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        return;\n    }\n    const viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    }\n    _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"module"}