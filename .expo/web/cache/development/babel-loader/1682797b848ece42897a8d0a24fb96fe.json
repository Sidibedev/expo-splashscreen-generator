{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar FirebaseAnalyticsJS = function () {\n  function FirebaseAnalyticsJS(config, options) {\n    _classCallCheck(this, FirebaseAnalyticsJS);\n\n    this.eventQueue = new Set();\n    this.flushEventsPromise = Promise.resolve();\n    this.lastTime = -1;\n    this.sequenceNr = 1;\n    if (!config.measurementId) throw new Error('No valid measurementId. Make sure to provide a valid measurementId with a G-XXXXXXXXXX format.');\n    if (!options.clientId) throw new Error('No valid clientId. Make sure to provide a valid clientId with a UUID (v4) format.');\n    this.url = 'https://www.google-analytics.com/g/collect';\n    this.enabled = true;\n    this.config = config;\n    this.options = _objectSpread({\n      customArgs: {},\n      maxCacheTime: 5000,\n      strictNativeEmulation: false,\n      origin: 'firebase'\n    }, options);\n  }\n\n  _createClass(FirebaseAnalyticsJS, [{\n    key: \"send\",\n    value: function send(events) {\n      var _this = this;\n\n      var config, options, queryArgs, body, lastTime, event, args, url;\n      return _regeneratorRuntime.async(function send$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              config = this.config, options = this.options;\n              queryArgs = _objectSpread(_objectSpread({}, options.customArgs), {}, {\n                v: 2,\n                tid: config.measurementId,\n                cid: options.clientId,\n                sid: options.sessionId,\n                _s: this.sequenceNr++,\n                seg: 1\n              });\n              if (options.sessionNumber) queryArgs.sct = options.sessionNumber;\n              if (options.userLanguage) queryArgs.ul = options.userLanguage;\n              if (options.appName) queryArgs.an = options.appName;\n              if (options.appVersion) queryArgs.av = options.appVersion;\n              if (options.docTitle) queryArgs.dt = options.docTitle;\n              if (options.docLocation) queryArgs.dl = options.docLocation;\n              if (options.screenRes) queryArgs.sr = options.screenRes;\n              if (options.debug) queryArgs._dbg = 1;\n              if (this.sequenceNr === 2) queryArgs._ss = 1;\n              lastTime = this.lastTime;\n\n              if (events.size > 1) {\n                body = '';\n                events.forEach(function (event) {\n                  body += encodeQueryArgs(event, _this.lastTime) + '\\n';\n                  _this.lastTime = event._et;\n                });\n              } else if (events.size === 1) {\n                event = events.values().next().value;\n                this.lastTime = event._et;\n                queryArgs = _objectSpread(_objectSpread({}, event), queryArgs);\n              }\n\n              args = encodeQueryArgs(queryArgs, lastTime);\n              url = this.url + \"?\" + args;\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(fetch(url, {\n                method: 'POST',\n                mode: 'no-cors',\n                cache: 'no-cache',\n                headers: _objectSpread({\n                  'Content-Type': 'text/plain;charset=UTF-8'\n                }, options.headers || {}),\n                body: body\n              }));\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(event) {\n      var _this2 = this;\n\n      var userId, userProperties, options, name;\n      return _regeneratorRuntime.async(function addEvent$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              userId = this.userId, userProperties = this.userProperties, options = this.options;\n              if (userId) event.uid = userId;\n\n              if (userProperties) {\n                for (name in userProperties) {\n                  event[name] = userProperties[name];\n                }\n\n                this.userProperties = undefined;\n              }\n\n              this.eventQueue.add(event);\n\n              if (!this.flushEventsTimer) {\n                this.flushEventsTimer = setTimeout(function _callee() {\n                  return _regeneratorRuntime.async(function _callee$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _this2.flushEventsTimer = undefined;\n                          _context2.prev = 1;\n                          _context2.next = 4;\n                          return _regeneratorRuntime.awrap(_this2.flushEventsPromise);\n\n                        case 4:\n                          _context2.next = 8;\n                          break;\n\n                        case 6:\n                          _context2.prev = 6;\n                          _context2.t0 = _context2[\"catch\"](1);\n\n                        case 8:\n                          _this2.flushEventsPromise = _this2.flushEvents();\n\n                        case 9:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, [[1, 6]], Promise);\n                }, options.debug ? 10 : options.maxCacheTime);\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"flushEvents\",\n    value: function flushEvents() {\n      var _this3 = this;\n\n      var events;\n      return _regeneratorRuntime.async(function flushEvents$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.eventQueue.size) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              events = new Set(this.eventQueue);\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(this.send(events));\n\n            case 5:\n              events.forEach(function (event) {\n                return _this3.eventQueue.delete(event);\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"clearEvents\",\n    value: function clearEvents() {\n      this.eventQueue.clear();\n\n      if (this.flushEventsTimer) {\n        clearTimeout(this.flushEventsTimer);\n        this.flushEventsTimer = 0;\n      }\n    }\n  }, {\n    key: \"logEvent\",\n    value: function logEvent(eventName, eventParams) {\n      var event;\n      return _regeneratorRuntime.async(function logEvent$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              event = FirebaseAnalyticsJS.parseEvent(this.options, eventName, eventParams);\n\n              if (this.enabled) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 3:\n              if (this.options.debug) {\n                console.log(\"FirebaseAnalytics event: \\\"\" + eventName + \"\\\", params: \" + JSON.stringify(eventParams, undefined, 2));\n              }\n\n              return _context5.abrupt(\"return\", this.addEvent(event));\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setAnalyticsCollectionEnabled\",\n    value: function setAnalyticsCollectionEnabled(isEnabled) {\n      return _regeneratorRuntime.async(function setAnalyticsCollectionEnabled$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              this.enabled = isEnabled;\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setSessionTimeoutDuration\",\n    value: function setSessionTimeoutDuration(_sessionTimeoutInterval) {\n      return _regeneratorRuntime.async(function setSessionTimeoutDuration$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"setUserId\",\n    value: function setUserId(userId) {\n      return _regeneratorRuntime.async(function setUserId$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this.enabled) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 2:\n              this.userId = userId || undefined;\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setUserProperties\",\n    value: function setUserProperties(userProperties) {\n      var name, val, key;\n      return _regeneratorRuntime.async(function setUserProperties$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (this.enabled) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\");\n\n            case 2:\n              for (name in userProperties) {\n                val = userProperties[name];\n                key = FirebaseAnalyticsJS.parseUserProperty(this.options, name, val);\n\n                if (val === null || val === undefined) {\n                  if (this.userProperties) {\n                    delete this.userProperties[key];\n                  }\n                } else {\n                  this.userProperties = this.userProperties || {};\n                  this.userProperties[key] = val;\n                }\n              }\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"resetAnalyticsData\",\n    value: function resetAnalyticsData() {\n      return _regeneratorRuntime.async(function resetAnalyticsData$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              this.clearEvents();\n              this.userId = undefined;\n              this.userProperties = undefined;\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setDebugModeEnabled\",\n    value: function setDebugModeEnabled(isEnabled) {\n      return _regeneratorRuntime.async(function setDebugModeEnabled$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              this.options.debug = isEnabled;\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setClientId\",\n    value: function setClientId(clientId) {\n      this.options.clientId = clientId;\n    }\n  }], [{\n    key: \"isValidName\",\n    value: function isValidName(name, maxLength) {\n      return !!(name && name.length && name.length <= maxLength && name.match(/^[A-Za-z][A-Za-z_\\d]*$/) && !name.startsWith('firebase_') && !name.startsWith('google_') && !name.startsWith('ga_'));\n    }\n  }, {\n    key: \"parseEvent\",\n    value: function parseEvent(options, eventName, eventParams) {\n      if (!FirebaseAnalyticsJS.isValidName(eventName, 40)) {\n        throw new Error(\"Invalid event-name (\" + eventName + \") specified. Should contain 1 to 40 alphanumeric characters or underscores. The name must start with an alphabetic character.\");\n      }\n\n      var params = {\n        en: eventName,\n        _et: Date.now(),\n        'ep.origin': options.origin\n      };\n\n      if (eventParams) {\n        for (var key in eventParams) {\n          if (key === 'items' && Array.isArray(eventParams[key])) {\n            eventParams[key].forEach(function (item, index) {\n              var itemFields = [];\n              var customItemFieldCount = 0;\n              Object.keys(item).forEach(function (itemKey) {\n                if (SHORT_EVENT_ITEM_PARAMS[itemKey]) {\n                  itemFields.push(\"\" + SHORT_EVENT_ITEM_PARAMS[itemKey] + item[itemKey]);\n                } else {\n                  itemFields.push(\"k\" + customItemFieldCount + itemKey);\n                  itemFields.push(\"v\" + customItemFieldCount + item[itemKey]);\n                  customItemFieldCount++;\n                }\n              });\n              params[\"pr\" + (index + 1)] = itemFields.join('~');\n            });\n          } else {\n            var paramKey = SHORT_EVENT_PARAMS[key] || (typeof eventParams[key] === 'number' ? \"epn.\" + key : \"ep.\" + key);\n            params[paramKey] = eventParams[key];\n          }\n        }\n      }\n\n      return params;\n    }\n  }, {\n    key: \"parseUserProperty\",\n    value: function parseUserProperty(options, userPropertyName, userPropertyValue) {\n      if (!FirebaseAnalyticsJS.isValidName(userPropertyName, 24) || userPropertyName === 'user_id') {\n        throw new Error(\"Invalid user-property name (\" + userPropertyName + \") specified. Should contain 1 to 24 alphanumeric characters or underscores. The name must start with an alphabetic character.\");\n      }\n\n      if (userPropertyValue !== undefined && userPropertyValue !== null && options.strictNativeEmulation && (typeof userPropertyValue !== 'string' || userPropertyValue.length > 36)) {\n        throw new Error('Invalid user-property value specified. Value should be a string of up to 36 characters long.');\n      }\n\n      return typeof userPropertyValue === 'number' ? \"upn.\" + userPropertyName : \"up.\" + userPropertyName;\n    }\n  }]);\n\n  return FirebaseAnalyticsJS;\n}();\n\nfunction encodeQueryArgs(queryArgs, lastTime) {\n  var keys = Object.keys(queryArgs);\n\n  if (lastTime < 0) {\n    keys = keys.filter(function (key) {\n      return key !== '_et';\n    });\n  }\n\n  return keys.map(function (key) {\n    return key + \"=\" + encodeURIComponent(key === '_et' ? Math.max(queryArgs[key] - lastTime, 0) : queryArgs[key]);\n  }).join('&');\n}\n\nvar SHORT_EVENT_PARAMS = {\n  currency: 'cu'\n};\nvar SHORT_EVENT_ITEM_PARAMS = {\n  id: 'id',\n  name: 'nm',\n  brand: 'br',\n  category: 'ca',\n  coupon: 'cp',\n  list: 'ln',\n  list_name: 'ln',\n  list_position: 'lp',\n  price: 'pr',\n  location_id: 'lo',\n  quantity: 'qt',\n  variant: 'va',\n  affiliation: 'af',\n  discount: 'ds'\n};\nexport default FirebaseAnalyticsJS;","map":{"version":3,"sources":["../src/FirebaseAnalyticsJS.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FirebaseAnalyticsJSCodedEvent,\n  FirebaseAnalyticsJSConfig,\n  FirebaseAnalyticsJSOptions,\n} from './FirebaseAnalyticsJS.types';\n\n/**\n * A pure JavaScript Google Firebase Analytics implementation that uses\n * the HTTPS Measurement API 2 to send events to Google Analytics.\n *\n * This class provides an alternative for the Firebase Analytics module\n * shipped with the Firebase JS SDK. That library uses the gtag.js dependency\n * and requires certain browser features. This prevents the use\n * analytics on other platforms, such as Node-js and react-native.\n *\n * FirebaseAnalyticsJS provides a bare-bone implementation of the new\n * HTTPS Measurement API 2 protocol (which is undocumented), with an API\n * that follows the Firebase Analytics JS SDK.\n */\nclass FirebaseAnalyticsJS {\n  public readonly url: string;\n  private enabled: boolean;\n  public readonly config: FirebaseAnalyticsJSConfig;\n  private userId?: string;\n  private userProperties?: { [key: string]: any };\n  private eventQueue = new Set<FirebaseAnalyticsJSCodedEvent>();\n  private options: FirebaseAnalyticsJSOptions;\n  private flushEventsPromise: Promise<void> = Promise.resolve();\n  private flushEventsTimer: any;\n  private lastTime: number = -1;\n  private sequenceNr: number = 1;\n\n  constructor(config: FirebaseAnalyticsJSConfig, options: FirebaseAnalyticsJSOptions) {\n    // Verify the measurement- & client Ids\n    if (!config.measurementId)\n      throw new Error(\n        'No valid measurementId. Make sure to provide a valid measurementId with a G-XXXXXXXXXX format.'\n      );\n    if (!options.clientId)\n      throw new Error(\n        'No valid clientId. Make sure to provide a valid clientId with a UUID (v4) format.'\n      );\n\n    // Initialize\n    this.url = 'https://www.google-analytics.com/g/collect';\n    this.enabled = true;\n    this.config = config;\n    this.options = {\n      customArgs: {},\n      maxCacheTime: 5000,\n      strictNativeEmulation: false,\n      origin: 'firebase',\n      ...options,\n    };\n  }\n\n  /**\n   * Sends 1 or more coded-events to the back-end.\n   * When only 1 event is provided, it is send inside the query URL.\n   * When more than 1 event is provided, the event-data is send in\n   * the body of the POST request.\n   */\n  private async send(events: Set<FirebaseAnalyticsJSCodedEvent>): Promise<void> {\n    const { config, options } = this;\n    let queryArgs: any = {\n      ...options.customArgs,\n      v: 2,\n      tid: config.measurementId,\n      cid: options.clientId,\n      sid: options.sessionId,\n      _s: this.sequenceNr++,\n      seg: 1,\n    };\n    if (options.sessionNumber) queryArgs.sct = options.sessionNumber;\n    if (options.userLanguage) queryArgs.ul = options.userLanguage;\n    if (options.appName) queryArgs.an = options.appName;\n    if (options.appVersion) queryArgs.av = options.appVersion;\n    if (options.docTitle) queryArgs.dt = options.docTitle;\n    if (options.docLocation) queryArgs.dl = options.docLocation;\n    if (options.screenRes) queryArgs.sr = options.screenRes;\n    if (options.debug) queryArgs._dbg = 1;\n    if (this.sequenceNr === 2) queryArgs._ss = 1; // Session start\n    let body;\n\n    const lastTime = this.lastTime;\n    if (events.size > 1) {\n      body = '';\n      events.forEach((event) => {\n        body += encodeQueryArgs(event, this.lastTime) + '\\n';\n        this.lastTime = event._et;\n      });\n    } else if (events.size === 1) {\n      const event = events.values().next().value;\n      this.lastTime = event._et;\n      queryArgs = {\n        ...event,\n        ...queryArgs,\n      };\n    }\n    const args = encodeQueryArgs(queryArgs, lastTime);\n    const url = `${this.url}?${args}`;\n    await fetch(url, {\n      method: 'POST',\n      mode: 'no-cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'text/plain;charset=UTF-8',\n        ...(options.headers || {}),\n      },\n      body,\n    });\n  }\n\n  private async addEvent(event: FirebaseAnalyticsJSCodedEvent) {\n    const { userId, userProperties, options } = this;\n\n    // Extend the event with the currently set User-id\n    if (userId) event.uid = userId;\n\n    // Add user-properties\n    if (userProperties) {\n      for (const name in userProperties) {\n        event[name] = userProperties[name];\n      }\n\n      // Reset user-properties after the first event. This is what gtag.js seems\n      // to do as well, although I couldn't find any docs explaining this behavior.\n      this.userProperties = undefined;\n    }\n\n    // Add the event to the queue\n    this.eventQueue.add(event);\n\n    // Start debounce timer\n    if (!this.flushEventsTimer) {\n      this.flushEventsTimer = setTimeout(\n        async () => {\n          this.flushEventsTimer = undefined;\n          try {\n            await this.flushEventsPromise;\n          } catch (err) {\n            // nop\n          }\n          this.flushEventsPromise = this.flushEvents();\n        },\n        options.debug ? 10 : options.maxCacheTime\n      );\n    }\n  }\n\n  private async flushEvents() {\n    if (!this.eventQueue.size) return;\n    const events = new Set<FirebaseAnalyticsJSCodedEvent>(this.eventQueue);\n    await this.send(events);\n    events.forEach((event) => this.eventQueue.delete(event));\n  }\n\n  /**\n   * Clears any queued events and cancels the flush timer.\n   */\n  clearEvents() {\n    this.eventQueue.clear();\n    if (this.flushEventsTimer) {\n      clearTimeout(this.flushEventsTimer);\n      this.flushEventsTimer = 0;\n    }\n  }\n\n  private static isValidName(name: string, maxLength: number): boolean {\n    return !!(\n      name &&\n      name.length &&\n      name.length <= maxLength &&\n      name.match(/^[A-Za-z][A-Za-z_\\d]*$/) &&\n      !name.startsWith('firebase_') &&\n      !name.startsWith('google_') &&\n      !name.startsWith('ga_')\n    );\n  }\n\n  /**\n   * Parses an event (as passed to logEvent) and throws an error when the\n   * event-name or parameters are invalid.\n   *\n   * Upon success, returns the event in encoded format, ready to be send\n   * through the Google Measurement API v2.\n   */\n  static parseEvent(\n    options: FirebaseAnalyticsJSOptions,\n    eventName: string,\n    eventParams?: { [key: string]: any }\n  ): FirebaseAnalyticsJSCodedEvent {\n    if (!FirebaseAnalyticsJS.isValidName(eventName, 40)) {\n      throw new Error(\n        `Invalid event-name (${eventName}) specified. Should contain 1 to 40 alphanumeric characters or underscores. The name must start with an alphabetic character.`\n      );\n    }\n    const params: FirebaseAnalyticsJSCodedEvent = {\n      en: eventName,\n      _et: Date.now(),\n      'ep.origin': options.origin,\n    };\n    if (eventParams) {\n      for (const key in eventParams) {\n        if (key === 'items' && Array.isArray(eventParams[key])) {\n          eventParams[key].forEach((item, index) => {\n            const itemFields: string[] = [];\n            let customItemFieldCount = 0;\n            Object.keys(item).forEach((itemKey) => {\n              if (SHORT_EVENT_ITEM_PARAMS[itemKey]) {\n                itemFields.push(`${SHORT_EVENT_ITEM_PARAMS[itemKey]}${item[itemKey]}`);\n              } else {\n                itemFields.push(`k${customItemFieldCount}${itemKey}`);\n                itemFields.push(`v${customItemFieldCount}${item[itemKey]}`);\n                customItemFieldCount++;\n              }\n            });\n            params[`pr${index + 1}`] = itemFields.join('~');\n          });\n        } else {\n          const paramKey =\n            SHORT_EVENT_PARAMS[key] ||\n            (typeof eventParams[key] === 'number' ? `epn.${key}` : `ep.${key}`);\n          params[paramKey] = eventParams[key];\n        }\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Parses user-properties (as passed to setUserProperties) and throws an error when\n   * one of the user properties is invalid.\n   *\n   * Upon success, returns the user-properties in encoded format, ready to be send\n   * through the Google Measurement API v2.\n   */\n  static parseUserProperty(\n    options: FirebaseAnalyticsJSOptions,\n    userPropertyName: string,\n    userPropertyValue: any\n  ): string {\n    if (!FirebaseAnalyticsJS.isValidName(userPropertyName, 24) || userPropertyName === 'user_id') {\n      throw new Error(\n        `Invalid user-property name (${userPropertyName}) specified. Should contain 1 to 24 alphanumeric characters or underscores. The name must start with an alphabetic character.`\n      );\n    }\n    if (\n      userPropertyValue !== undefined &&\n      userPropertyValue !== null &&\n      options.strictNativeEmulation &&\n      (typeof userPropertyValue !== 'string' || userPropertyValue.length > 36)\n    ) {\n      throw new Error(\n        'Invalid user-property value specified. Value should be a string of up to 36 characters long.'\n      );\n    }\n    return typeof userPropertyValue === 'number'\n      ? `upn.${userPropertyName}`\n      : `up.${userPropertyName}`;\n  }\n\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#log-event\n   */\n  async logEvent(eventName: string, eventParams?: { [key: string]: any }): Promise<void> {\n    const event = FirebaseAnalyticsJS.parseEvent(this.options, eventName, eventParams);\n    if (!this.enabled) return;\n    if (this.options.debug) {\n      console.log(\n        `FirebaseAnalytics event: \"${eventName}\", params: ${JSON.stringify(\n          eventParams,\n          undefined,\n          2\n        )}`\n      );\n    }\n    return this.addEvent(event);\n  }\n\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-analytics-collection-enabled\n   */\n  async setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n    this.enabled = isEnabled;\n  }\n\n  /**\n   * Not supported, this method is a no-op\n   */\n  async setSessionTimeoutDuration(_sessionTimeoutInterval: number): Promise<void> {\n    // no-op\n  }\n\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-id\n   */\n  async setUserId(userId: string | null): Promise<void> {\n    if (!this.enabled) return;\n    this.userId = userId || undefined;\n  }\n\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-properties\n   */\n  async setUserProperties(userProperties: { [key: string]: any }): Promise<void> {\n    if (!this.enabled) return;\n    for (const name in userProperties) {\n      const val = userProperties[name];\n      const key = FirebaseAnalyticsJS.parseUserProperty(this.options, name, val);\n      if (val === null || val === undefined) {\n        if (this.userProperties) {\n          delete this.userProperties[key];\n        }\n      } else {\n        this.userProperties = this.userProperties || {};\n        this.userProperties[key] = val;\n      }\n    }\n  }\n\n  /**\n   * Clears all analytics data for this instance.\n   */\n  async resetAnalyticsData() {\n    this.clearEvents();\n    this.userId = undefined;\n    this.userProperties = undefined;\n  }\n\n  /**\n   * Enables or disabled debug mode.\n   */\n  async setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n    this.options.debug = isEnabled;\n  }\n\n  /**\n   * Sets a new value for the client ID.\n   */\n  setClientId(clientId: string) {\n    this.options.clientId = clientId;\n  }\n}\n\nfunction encodeQueryArgs(queryArgs: FirebaseAnalyticsJSCodedEvent, lastTime: number): string {\n  let keys = Object.keys(queryArgs);\n  if (lastTime < 0) {\n    keys = keys.filter((key) => key !== '_et');\n  }\n  return keys\n    .map((key) => {\n      return `${key}=${encodeURIComponent(\n        key === '_et' ? Math.max(queryArgs[key] - lastTime, 0) : queryArgs[key]\n      )}`;\n    })\n    .join('&');\n}\n\nconst SHORT_EVENT_PARAMS = {\n  currency: 'cu',\n};\n\n// https://developers.google.com/gtagjs/reference/event\nconst SHORT_EVENT_ITEM_PARAMS = {\n  id: 'id',\n  name: 'nm',\n  brand: 'br',\n  category: 'ca',\n  coupon: 'cp',\n  list: 'ln', // deprecated, use `list_name` instead\n  list_name: 'ln',\n  list_position: 'lp',\n  price: 'pr',\n  location_id: 'lo',\n  quantity: 'qt',\n  variant: 'va',\n  affiliation: 'af',\n  discount: 'ds',\n};\n\nexport default FirebaseAnalyticsJS;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}