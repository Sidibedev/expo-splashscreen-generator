{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar styles = StyleSheet.create({\n  container: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    opacity: 0,\n    backgroundColor: 'transparent',\n    zIndex: 500\n  }),\n  containerVisible: {\n    opacity: 1\n  },\n  background: _objectSpread({}, StyleSheet.absoluteFillObject),\n  tooltip: {\n    backgroundColor: 'transparent',\n    position: 'absolute'\n  },\n  shadow: {\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowRadius: 2,\n    shadowOpacity: 0.8\n  },\n  content: {\n    borderRadius: 4,\n    padding: 8,\n    backgroundColor: '#fff',\n    overflow: 'hidden'\n  },\n  arrow: {\n    position: 'absolute',\n    borderTopColor: 'transparent',\n    borderRightColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderLeftColor: 'transparent'\n  }\n});\n\nvar arrowRotationForPlacement = function arrowRotationForPlacement(placement) {\n  switch (placement) {\n    case 'bottom':\n      return '180deg';\n\n    case 'left':\n      return '-90deg';\n\n    case 'right':\n      return '90deg';\n\n    default:\n      return '0deg';\n  }\n};\n\nvar arrowPlacementStyles = function arrowPlacementStyles(_ref) {\n  var anchorPoint = _ref.anchorPoint,\n      arrowSize = _ref.arrowSize,\n      placement = _ref.placement,\n      tooltipOrigin = _ref.tooltipOrigin;\n  var width = arrowSize.width + 2;\n  var height = arrowSize.height * 2 + 2;\n  var marginTop = 0;\n  var marginLeft = 0;\n\n  if (placement === 'bottom') {\n    marginTop = arrowSize.height;\n  } else if (placement === 'right') {\n    marginLeft = arrowSize.height;\n  }\n\n  return {\n    left: anchorPoint.x - tooltipOrigin.x - (width / 2 - marginLeft),\n    top: anchorPoint.y - tooltipOrigin.y - (height / 2 - marginTop),\n    width: width,\n    height: height,\n    borderTopWidth: height / 2,\n    borderRightWidth: width / 2,\n    borderBottomWidth: height / 2,\n    borderLeftWidth: width / 2\n  };\n};\n\nvar getArrowRotation = function getArrowRotation(arrowStyle, placement) {\n  var arrowRotation = arrowRotationForPlacement(placement);\n  var transform = (StyleSheet.flatten(arrowStyle).transform || []).slice(0);\n  transform.unshift({\n    rotate: arrowRotation\n  });\n  return {\n    transform: transform\n  };\n};\n\nvar tooltipPlacementStyles = function tooltipPlacementStyles(_ref2) {\n  var arrowSize = _ref2.arrowSize,\n      placement = _ref2.placement,\n      tooltipOrigin = _ref2.tooltipOrigin;\n  var height = arrowSize.height;\n\n  switch (placement) {\n    case 'bottom':\n      return {\n        paddingTop: height,\n        top: tooltipOrigin.y - height,\n        left: tooltipOrigin.x\n      };\n\n    case 'top':\n      return {\n        paddingBottom: height,\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x\n      };\n\n    case 'right':\n      return {\n        paddingLeft: height,\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x - height\n      };\n\n    case 'left':\n      return {\n        paddingRight: height,\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x\n      };\n\n    case 'center':\n    default:\n      return {\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x\n      };\n  }\n};\n\nvar styleGenerator = function styleGenerator(styleGeneratorProps) {\n  var adjustedContentSize = styleGeneratorProps.adjustedContentSize,\n      displayInsets = styleGeneratorProps.displayInsets,\n      measurementsFinished = styleGeneratorProps.measurementsFinished,\n      ownProps = styleGeneratorProps.ownProps,\n      placement = styleGeneratorProps.placement,\n      topAdjustment = styleGeneratorProps.topAdjustment;\n  var height = adjustedContentSize.height,\n      width = adjustedContentSize.width;\n  var backgroundColor = ownProps.backgroundColor;\n  var contentStyle = [styles.content, height > 0 && {\n    height: height\n  }, width > 0 && {\n    width: width\n  }, ownProps.contentStyle];\n  var contentBackgroundColor = StyleSheet.flatten(contentStyle).backgroundColor;\n  var arrowStyle = [styles.arrow, arrowPlacementStyles(styleGeneratorProps), {\n    borderTopColor: contentBackgroundColor\n  }, ownProps.arrowStyle];\n  return {\n    arrowStyle: [].concat(arrowStyle, [getArrowRotation(arrowStyle, placement)]),\n    backgroundStyle: [styles.background, ownProps.backgroundStyle, {\n      paddingTop: displayInsets.top,\n      paddingLeft: displayInsets.left,\n      paddingRight: displayInsets.right,\n      paddingBottom: displayInsets.bottom,\n      backgroundColor: backgroundColor\n    }],\n    containerStyle: [styles.container, StyleSheet.compose(adjustedContentSize.width !== 0 && measurementsFinished && styles.containerVisible, topAdjustment !== 0 && {\n      top: topAdjustment\n    })],\n    contentStyle: contentStyle,\n    tooltipStyle: [StyleSheet.compose(styles.tooltip, ownProps.disableShadow ? {} : styles.shadow), tooltipPlacementStyles(styleGeneratorProps), ownProps.tooltipStyle]\n  };\n};\n\nexport default styleGenerator;","map":{"version":3,"sources":["/Users/mas/Documents/perso/expo-splashscreen-generator/node_modules/react-native-walkthrough-tooltip/src/styles.js"],"names":["styles","StyleSheet","create","container","absoluteFillObject","opacity","backgroundColor","zIndex","containerVisible","background","tooltip","position","shadow","shadowColor","shadowOffset","width","height","shadowRadius","shadowOpacity","content","borderRadius","padding","overflow","arrow","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","arrowRotationForPlacement","placement","arrowPlacementStyles","anchorPoint","arrowSize","tooltipOrigin","marginTop","marginLeft","left","x","top","y","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","getArrowRotation","arrowStyle","arrowRotation","transform","flatten","slice","unshift","rotate","tooltipPlacementStyles","paddingTop","paddingBottom","paddingLeft","paddingRight","styleGenerator","styleGeneratorProps","adjustedContentSize","displayInsets","measurementsFinished","ownProps","topAdjustment","contentStyle","contentBackgroundColor","backgroundStyle","right","bottom","containerStyle","compose","tooltipStyle","disableShadow"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    opacity: 0,\n    backgroundColor: 'transparent',\n    zIndex: 500,\n  },\n  containerVisible: {\n    opacity: 1,\n  },\n  background: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  tooltip: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n  },\n  shadow: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowRadius: 2,\n    shadowOpacity: 0.8,\n  },\n  content: {\n    borderRadius: 4,\n    padding: 8,\n    backgroundColor: '#fff',\n    overflow: 'hidden',\n  },\n  arrow: {\n    position: 'absolute',\n    borderTopColor: 'transparent',\n    borderRightColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderLeftColor: 'transparent',\n  },\n});\n\nconst arrowRotationForPlacement = placement => {\n  switch (placement) {\n    case 'bottom':\n      return '180deg';\n    case 'left':\n      return '-90deg';\n    case 'right':\n      return '90deg';\n    default:\n      return '0deg';\n  }\n};\n\nconst arrowPlacementStyles = ({\n  anchorPoint,\n  arrowSize,\n  placement,\n  tooltipOrigin,\n}) => {\n  // Create the arrow from a rectangle with the appropriate borderXWidth set\n  // A rotation is then applied dependending on the placement\n  // Also make it slightly bigger\n  // to fix a visual artifact when the tooltip is animated with a scale\n  const width = arrowSize.width + 2;\n  const height = arrowSize.height * 2 + 2;\n  let marginTop = 0;\n  let marginLeft = 0;\n\n  if (placement === 'bottom') {\n    marginTop = arrowSize.height;\n  } else if (placement === 'right') {\n    marginLeft = arrowSize.height;\n  }\n\n  return {\n    left: anchorPoint.x - tooltipOrigin.x - (width / 2 - marginLeft),\n    top: anchorPoint.y - tooltipOrigin.y - (height / 2 - marginTop),\n    width,\n    height,\n    borderTopWidth: height / 2,\n    borderRightWidth: width / 2,\n    borderBottomWidth: height / 2,\n    borderLeftWidth: width / 2,\n  };\n};\n\nconst getArrowRotation = (arrowStyle, placement) => {\n  // prevent rotation getting incorrectly overwritten\n  const arrowRotation = arrowRotationForPlacement(placement);\n  const transform = (StyleSheet.flatten(arrowStyle).transform || []).slice(0);\n  transform.unshift({ rotate: arrowRotation });\n\n  return { transform };\n};\n\nconst tooltipPlacementStyles = ({ arrowSize, placement, tooltipOrigin }) => {\n  const { height } = arrowSize;\n\n  switch (placement) {\n    case 'bottom':\n      return {\n        paddingTop: height,\n        top: tooltipOrigin.y - height,\n        left: tooltipOrigin.x,\n      };\n    case 'top':\n      return {\n        paddingBottom: height,\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x,\n      };\n    case 'right':\n      return {\n        paddingLeft: height,\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x - height,\n      };\n    case 'left':\n      return {\n        paddingRight: height,\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x,\n      };\n    case 'center':\n    default:\n      return {\n        top: tooltipOrigin.y,\n        left: tooltipOrigin.x,\n      };\n  }\n};\n\nconst styleGenerator = styleGeneratorProps => {\n  const {\n    adjustedContentSize,\n    displayInsets,\n    measurementsFinished,\n    ownProps,\n    placement,\n    topAdjustment,\n  } = styleGeneratorProps;\n\n  const { height, width } = adjustedContentSize;\n  const { backgroundColor } = ownProps;\n\n  const contentStyle = [\n    styles.content,\n    height > 0 && { height }, // ignore special case of -1 with center placement (and 0 when not yet measured)\n    width > 0 && { width }, // ignore special case of -1 with center placement (and 0 when not yet measured)\n    ownProps.contentStyle,\n  ];\n\n  const contentBackgroundColor = StyleSheet.flatten(contentStyle)\n    .backgroundColor;\n\n  const arrowStyle = [\n    styles.arrow,\n    arrowPlacementStyles(styleGeneratorProps),\n    { borderTopColor: contentBackgroundColor },\n    ownProps.arrowStyle,\n  ];\n\n  return {\n    arrowStyle: [...arrowStyle, getArrowRotation(arrowStyle, placement)],\n    backgroundStyle: [\n      styles.background,\n      ownProps.backgroundStyle,\n      {\n        paddingTop: displayInsets.top,\n        paddingLeft: displayInsets.left,\n        paddingRight: displayInsets.right,\n        paddingBottom: displayInsets.bottom,\n        backgroundColor,\n      },\n    ],\n    containerStyle: [\n      styles.container,\n      StyleSheet.compose(\n        adjustedContentSize.width !== 0 &&\n          measurementsFinished &&\n          styles.containerVisible,\n        topAdjustment !== 0 && {\n          top: topAdjustment,\n        },\n      ),\n    ],\n    contentStyle,\n    tooltipStyle: [\n      StyleSheet.compose(\n        styles.tooltip,\n        ownProps.disableShadow ? {} : styles.shadow,\n      ),\n      tooltipPlacementStyles(styleGeneratorProps),\n      ownProps.tooltipStyle,\n    ],\n  };\n};\n\nexport default styleGenerator;\n"]},"metadata":{},"sourceType":"module"}